
SPI_Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000266a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  0000266a  000026de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001b90  00000000  00000000  000026e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000e74  00000000  00000000  00004278  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000160  00000000  00000000  000050ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000018f  00000000  00000000  0000524c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002045  00000000  00000000  000053db  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001101  00000000  00000000  00007420  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f82  00000000  00000000  00008521  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  000094a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002c2  00000000  00000000  00009624  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000088e  00000000  00000000  000098e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000a174  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e6       	ldi	r30, 0x6A	; 106
      68:	f6 e2       	ldi	r31, 0x26	; 38
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 36       	cpi	r26, 0x68	; 104
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 c6 11 	call	0x238c	; 0x238c <main>
      7a:	0c 94 33 13 	jmp	0x2666	; 0x2666 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 fc 12 	jmp	0x25f8	; 0x25f8 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 18 13 	jmp	0x2630	; 0x2630 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 08 13 	jmp	0x2610	; 0x2610 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 24 13 	jmp	0x2648	; 0x2648 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 08 13 	jmp	0x2610	; 0x2610 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 24 13 	jmp	0x2648	; 0x2648 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 fc 12 	jmp	0x25f8	; 0x25f8 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 18 13 	jmp	0x2630	; 0x2630 <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 04 13 	jmp	0x2608	; 0x2608 <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	60 e6       	ldi	r22, 0x60	; 96
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 20 13 	jmp	0x2640	; 0x2640 <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 08 13 	jmp	0x2610	; 0x2610 <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 24 13 	jmp	0x2648	; 0x2648 <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 08 13 	jmp	0x2610	; 0x2610 <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 24 13 	jmp	0x2648	; 0x2648 <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 08 13 	jmp	0x2610	; 0x2610 <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 24 13 	jmp	0x2648	; 0x2648 <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 0c 13 	jmp	0x2618	; 0x2618 <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 28 13 	jmp	0x2650	; 0x2650 <__epilogue_restores__+0x20>

00000942 <__pack_f>:
     942:	df 92       	push	r13
     944:	ef 92       	push	r14
     946:	ff 92       	push	r15
     948:	0f 93       	push	r16
     94a:	1f 93       	push	r17
     94c:	fc 01       	movw	r30, r24
     94e:	e4 80       	ldd	r14, Z+4	; 0x04
     950:	f5 80       	ldd	r15, Z+5	; 0x05
     952:	06 81       	ldd	r16, Z+6	; 0x06
     954:	17 81       	ldd	r17, Z+7	; 0x07
     956:	d1 80       	ldd	r13, Z+1	; 0x01
     958:	80 81       	ld	r24, Z
     95a:	82 30       	cpi	r24, 0x02	; 2
     95c:	48 f4       	brcc	.+18     	; 0x970 <__pack_f+0x2e>
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	a0 e1       	ldi	r26, 0x10	; 16
     964:	b0 e0       	ldi	r27, 0x00	; 0
     966:	e8 2a       	or	r14, r24
     968:	f9 2a       	or	r15, r25
     96a:	0a 2b       	or	r16, r26
     96c:	1b 2b       	or	r17, r27
     96e:	a5 c0       	rjmp	.+330    	; 0xaba <__pack_f+0x178>
     970:	84 30       	cpi	r24, 0x04	; 4
     972:	09 f4       	brne	.+2      	; 0x976 <__pack_f+0x34>
     974:	9f c0       	rjmp	.+318    	; 0xab4 <__pack_f+0x172>
     976:	82 30       	cpi	r24, 0x02	; 2
     978:	21 f4       	brne	.+8      	; 0x982 <__pack_f+0x40>
     97a:	ee 24       	eor	r14, r14
     97c:	ff 24       	eor	r15, r15
     97e:	87 01       	movw	r16, r14
     980:	05 c0       	rjmp	.+10     	; 0x98c <__pack_f+0x4a>
     982:	e1 14       	cp	r14, r1
     984:	f1 04       	cpc	r15, r1
     986:	01 05       	cpc	r16, r1
     988:	11 05       	cpc	r17, r1
     98a:	19 f4       	brne	.+6      	; 0x992 <__pack_f+0x50>
     98c:	e0 e0       	ldi	r30, 0x00	; 0
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	96 c0       	rjmp	.+300    	; 0xabe <__pack_f+0x17c>
     992:	62 81       	ldd	r22, Z+2	; 0x02
     994:	73 81       	ldd	r23, Z+3	; 0x03
     996:	9f ef       	ldi	r25, 0xFF	; 255
     998:	62 38       	cpi	r22, 0x82	; 130
     99a:	79 07       	cpc	r23, r25
     99c:	0c f0       	brlt	.+2      	; 0x9a0 <__pack_f+0x5e>
     99e:	5b c0       	rjmp	.+182    	; 0xa56 <__pack_f+0x114>
     9a0:	22 e8       	ldi	r18, 0x82	; 130
     9a2:	3f ef       	ldi	r19, 0xFF	; 255
     9a4:	26 1b       	sub	r18, r22
     9a6:	37 0b       	sbc	r19, r23
     9a8:	2a 31       	cpi	r18, 0x1A	; 26
     9aa:	31 05       	cpc	r19, r1
     9ac:	2c f0       	brlt	.+10     	; 0x9b8 <__pack_f+0x76>
     9ae:	20 e0       	ldi	r18, 0x00	; 0
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	40 e0       	ldi	r20, 0x00	; 0
     9b4:	50 e0       	ldi	r21, 0x00	; 0
     9b6:	2a c0       	rjmp	.+84     	; 0xa0c <__pack_f+0xca>
     9b8:	b8 01       	movw	r22, r16
     9ba:	a7 01       	movw	r20, r14
     9bc:	02 2e       	mov	r0, r18
     9be:	04 c0       	rjmp	.+8      	; 0x9c8 <__pack_f+0x86>
     9c0:	76 95       	lsr	r23
     9c2:	67 95       	ror	r22
     9c4:	57 95       	ror	r21
     9c6:	47 95       	ror	r20
     9c8:	0a 94       	dec	r0
     9ca:	d2 f7       	brpl	.-12     	; 0x9c0 <__pack_f+0x7e>
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	a0 e0       	ldi	r26, 0x00	; 0
     9d2:	b0 e0       	ldi	r27, 0x00	; 0
     9d4:	04 c0       	rjmp	.+8      	; 0x9de <__pack_f+0x9c>
     9d6:	88 0f       	add	r24, r24
     9d8:	99 1f       	adc	r25, r25
     9da:	aa 1f       	adc	r26, r26
     9dc:	bb 1f       	adc	r27, r27
     9de:	2a 95       	dec	r18
     9e0:	d2 f7       	brpl	.-12     	; 0x9d6 <__pack_f+0x94>
     9e2:	01 97       	sbiw	r24, 0x01	; 1
     9e4:	a1 09       	sbc	r26, r1
     9e6:	b1 09       	sbc	r27, r1
     9e8:	8e 21       	and	r24, r14
     9ea:	9f 21       	and	r25, r15
     9ec:	a0 23       	and	r26, r16
     9ee:	b1 23       	and	r27, r17
     9f0:	00 97       	sbiw	r24, 0x00	; 0
     9f2:	a1 05       	cpc	r26, r1
     9f4:	b1 05       	cpc	r27, r1
     9f6:	21 f0       	breq	.+8      	; 0xa00 <__pack_f+0xbe>
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	a0 e0       	ldi	r26, 0x00	; 0
     9fe:	b0 e0       	ldi	r27, 0x00	; 0
     a00:	9a 01       	movw	r18, r20
     a02:	ab 01       	movw	r20, r22
     a04:	28 2b       	or	r18, r24
     a06:	39 2b       	or	r19, r25
     a08:	4a 2b       	or	r20, r26
     a0a:	5b 2b       	or	r21, r27
     a0c:	da 01       	movw	r26, r20
     a0e:	c9 01       	movw	r24, r18
     a10:	8f 77       	andi	r24, 0x7F	; 127
     a12:	90 70       	andi	r25, 0x00	; 0
     a14:	a0 70       	andi	r26, 0x00	; 0
     a16:	b0 70       	andi	r27, 0x00	; 0
     a18:	80 34       	cpi	r24, 0x40	; 64
     a1a:	91 05       	cpc	r25, r1
     a1c:	a1 05       	cpc	r26, r1
     a1e:	b1 05       	cpc	r27, r1
     a20:	39 f4       	brne	.+14     	; 0xa30 <__pack_f+0xee>
     a22:	27 ff       	sbrs	r18, 7
     a24:	09 c0       	rjmp	.+18     	; 0xa38 <__pack_f+0xf6>
     a26:	20 5c       	subi	r18, 0xC0	; 192
     a28:	3f 4f       	sbci	r19, 0xFF	; 255
     a2a:	4f 4f       	sbci	r20, 0xFF	; 255
     a2c:	5f 4f       	sbci	r21, 0xFF	; 255
     a2e:	04 c0       	rjmp	.+8      	; 0xa38 <__pack_f+0xf6>
     a30:	21 5c       	subi	r18, 0xC1	; 193
     a32:	3f 4f       	sbci	r19, 0xFF	; 255
     a34:	4f 4f       	sbci	r20, 0xFF	; 255
     a36:	5f 4f       	sbci	r21, 0xFF	; 255
     a38:	e0 e0       	ldi	r30, 0x00	; 0
     a3a:	f0 e0       	ldi	r31, 0x00	; 0
     a3c:	20 30       	cpi	r18, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	3a 07       	cpc	r19, r26
     a42:	a0 e0       	ldi	r26, 0x00	; 0
     a44:	4a 07       	cpc	r20, r26
     a46:	a0 e4       	ldi	r26, 0x40	; 64
     a48:	5a 07       	cpc	r21, r26
     a4a:	10 f0       	brcs	.+4      	; 0xa50 <__pack_f+0x10e>
     a4c:	e1 e0       	ldi	r30, 0x01	; 1
     a4e:	f0 e0       	ldi	r31, 0x00	; 0
     a50:	79 01       	movw	r14, r18
     a52:	8a 01       	movw	r16, r20
     a54:	27 c0       	rjmp	.+78     	; 0xaa4 <__pack_f+0x162>
     a56:	60 38       	cpi	r22, 0x80	; 128
     a58:	71 05       	cpc	r23, r1
     a5a:	64 f5       	brge	.+88     	; 0xab4 <__pack_f+0x172>
     a5c:	fb 01       	movw	r30, r22
     a5e:	e1 58       	subi	r30, 0x81	; 129
     a60:	ff 4f       	sbci	r31, 0xFF	; 255
     a62:	d8 01       	movw	r26, r16
     a64:	c7 01       	movw	r24, r14
     a66:	8f 77       	andi	r24, 0x7F	; 127
     a68:	90 70       	andi	r25, 0x00	; 0
     a6a:	a0 70       	andi	r26, 0x00	; 0
     a6c:	b0 70       	andi	r27, 0x00	; 0
     a6e:	80 34       	cpi	r24, 0x40	; 64
     a70:	91 05       	cpc	r25, r1
     a72:	a1 05       	cpc	r26, r1
     a74:	b1 05       	cpc	r27, r1
     a76:	39 f4       	brne	.+14     	; 0xa86 <__pack_f+0x144>
     a78:	e7 fe       	sbrs	r14, 7
     a7a:	0d c0       	rjmp	.+26     	; 0xa96 <__pack_f+0x154>
     a7c:	80 e4       	ldi	r24, 0x40	; 64
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	a0 e0       	ldi	r26, 0x00	; 0
     a82:	b0 e0       	ldi	r27, 0x00	; 0
     a84:	04 c0       	rjmp	.+8      	; 0xa8e <__pack_f+0x14c>
     a86:	8f e3       	ldi	r24, 0x3F	; 63
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	e8 0e       	add	r14, r24
     a90:	f9 1e       	adc	r15, r25
     a92:	0a 1f       	adc	r16, r26
     a94:	1b 1f       	adc	r17, r27
     a96:	17 ff       	sbrs	r17, 7
     a98:	05 c0       	rjmp	.+10     	; 0xaa4 <__pack_f+0x162>
     a9a:	16 95       	lsr	r17
     a9c:	07 95       	ror	r16
     a9e:	f7 94       	ror	r15
     aa0:	e7 94       	ror	r14
     aa2:	31 96       	adiw	r30, 0x01	; 1
     aa4:	87 e0       	ldi	r24, 0x07	; 7
     aa6:	16 95       	lsr	r17
     aa8:	07 95       	ror	r16
     aaa:	f7 94       	ror	r15
     aac:	e7 94       	ror	r14
     aae:	8a 95       	dec	r24
     ab0:	d1 f7       	brne	.-12     	; 0xaa6 <__pack_f+0x164>
     ab2:	05 c0       	rjmp	.+10     	; 0xabe <__pack_f+0x17c>
     ab4:	ee 24       	eor	r14, r14
     ab6:	ff 24       	eor	r15, r15
     ab8:	87 01       	movw	r16, r14
     aba:	ef ef       	ldi	r30, 0xFF	; 255
     abc:	f0 e0       	ldi	r31, 0x00	; 0
     abe:	6e 2f       	mov	r22, r30
     ac0:	67 95       	ror	r22
     ac2:	66 27       	eor	r22, r22
     ac4:	67 95       	ror	r22
     ac6:	90 2f       	mov	r25, r16
     ac8:	9f 77       	andi	r25, 0x7F	; 127
     aca:	d7 94       	ror	r13
     acc:	dd 24       	eor	r13, r13
     ace:	d7 94       	ror	r13
     ad0:	8e 2f       	mov	r24, r30
     ad2:	86 95       	lsr	r24
     ad4:	49 2f       	mov	r20, r25
     ad6:	46 2b       	or	r20, r22
     ad8:	58 2f       	mov	r21, r24
     ada:	5d 29       	or	r21, r13
     adc:	b7 01       	movw	r22, r14
     ade:	ca 01       	movw	r24, r20
     ae0:	1f 91       	pop	r17
     ae2:	0f 91       	pop	r16
     ae4:	ff 90       	pop	r15
     ae6:	ef 90       	pop	r14
     ae8:	df 90       	pop	r13
     aea:	08 95       	ret

00000aec <__unpack_f>:
     aec:	fc 01       	movw	r30, r24
     aee:	db 01       	movw	r26, r22
     af0:	40 81       	ld	r20, Z
     af2:	51 81       	ldd	r21, Z+1	; 0x01
     af4:	22 81       	ldd	r18, Z+2	; 0x02
     af6:	62 2f       	mov	r22, r18
     af8:	6f 77       	andi	r22, 0x7F	; 127
     afa:	70 e0       	ldi	r23, 0x00	; 0
     afc:	22 1f       	adc	r18, r18
     afe:	22 27       	eor	r18, r18
     b00:	22 1f       	adc	r18, r18
     b02:	93 81       	ldd	r25, Z+3	; 0x03
     b04:	89 2f       	mov	r24, r25
     b06:	88 0f       	add	r24, r24
     b08:	82 2b       	or	r24, r18
     b0a:	28 2f       	mov	r18, r24
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	99 1f       	adc	r25, r25
     b10:	99 27       	eor	r25, r25
     b12:	99 1f       	adc	r25, r25
     b14:	11 96       	adiw	r26, 0x01	; 1
     b16:	9c 93       	st	X, r25
     b18:	11 97       	sbiw	r26, 0x01	; 1
     b1a:	21 15       	cp	r18, r1
     b1c:	31 05       	cpc	r19, r1
     b1e:	a9 f5       	brne	.+106    	; 0xb8a <__unpack_f+0x9e>
     b20:	41 15       	cp	r20, r1
     b22:	51 05       	cpc	r21, r1
     b24:	61 05       	cpc	r22, r1
     b26:	71 05       	cpc	r23, r1
     b28:	11 f4       	brne	.+4      	; 0xb2e <__unpack_f+0x42>
     b2a:	82 e0       	ldi	r24, 0x02	; 2
     b2c:	37 c0       	rjmp	.+110    	; 0xb9c <__unpack_f+0xb0>
     b2e:	82 e8       	ldi	r24, 0x82	; 130
     b30:	9f ef       	ldi	r25, 0xFF	; 255
     b32:	13 96       	adiw	r26, 0x03	; 3
     b34:	9c 93       	st	X, r25
     b36:	8e 93       	st	-X, r24
     b38:	12 97       	sbiw	r26, 0x02	; 2
     b3a:	9a 01       	movw	r18, r20
     b3c:	ab 01       	movw	r20, r22
     b3e:	67 e0       	ldi	r22, 0x07	; 7
     b40:	22 0f       	add	r18, r18
     b42:	33 1f       	adc	r19, r19
     b44:	44 1f       	adc	r20, r20
     b46:	55 1f       	adc	r21, r21
     b48:	6a 95       	dec	r22
     b4a:	d1 f7       	brne	.-12     	; 0xb40 <__unpack_f+0x54>
     b4c:	83 e0       	ldi	r24, 0x03	; 3
     b4e:	8c 93       	st	X, r24
     b50:	0d c0       	rjmp	.+26     	; 0xb6c <__unpack_f+0x80>
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	12 96       	adiw	r26, 0x02	; 2
     b5c:	8d 91       	ld	r24, X+
     b5e:	9c 91       	ld	r25, X
     b60:	13 97       	sbiw	r26, 0x03	; 3
     b62:	01 97       	sbiw	r24, 0x01	; 1
     b64:	13 96       	adiw	r26, 0x03	; 3
     b66:	9c 93       	st	X, r25
     b68:	8e 93       	st	-X, r24
     b6a:	12 97       	sbiw	r26, 0x02	; 2
     b6c:	20 30       	cpi	r18, 0x00	; 0
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	38 07       	cpc	r19, r24
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	48 07       	cpc	r20, r24
     b76:	80 e4       	ldi	r24, 0x40	; 64
     b78:	58 07       	cpc	r21, r24
     b7a:	58 f3       	brcs	.-42     	; 0xb52 <__unpack_f+0x66>
     b7c:	14 96       	adiw	r26, 0x04	; 4
     b7e:	2d 93       	st	X+, r18
     b80:	3d 93       	st	X+, r19
     b82:	4d 93       	st	X+, r20
     b84:	5c 93       	st	X, r21
     b86:	17 97       	sbiw	r26, 0x07	; 7
     b88:	08 95       	ret
     b8a:	2f 3f       	cpi	r18, 0xFF	; 255
     b8c:	31 05       	cpc	r19, r1
     b8e:	79 f4       	brne	.+30     	; 0xbae <__unpack_f+0xc2>
     b90:	41 15       	cp	r20, r1
     b92:	51 05       	cpc	r21, r1
     b94:	61 05       	cpc	r22, r1
     b96:	71 05       	cpc	r23, r1
     b98:	19 f4       	brne	.+6      	; 0xba0 <__unpack_f+0xb4>
     b9a:	84 e0       	ldi	r24, 0x04	; 4
     b9c:	8c 93       	st	X, r24
     b9e:	08 95       	ret
     ba0:	64 ff       	sbrs	r22, 4
     ba2:	03 c0       	rjmp	.+6      	; 0xbaa <__unpack_f+0xbe>
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	8c 93       	st	X, r24
     ba8:	12 c0       	rjmp	.+36     	; 0xbce <__unpack_f+0xe2>
     baa:	1c 92       	st	X, r1
     bac:	10 c0       	rjmp	.+32     	; 0xbce <__unpack_f+0xe2>
     bae:	2f 57       	subi	r18, 0x7F	; 127
     bb0:	30 40       	sbci	r19, 0x00	; 0
     bb2:	13 96       	adiw	r26, 0x03	; 3
     bb4:	3c 93       	st	X, r19
     bb6:	2e 93       	st	-X, r18
     bb8:	12 97       	sbiw	r26, 0x02	; 2
     bba:	83 e0       	ldi	r24, 0x03	; 3
     bbc:	8c 93       	st	X, r24
     bbe:	87 e0       	ldi	r24, 0x07	; 7
     bc0:	44 0f       	add	r20, r20
     bc2:	55 1f       	adc	r21, r21
     bc4:	66 1f       	adc	r22, r22
     bc6:	77 1f       	adc	r23, r23
     bc8:	8a 95       	dec	r24
     bca:	d1 f7       	brne	.-12     	; 0xbc0 <__unpack_f+0xd4>
     bcc:	70 64       	ori	r23, 0x40	; 64
     bce:	14 96       	adiw	r26, 0x04	; 4
     bd0:	4d 93       	st	X+, r20
     bd2:	5d 93       	st	X+, r21
     bd4:	6d 93       	st	X+, r22
     bd6:	7c 93       	st	X, r23
     bd8:	17 97       	sbiw	r26, 0x07	; 7
     bda:	08 95       	ret

00000bdc <__fpcmp_parts_f>:
     bdc:	1f 93       	push	r17
     bde:	dc 01       	movw	r26, r24
     be0:	fb 01       	movw	r30, r22
     be2:	9c 91       	ld	r25, X
     be4:	92 30       	cpi	r25, 0x02	; 2
     be6:	08 f4       	brcc	.+2      	; 0xbea <__fpcmp_parts_f+0xe>
     be8:	47 c0       	rjmp	.+142    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bea:	80 81       	ld	r24, Z
     bec:	82 30       	cpi	r24, 0x02	; 2
     bee:	08 f4       	brcc	.+2      	; 0xbf2 <__fpcmp_parts_f+0x16>
     bf0:	43 c0       	rjmp	.+134    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bf2:	94 30       	cpi	r25, 0x04	; 4
     bf4:	51 f4       	brne	.+20     	; 0xc0a <__fpcmp_parts_f+0x2e>
     bf6:	11 96       	adiw	r26, 0x01	; 1
     bf8:	1c 91       	ld	r17, X
     bfa:	84 30       	cpi	r24, 0x04	; 4
     bfc:	99 f5       	brne	.+102    	; 0xc64 <__fpcmp_parts_f+0x88>
     bfe:	81 81       	ldd	r24, Z+1	; 0x01
     c00:	68 2f       	mov	r22, r24
     c02:	70 e0       	ldi	r23, 0x00	; 0
     c04:	61 1b       	sub	r22, r17
     c06:	71 09       	sbc	r23, r1
     c08:	3f c0       	rjmp	.+126    	; 0xc88 <__fpcmp_parts_f+0xac>
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	21 f0       	breq	.+8      	; 0xc16 <__fpcmp_parts_f+0x3a>
     c0e:	92 30       	cpi	r25, 0x02	; 2
     c10:	31 f4       	brne	.+12     	; 0xc1e <__fpcmp_parts_f+0x42>
     c12:	82 30       	cpi	r24, 0x02	; 2
     c14:	b9 f1       	breq	.+110    	; 0xc84 <__fpcmp_parts_f+0xa8>
     c16:	81 81       	ldd	r24, Z+1	; 0x01
     c18:	88 23       	and	r24, r24
     c1a:	89 f1       	breq	.+98     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c1c:	2d c0       	rjmp	.+90     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c1e:	11 96       	adiw	r26, 0x01	; 1
     c20:	1c 91       	ld	r17, X
     c22:	11 97       	sbiw	r26, 0x01	; 1
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	f1 f0       	breq	.+60     	; 0xc64 <__fpcmp_parts_f+0x88>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	18 17       	cp	r17, r24
     c2c:	d9 f4       	brne	.+54     	; 0xc64 <__fpcmp_parts_f+0x88>
     c2e:	12 96       	adiw	r26, 0x02	; 2
     c30:	2d 91       	ld	r18, X+
     c32:	3c 91       	ld	r19, X
     c34:	13 97       	sbiw	r26, 0x03	; 3
     c36:	82 81       	ldd	r24, Z+2	; 0x02
     c38:	93 81       	ldd	r25, Z+3	; 0x03
     c3a:	82 17       	cp	r24, r18
     c3c:	93 07       	cpc	r25, r19
     c3e:	94 f0       	brlt	.+36     	; 0xc64 <__fpcmp_parts_f+0x88>
     c40:	28 17       	cp	r18, r24
     c42:	39 07       	cpc	r19, r25
     c44:	bc f0       	brlt	.+46     	; 0xc74 <__fpcmp_parts_f+0x98>
     c46:	14 96       	adiw	r26, 0x04	; 4
     c48:	8d 91       	ld	r24, X+
     c4a:	9d 91       	ld	r25, X+
     c4c:	0d 90       	ld	r0, X+
     c4e:	bc 91       	ld	r27, X
     c50:	a0 2d       	mov	r26, r0
     c52:	24 81       	ldd	r18, Z+4	; 0x04
     c54:	35 81       	ldd	r19, Z+5	; 0x05
     c56:	46 81       	ldd	r20, Z+6	; 0x06
     c58:	57 81       	ldd	r21, Z+7	; 0x07
     c5a:	28 17       	cp	r18, r24
     c5c:	39 07       	cpc	r19, r25
     c5e:	4a 07       	cpc	r20, r26
     c60:	5b 07       	cpc	r21, r27
     c62:	18 f4       	brcc	.+6      	; 0xc6a <__fpcmp_parts_f+0x8e>
     c64:	11 23       	and	r17, r17
     c66:	41 f0       	breq	.+16     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c68:	0a c0       	rjmp	.+20     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c6a:	82 17       	cp	r24, r18
     c6c:	93 07       	cpc	r25, r19
     c6e:	a4 07       	cpc	r26, r20
     c70:	b5 07       	cpc	r27, r21
     c72:	40 f4       	brcc	.+16     	; 0xc84 <__fpcmp_parts_f+0xa8>
     c74:	11 23       	and	r17, r17
     c76:	19 f0       	breq	.+6      	; 0xc7e <__fpcmp_parts_f+0xa2>
     c78:	61 e0       	ldi	r22, 0x01	; 1
     c7a:	70 e0       	ldi	r23, 0x00	; 0
     c7c:	05 c0       	rjmp	.+10     	; 0xc88 <__fpcmp_parts_f+0xac>
     c7e:	6f ef       	ldi	r22, 0xFF	; 255
     c80:	7f ef       	ldi	r23, 0xFF	; 255
     c82:	02 c0       	rjmp	.+4      	; 0xc88 <__fpcmp_parts_f+0xac>
     c84:	60 e0       	ldi	r22, 0x00	; 0
     c86:	70 e0       	ldi	r23, 0x00	; 0
     c88:	cb 01       	movw	r24, r22
     c8a:	1f 91       	pop	r17
     c8c:	08 95       	ret

00000c8e <HLCD_U8Init>:
#include "HLCD_Interface.h"
#include "HLCD_Private.h"
#include "HLCD_Config.h"
#include <avr/delay.h>
#include <stdio.h>
u8 HLCD_U8Init(void){
     c8e:	0f 93       	push	r16
     c90:	1f 93       	push	r17
     c92:	df 93       	push	r29
     c94:	cf 93       	push	r28
     c96:	cd b7       	in	r28, 0x3d	; 61
     c98:	de b7       	in	r29, 0x3e	; 62
     c9a:	cd 54       	subi	r28, 0x4D	; 77
     c9c:	d0 40       	sbci	r29, 0x00	; 0
     c9e:	0f b6       	in	r0, 0x3f	; 63
     ca0:	f8 94       	cli
     ca2:	de bf       	out	0x3e, r29	; 62
     ca4:	0f be       	out	0x3f, r0	; 63
     ca6:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8ErrorState = STD_TYPES_OK;
     ca8:	fe 01       	movw	r30, r28
     caa:	e3 5b       	subi	r30, 0xB3	; 179
     cac:	ff 4f       	sbci	r31, 0xFF	; 255
     cae:	81 e0       	ldi	r24, 0x01	; 1
     cb0:	80 83       	st	Z, r24
     cb2:	fe 01       	movw	r30, r28
     cb4:	e7 5b       	subi	r30, 0xB7	; 183
     cb6:	ff 4f       	sbci	r31, 0xFF	; 255
     cb8:	80 e0       	ldi	r24, 0x00	; 0
     cba:	90 e0       	ldi	r25, 0x00	; 0
     cbc:	a8 ef       	ldi	r26, 0xF8	; 248
     cbe:	b1 e4       	ldi	r27, 0x41	; 65
     cc0:	80 83       	st	Z, r24
     cc2:	91 83       	std	Z+1, r25	; 0x01
     cc4:	a2 83       	std	Z+2, r26	; 0x02
     cc6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cc8:	8e 01       	movw	r16, r28
     cca:	0b 5b       	subi	r16, 0xBB	; 187
     ccc:	1f 4f       	sbci	r17, 0xFF	; 255
     cce:	fe 01       	movw	r30, r28
     cd0:	e7 5b       	subi	r30, 0xB7	; 183
     cd2:	ff 4f       	sbci	r31, 0xFF	; 255
     cd4:	60 81       	ld	r22, Z
     cd6:	71 81       	ldd	r23, Z+1	; 0x01
     cd8:	82 81       	ldd	r24, Z+2	; 0x02
     cda:	93 81       	ldd	r25, Z+3	; 0x03
     cdc:	20 e0       	ldi	r18, 0x00	; 0
     cde:	30 e0       	ldi	r19, 0x00	; 0
     ce0:	4a ef       	ldi	r20, 0xFA	; 250
     ce2:	54 e4       	ldi	r21, 0x44	; 68
     ce4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     ce8:	dc 01       	movw	r26, r24
     cea:	cb 01       	movw	r24, r22
     cec:	f8 01       	movw	r30, r16
     cee:	80 83       	st	Z, r24
     cf0:	91 83       	std	Z+1, r25	; 0x01
     cf2:	a2 83       	std	Z+2, r26	; 0x02
     cf4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     cf6:	fe 01       	movw	r30, r28
     cf8:	eb 5b       	subi	r30, 0xBB	; 187
     cfa:	ff 4f       	sbci	r31, 0xFF	; 255
     cfc:	60 81       	ld	r22, Z
     cfe:	71 81       	ldd	r23, Z+1	; 0x01
     d00:	82 81       	ldd	r24, Z+2	; 0x02
     d02:	93 81       	ldd	r25, Z+3	; 0x03
     d04:	20 e0       	ldi	r18, 0x00	; 0
     d06:	30 e0       	ldi	r19, 0x00	; 0
     d08:	40 e8       	ldi	r20, 0x80	; 128
     d0a:	5f e3       	ldi	r21, 0x3F	; 63
     d0c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
     d10:	88 23       	and	r24, r24
     d12:	44 f4       	brge	.+16     	; 0xd24 <HLCD_U8Init+0x96>
		__ticks = 1;
     d14:	fe 01       	movw	r30, r28
     d16:	ed 5b       	subi	r30, 0xBD	; 189
     d18:	ff 4f       	sbci	r31, 0xFF	; 255
     d1a:	81 e0       	ldi	r24, 0x01	; 1
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	91 83       	std	Z+1, r25	; 0x01
     d20:	80 83       	st	Z, r24
     d22:	64 c0       	rjmp	.+200    	; 0xdec <HLCD_U8Init+0x15e>
	else if (__tmp > 65535)
     d24:	fe 01       	movw	r30, r28
     d26:	eb 5b       	subi	r30, 0xBB	; 187
     d28:	ff 4f       	sbci	r31, 0xFF	; 255
     d2a:	60 81       	ld	r22, Z
     d2c:	71 81       	ldd	r23, Z+1	; 0x01
     d2e:	82 81       	ldd	r24, Z+2	; 0x02
     d30:	93 81       	ldd	r25, Z+3	; 0x03
     d32:	20 e0       	ldi	r18, 0x00	; 0
     d34:	3f ef       	ldi	r19, 0xFF	; 255
     d36:	4f e7       	ldi	r20, 0x7F	; 127
     d38:	57 e4       	ldi	r21, 0x47	; 71
     d3a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
     d3e:	18 16       	cp	r1, r24
     d40:	0c f0       	brlt	.+2      	; 0xd44 <HLCD_U8Init+0xb6>
     d42:	43 c0       	rjmp	.+134    	; 0xdca <HLCD_U8Init+0x13c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d44:	fe 01       	movw	r30, r28
     d46:	e7 5b       	subi	r30, 0xB7	; 183
     d48:	ff 4f       	sbci	r31, 0xFF	; 255
     d4a:	60 81       	ld	r22, Z
     d4c:	71 81       	ldd	r23, Z+1	; 0x01
     d4e:	82 81       	ldd	r24, Z+2	; 0x02
     d50:	93 81       	ldd	r25, Z+3	; 0x03
     d52:	20 e0       	ldi	r18, 0x00	; 0
     d54:	30 e0       	ldi	r19, 0x00	; 0
     d56:	40 e2       	ldi	r20, 0x20	; 32
     d58:	51 e4       	ldi	r21, 0x41	; 65
     d5a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     d5e:	dc 01       	movw	r26, r24
     d60:	cb 01       	movw	r24, r22
     d62:	8e 01       	movw	r16, r28
     d64:	0d 5b       	subi	r16, 0xBD	; 189
     d66:	1f 4f       	sbci	r17, 0xFF	; 255
     d68:	bc 01       	movw	r22, r24
     d6a:	cd 01       	movw	r24, r26
     d6c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     d70:	dc 01       	movw	r26, r24
     d72:	cb 01       	movw	r24, r22
     d74:	f8 01       	movw	r30, r16
     d76:	91 83       	std	Z+1, r25	; 0x01
     d78:	80 83       	st	Z, r24
     d7a:	1f c0       	rjmp	.+62     	; 0xdba <HLCD_U8Init+0x12c>
     d7c:	fe 01       	movw	r30, r28
     d7e:	ef 5b       	subi	r30, 0xBF	; 191
     d80:	ff 4f       	sbci	r31, 0xFF	; 255
     d82:	88 ec       	ldi	r24, 0xC8	; 200
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	91 83       	std	Z+1, r25	; 0x01
     d88:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d8a:	fe 01       	movw	r30, r28
     d8c:	ef 5b       	subi	r30, 0xBF	; 191
     d8e:	ff 4f       	sbci	r31, 0xFF	; 255
     d90:	80 81       	ld	r24, Z
     d92:	91 81       	ldd	r25, Z+1	; 0x01
     d94:	01 97       	sbiw	r24, 0x01	; 1
     d96:	f1 f7       	brne	.-4      	; 0xd94 <HLCD_U8Init+0x106>
     d98:	fe 01       	movw	r30, r28
     d9a:	ef 5b       	subi	r30, 0xBF	; 191
     d9c:	ff 4f       	sbci	r31, 0xFF	; 255
     d9e:	91 83       	std	Z+1, r25	; 0x01
     da0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     da2:	de 01       	movw	r26, r28
     da4:	ad 5b       	subi	r26, 0xBD	; 189
     da6:	bf 4f       	sbci	r27, 0xFF	; 255
     da8:	fe 01       	movw	r30, r28
     daa:	ed 5b       	subi	r30, 0xBD	; 189
     dac:	ff 4f       	sbci	r31, 0xFF	; 255
     dae:	80 81       	ld	r24, Z
     db0:	91 81       	ldd	r25, Z+1	; 0x01
     db2:	01 97       	sbiw	r24, 0x01	; 1
     db4:	11 96       	adiw	r26, 0x01	; 1
     db6:	9c 93       	st	X, r25
     db8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dba:	fe 01       	movw	r30, r28
     dbc:	ed 5b       	subi	r30, 0xBD	; 189
     dbe:	ff 4f       	sbci	r31, 0xFF	; 255
     dc0:	80 81       	ld	r24, Z
     dc2:	91 81       	ldd	r25, Z+1	; 0x01
     dc4:	00 97       	sbiw	r24, 0x00	; 0
     dc6:	d1 f6       	brne	.-76     	; 0xd7c <HLCD_U8Init+0xee>
     dc8:	24 c0       	rjmp	.+72     	; 0xe12 <HLCD_U8Init+0x184>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     dca:	8e 01       	movw	r16, r28
     dcc:	0d 5b       	subi	r16, 0xBD	; 189
     dce:	1f 4f       	sbci	r17, 0xFF	; 255
     dd0:	fe 01       	movw	r30, r28
     dd2:	eb 5b       	subi	r30, 0xBB	; 187
     dd4:	ff 4f       	sbci	r31, 0xFF	; 255
     dd6:	60 81       	ld	r22, Z
     dd8:	71 81       	ldd	r23, Z+1	; 0x01
     dda:	82 81       	ldd	r24, Z+2	; 0x02
     ddc:	93 81       	ldd	r25, Z+3	; 0x03
     dde:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     de2:	dc 01       	movw	r26, r24
     de4:	cb 01       	movw	r24, r22
     de6:	f8 01       	movw	r30, r16
     de8:	91 83       	std	Z+1, r25	; 0x01
     dea:	80 83       	st	Z, r24
     dec:	fe 01       	movw	r30, r28
     dee:	ed 5b       	subi	r30, 0xBD	; 189
     df0:	ff 4f       	sbci	r31, 0xFF	; 255
     df2:	80 81       	ld	r24, Z
     df4:	91 81       	ldd	r25, Z+1	; 0x01
     df6:	fe 01       	movw	r30, r28
     df8:	ff 96       	adiw	r30, 0x3f	; 63
     dfa:	91 83       	std	Z+1, r25	; 0x01
     dfc:	80 83       	st	Z, r24
     dfe:	fe 01       	movw	r30, r28
     e00:	ff 96       	adiw	r30, 0x3f	; 63
     e02:	80 81       	ld	r24, Z
     e04:	91 81       	ldd	r25, Z+1	; 0x01
     e06:	01 97       	sbiw	r24, 0x01	; 1
     e08:	f1 f7       	brne	.-4      	; 0xe06 <HLCD_U8Init+0x178>
     e0a:	fe 01       	movw	r30, r28
     e0c:	ff 96       	adiw	r30, 0x3f	; 63
     e0e:	91 83       	std	Z+1, r25	; 0x01
     e10:	80 83       	st	Z, r24
	_delay_ms(31);
	/*send function set command*/
	HLCD_U8WriteCommand(0b00111000);
     e12:	88 e3       	ldi	r24, 0x38	; 56
     e14:	0e 94 00 0a 	call	0x1400	; 0x1400 <HLCD_U8WriteCommand>
     e18:	80 e0       	ldi	r24, 0x00	; 0
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	a0 e2       	ldi	r26, 0x20	; 32
     e1e:	b2 e4       	ldi	r27, 0x42	; 66
     e20:	8b af       	std	Y+59, r24	; 0x3b
     e22:	9c af       	std	Y+60, r25	; 0x3c
     e24:	ad af       	std	Y+61, r26	; 0x3d
     e26:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     e28:	6b ad       	ldd	r22, Y+59	; 0x3b
     e2a:	7c ad       	ldd	r23, Y+60	; 0x3c
     e2c:	8d ad       	ldd	r24, Y+61	; 0x3d
     e2e:	9e ad       	ldd	r25, Y+62	; 0x3e
     e30:	2b ea       	ldi	r18, 0xAB	; 171
     e32:	3a ea       	ldi	r19, 0xAA	; 170
     e34:	4a e2       	ldi	r20, 0x2A	; 42
     e36:	50 e4       	ldi	r21, 0x40	; 64
     e38:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     e3c:	dc 01       	movw	r26, r24
     e3e:	cb 01       	movw	r24, r22
     e40:	8f ab       	std	Y+55, r24	; 0x37
     e42:	98 af       	std	Y+56, r25	; 0x38
     e44:	a9 af       	std	Y+57, r26	; 0x39
     e46:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
     e48:	6f a9       	ldd	r22, Y+55	; 0x37
     e4a:	78 ad       	ldd	r23, Y+56	; 0x38
     e4c:	89 ad       	ldd	r24, Y+57	; 0x39
     e4e:	9a ad       	ldd	r25, Y+58	; 0x3a
     e50:	20 e0       	ldi	r18, 0x00	; 0
     e52:	30 e0       	ldi	r19, 0x00	; 0
     e54:	40 e8       	ldi	r20, 0x80	; 128
     e56:	5f e3       	ldi	r21, 0x3F	; 63
     e58:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
     e5c:	88 23       	and	r24, r24
     e5e:	1c f4       	brge	.+6      	; 0xe66 <HLCD_U8Init+0x1d8>
		__ticks = 1;
     e60:	81 e0       	ldi	r24, 0x01	; 1
     e62:	8e ab       	std	Y+54, r24	; 0x36
     e64:	91 c0       	rjmp	.+290    	; 0xf88 <HLCD_U8Init+0x2fa>
	else if (__tmp > 255)
     e66:	6f a9       	ldd	r22, Y+55	; 0x37
     e68:	78 ad       	ldd	r23, Y+56	; 0x38
     e6a:	89 ad       	ldd	r24, Y+57	; 0x39
     e6c:	9a ad       	ldd	r25, Y+58	; 0x3a
     e6e:	20 e0       	ldi	r18, 0x00	; 0
     e70:	30 e0       	ldi	r19, 0x00	; 0
     e72:	4f e7       	ldi	r20, 0x7F	; 127
     e74:	53 e4       	ldi	r21, 0x43	; 67
     e76:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
     e7a:	18 16       	cp	r1, r24
     e7c:	0c f0       	brlt	.+2      	; 0xe80 <HLCD_U8Init+0x1f2>
     e7e:	7b c0       	rjmp	.+246    	; 0xf76 <HLCD_U8Init+0x2e8>
	{
		_delay_ms(__us / 1000.0);
     e80:	6b ad       	ldd	r22, Y+59	; 0x3b
     e82:	7c ad       	ldd	r23, Y+60	; 0x3c
     e84:	8d ad       	ldd	r24, Y+61	; 0x3d
     e86:	9e ad       	ldd	r25, Y+62	; 0x3e
     e88:	20 e0       	ldi	r18, 0x00	; 0
     e8a:	30 e0       	ldi	r19, 0x00	; 0
     e8c:	4a e7       	ldi	r20, 0x7A	; 122
     e8e:	54 e4       	ldi	r21, 0x44	; 68
     e90:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
     e94:	dc 01       	movw	r26, r24
     e96:	cb 01       	movw	r24, r22
     e98:	8a ab       	std	Y+50, r24	; 0x32
     e9a:	9b ab       	std	Y+51, r25	; 0x33
     e9c:	ac ab       	std	Y+52, r26	; 0x34
     e9e:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ea0:	6a a9       	ldd	r22, Y+50	; 0x32
     ea2:	7b a9       	ldd	r23, Y+51	; 0x33
     ea4:	8c a9       	ldd	r24, Y+52	; 0x34
     ea6:	9d a9       	ldd	r25, Y+53	; 0x35
     ea8:	20 e0       	ldi	r18, 0x00	; 0
     eaa:	30 e0       	ldi	r19, 0x00	; 0
     eac:	4a ef       	ldi	r20, 0xFA	; 250
     eae:	54 e4       	ldi	r21, 0x44	; 68
     eb0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     eb4:	dc 01       	movw	r26, r24
     eb6:	cb 01       	movw	r24, r22
     eb8:	8e a7       	std	Y+46, r24	; 0x2e
     eba:	9f a7       	std	Y+47, r25	; 0x2f
     ebc:	a8 ab       	std	Y+48, r26	; 0x30
     ebe:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
     ec0:	6e a5       	ldd	r22, Y+46	; 0x2e
     ec2:	7f a5       	ldd	r23, Y+47	; 0x2f
     ec4:	88 a9       	ldd	r24, Y+48	; 0x30
     ec6:	99 a9       	ldd	r25, Y+49	; 0x31
     ec8:	20 e0       	ldi	r18, 0x00	; 0
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	40 e8       	ldi	r20, 0x80	; 128
     ece:	5f e3       	ldi	r21, 0x3F	; 63
     ed0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
     ed4:	88 23       	and	r24, r24
     ed6:	2c f4       	brge	.+10     	; 0xee2 <HLCD_U8Init+0x254>
		__ticks = 1;
     ed8:	81 e0       	ldi	r24, 0x01	; 1
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	9d a7       	std	Y+45, r25	; 0x2d
     ede:	8c a7       	std	Y+44, r24	; 0x2c
     ee0:	3f c0       	rjmp	.+126    	; 0xf60 <HLCD_U8Init+0x2d2>
	else if (__tmp > 65535)
     ee2:	6e a5       	ldd	r22, Y+46	; 0x2e
     ee4:	7f a5       	ldd	r23, Y+47	; 0x2f
     ee6:	88 a9       	ldd	r24, Y+48	; 0x30
     ee8:	99 a9       	ldd	r25, Y+49	; 0x31
     eea:	20 e0       	ldi	r18, 0x00	; 0
     eec:	3f ef       	ldi	r19, 0xFF	; 255
     eee:	4f e7       	ldi	r20, 0x7F	; 127
     ef0:	57 e4       	ldi	r21, 0x47	; 71
     ef2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
     ef6:	18 16       	cp	r1, r24
     ef8:	4c f5       	brge	.+82     	; 0xf4c <HLCD_U8Init+0x2be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     efa:	6a a9       	ldd	r22, Y+50	; 0x32
     efc:	7b a9       	ldd	r23, Y+51	; 0x33
     efe:	8c a9       	ldd	r24, Y+52	; 0x34
     f00:	9d a9       	ldd	r25, Y+53	; 0x35
     f02:	20 e0       	ldi	r18, 0x00	; 0
     f04:	30 e0       	ldi	r19, 0x00	; 0
     f06:	40 e2       	ldi	r20, 0x20	; 32
     f08:	51 e4       	ldi	r21, 0x41	; 65
     f0a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f0e:	dc 01       	movw	r26, r24
     f10:	cb 01       	movw	r24, r22
     f12:	bc 01       	movw	r22, r24
     f14:	cd 01       	movw	r24, r26
     f16:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     f1a:	dc 01       	movw	r26, r24
     f1c:	cb 01       	movw	r24, r22
     f1e:	9d a7       	std	Y+45, r25	; 0x2d
     f20:	8c a7       	std	Y+44, r24	; 0x2c
     f22:	0f c0       	rjmp	.+30     	; 0xf42 <HLCD_U8Init+0x2b4>
     f24:	88 ec       	ldi	r24, 0xC8	; 200
     f26:	90 e0       	ldi	r25, 0x00	; 0
     f28:	9b a7       	std	Y+43, r25	; 0x2b
     f2a:	8a a7       	std	Y+42, r24	; 0x2a
     f2c:	8a a5       	ldd	r24, Y+42	; 0x2a
     f2e:	9b a5       	ldd	r25, Y+43	; 0x2b
     f30:	01 97       	sbiw	r24, 0x01	; 1
     f32:	f1 f7       	brne	.-4      	; 0xf30 <HLCD_U8Init+0x2a2>
     f34:	9b a7       	std	Y+43, r25	; 0x2b
     f36:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f38:	8c a5       	ldd	r24, Y+44	; 0x2c
     f3a:	9d a5       	ldd	r25, Y+45	; 0x2d
     f3c:	01 97       	sbiw	r24, 0x01	; 1
     f3e:	9d a7       	std	Y+45, r25	; 0x2d
     f40:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f42:	8c a5       	ldd	r24, Y+44	; 0x2c
     f44:	9d a5       	ldd	r25, Y+45	; 0x2d
     f46:	00 97       	sbiw	r24, 0x00	; 0
     f48:	69 f7       	brne	.-38     	; 0xf24 <HLCD_U8Init+0x296>
     f4a:	24 c0       	rjmp	.+72     	; 0xf94 <HLCD_U8Init+0x306>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f4c:	6e a5       	ldd	r22, Y+46	; 0x2e
     f4e:	7f a5       	ldd	r23, Y+47	; 0x2f
     f50:	88 a9       	ldd	r24, Y+48	; 0x30
     f52:	99 a9       	ldd	r25, Y+49	; 0x31
     f54:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     f58:	dc 01       	movw	r26, r24
     f5a:	cb 01       	movw	r24, r22
     f5c:	9d a7       	std	Y+45, r25	; 0x2d
     f5e:	8c a7       	std	Y+44, r24	; 0x2c
     f60:	8c a5       	ldd	r24, Y+44	; 0x2c
     f62:	9d a5       	ldd	r25, Y+45	; 0x2d
     f64:	99 a7       	std	Y+41, r25	; 0x29
     f66:	88 a7       	std	Y+40, r24	; 0x28
     f68:	88 a5       	ldd	r24, Y+40	; 0x28
     f6a:	99 a5       	ldd	r25, Y+41	; 0x29
     f6c:	01 97       	sbiw	r24, 0x01	; 1
     f6e:	f1 f7       	brne	.-4      	; 0xf6c <HLCD_U8Init+0x2de>
     f70:	99 a7       	std	Y+41, r25	; 0x29
     f72:	88 a7       	std	Y+40, r24	; 0x28
     f74:	0f c0       	rjmp	.+30     	; 0xf94 <HLCD_U8Init+0x306>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     f76:	6f a9       	ldd	r22, Y+55	; 0x37
     f78:	78 ad       	ldd	r23, Y+56	; 0x38
     f7a:	89 ad       	ldd	r24, Y+57	; 0x39
     f7c:	9a ad       	ldd	r25, Y+58	; 0x3a
     f7e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     f82:	dc 01       	movw	r26, r24
     f84:	cb 01       	movw	r24, r22
     f86:	8e ab       	std	Y+54, r24	; 0x36
     f88:	8e a9       	ldd	r24, Y+54	; 0x36
     f8a:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     f8c:	8f a1       	ldd	r24, Y+39	; 0x27
     f8e:	8a 95       	dec	r24
     f90:	f1 f7       	brne	.-4      	; 0xf8e <HLCD_U8Init+0x300>
     f92:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(40);
	/*send display on\off command*/
	HLCD_U8WriteCommand(0b00001111);
     f94:	8f e0       	ldi	r24, 0x0F	; 15
     f96:	0e 94 00 0a 	call	0x1400	; 0x1400 <HLCD_U8WriteCommand>
     f9a:	80 e0       	ldi	r24, 0x00	; 0
     f9c:	90 e0       	ldi	r25, 0x00	; 0
     f9e:	a0 e2       	ldi	r26, 0x20	; 32
     fa0:	b2 e4       	ldi	r27, 0x42	; 66
     fa2:	8b a3       	std	Y+35, r24	; 0x23
     fa4:	9c a3       	std	Y+36, r25	; 0x24
     fa6:	ad a3       	std	Y+37, r26	; 0x25
     fa8:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     faa:	6b a1       	ldd	r22, Y+35	; 0x23
     fac:	7c a1       	ldd	r23, Y+36	; 0x24
     fae:	8d a1       	ldd	r24, Y+37	; 0x25
     fb0:	9e a1       	ldd	r25, Y+38	; 0x26
     fb2:	2b ea       	ldi	r18, 0xAB	; 171
     fb4:	3a ea       	ldi	r19, 0xAA	; 170
     fb6:	4a e2       	ldi	r20, 0x2A	; 42
     fb8:	50 e4       	ldi	r21, 0x40	; 64
     fba:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     fbe:	dc 01       	movw	r26, r24
     fc0:	cb 01       	movw	r24, r22
     fc2:	8f 8f       	std	Y+31, r24	; 0x1f
     fc4:	98 a3       	std	Y+32, r25	; 0x20
     fc6:	a9 a3       	std	Y+33, r26	; 0x21
     fc8:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
     fca:	6f 8d       	ldd	r22, Y+31	; 0x1f
     fcc:	78 a1       	ldd	r23, Y+32	; 0x20
     fce:	89 a1       	ldd	r24, Y+33	; 0x21
     fd0:	9a a1       	ldd	r25, Y+34	; 0x22
     fd2:	20 e0       	ldi	r18, 0x00	; 0
     fd4:	30 e0       	ldi	r19, 0x00	; 0
     fd6:	40 e8       	ldi	r20, 0x80	; 128
     fd8:	5f e3       	ldi	r21, 0x3F	; 63
     fda:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
     fde:	88 23       	and	r24, r24
     fe0:	1c f4       	brge	.+6      	; 0xfe8 <HLCD_U8Init+0x35a>
		__ticks = 1;
     fe2:	81 e0       	ldi	r24, 0x01	; 1
     fe4:	8e 8f       	std	Y+30, r24	; 0x1e
     fe6:	91 c0       	rjmp	.+290    	; 0x110a <HLCD_U8Init+0x47c>
	else if (__tmp > 255)
     fe8:	6f 8d       	ldd	r22, Y+31	; 0x1f
     fea:	78 a1       	ldd	r23, Y+32	; 0x20
     fec:	89 a1       	ldd	r24, Y+33	; 0x21
     fee:	9a a1       	ldd	r25, Y+34	; 0x22
     ff0:	20 e0       	ldi	r18, 0x00	; 0
     ff2:	30 e0       	ldi	r19, 0x00	; 0
     ff4:	4f e7       	ldi	r20, 0x7F	; 127
     ff6:	53 e4       	ldi	r21, 0x43	; 67
     ff8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
     ffc:	18 16       	cp	r1, r24
     ffe:	0c f0       	brlt	.+2      	; 0x1002 <HLCD_U8Init+0x374>
    1000:	7b c0       	rjmp	.+246    	; 0x10f8 <HLCD_U8Init+0x46a>
	{
		_delay_ms(__us / 1000.0);
    1002:	6b a1       	ldd	r22, Y+35	; 0x23
    1004:	7c a1       	ldd	r23, Y+36	; 0x24
    1006:	8d a1       	ldd	r24, Y+37	; 0x25
    1008:	9e a1       	ldd	r25, Y+38	; 0x26
    100a:	20 e0       	ldi	r18, 0x00	; 0
    100c:	30 e0       	ldi	r19, 0x00	; 0
    100e:	4a e7       	ldi	r20, 0x7A	; 122
    1010:	54 e4       	ldi	r21, 0x44	; 68
    1012:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1016:	dc 01       	movw	r26, r24
    1018:	cb 01       	movw	r24, r22
    101a:	8a 8f       	std	Y+26, r24	; 0x1a
    101c:	9b 8f       	std	Y+27, r25	; 0x1b
    101e:	ac 8f       	std	Y+28, r26	; 0x1c
    1020:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1022:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1024:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1026:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1028:	9d 8d       	ldd	r25, Y+29	; 0x1d
    102a:	20 e0       	ldi	r18, 0x00	; 0
    102c:	30 e0       	ldi	r19, 0x00	; 0
    102e:	4a ef       	ldi	r20, 0xFA	; 250
    1030:	54 e4       	ldi	r21, 0x44	; 68
    1032:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1036:	dc 01       	movw	r26, r24
    1038:	cb 01       	movw	r24, r22
    103a:	8e 8b       	std	Y+22, r24	; 0x16
    103c:	9f 8b       	std	Y+23, r25	; 0x17
    103e:	a8 8f       	std	Y+24, r26	; 0x18
    1040:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    1042:	6e 89       	ldd	r22, Y+22	; 0x16
    1044:	7f 89       	ldd	r23, Y+23	; 0x17
    1046:	88 8d       	ldd	r24, Y+24	; 0x18
    1048:	99 8d       	ldd	r25, Y+25	; 0x19
    104a:	20 e0       	ldi	r18, 0x00	; 0
    104c:	30 e0       	ldi	r19, 0x00	; 0
    104e:	40 e8       	ldi	r20, 0x80	; 128
    1050:	5f e3       	ldi	r21, 0x3F	; 63
    1052:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1056:	88 23       	and	r24, r24
    1058:	2c f4       	brge	.+10     	; 0x1064 <HLCD_U8Init+0x3d6>
		__ticks = 1;
    105a:	81 e0       	ldi	r24, 0x01	; 1
    105c:	90 e0       	ldi	r25, 0x00	; 0
    105e:	9d 8b       	std	Y+21, r25	; 0x15
    1060:	8c 8b       	std	Y+20, r24	; 0x14
    1062:	3f c0       	rjmp	.+126    	; 0x10e2 <HLCD_U8Init+0x454>
	else if (__tmp > 65535)
    1064:	6e 89       	ldd	r22, Y+22	; 0x16
    1066:	7f 89       	ldd	r23, Y+23	; 0x17
    1068:	88 8d       	ldd	r24, Y+24	; 0x18
    106a:	99 8d       	ldd	r25, Y+25	; 0x19
    106c:	20 e0       	ldi	r18, 0x00	; 0
    106e:	3f ef       	ldi	r19, 0xFF	; 255
    1070:	4f e7       	ldi	r20, 0x7F	; 127
    1072:	57 e4       	ldi	r21, 0x47	; 71
    1074:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1078:	18 16       	cp	r1, r24
    107a:	4c f5       	brge	.+82     	; 0x10ce <HLCD_U8Init+0x440>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    107c:	6a 8d       	ldd	r22, Y+26	; 0x1a
    107e:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1080:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1082:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1084:	20 e0       	ldi	r18, 0x00	; 0
    1086:	30 e0       	ldi	r19, 0x00	; 0
    1088:	40 e2       	ldi	r20, 0x20	; 32
    108a:	51 e4       	ldi	r21, 0x41	; 65
    108c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1090:	dc 01       	movw	r26, r24
    1092:	cb 01       	movw	r24, r22
    1094:	bc 01       	movw	r22, r24
    1096:	cd 01       	movw	r24, r26
    1098:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    109c:	dc 01       	movw	r26, r24
    109e:	cb 01       	movw	r24, r22
    10a0:	9d 8b       	std	Y+21, r25	; 0x15
    10a2:	8c 8b       	std	Y+20, r24	; 0x14
    10a4:	0f c0       	rjmp	.+30     	; 0x10c4 <HLCD_U8Init+0x436>
    10a6:	88 ec       	ldi	r24, 0xC8	; 200
    10a8:	90 e0       	ldi	r25, 0x00	; 0
    10aa:	9b 8b       	std	Y+19, r25	; 0x13
    10ac:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    10ae:	8a 89       	ldd	r24, Y+18	; 0x12
    10b0:	9b 89       	ldd	r25, Y+19	; 0x13
    10b2:	01 97       	sbiw	r24, 0x01	; 1
    10b4:	f1 f7       	brne	.-4      	; 0x10b2 <HLCD_U8Init+0x424>
    10b6:	9b 8b       	std	Y+19, r25	; 0x13
    10b8:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10ba:	8c 89       	ldd	r24, Y+20	; 0x14
    10bc:	9d 89       	ldd	r25, Y+21	; 0x15
    10be:	01 97       	sbiw	r24, 0x01	; 1
    10c0:	9d 8b       	std	Y+21, r25	; 0x15
    10c2:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10c4:	8c 89       	ldd	r24, Y+20	; 0x14
    10c6:	9d 89       	ldd	r25, Y+21	; 0x15
    10c8:	00 97       	sbiw	r24, 0x00	; 0
    10ca:	69 f7       	brne	.-38     	; 0x10a6 <HLCD_U8Init+0x418>
    10cc:	24 c0       	rjmp	.+72     	; 0x1116 <HLCD_U8Init+0x488>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10ce:	6e 89       	ldd	r22, Y+22	; 0x16
    10d0:	7f 89       	ldd	r23, Y+23	; 0x17
    10d2:	88 8d       	ldd	r24, Y+24	; 0x18
    10d4:	99 8d       	ldd	r25, Y+25	; 0x19
    10d6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    10da:	dc 01       	movw	r26, r24
    10dc:	cb 01       	movw	r24, r22
    10de:	9d 8b       	std	Y+21, r25	; 0x15
    10e0:	8c 8b       	std	Y+20, r24	; 0x14
    10e2:	8c 89       	ldd	r24, Y+20	; 0x14
    10e4:	9d 89       	ldd	r25, Y+21	; 0x15
    10e6:	99 8b       	std	Y+17, r25	; 0x11
    10e8:	88 8b       	std	Y+16, r24	; 0x10
    10ea:	88 89       	ldd	r24, Y+16	; 0x10
    10ec:	99 89       	ldd	r25, Y+17	; 0x11
    10ee:	01 97       	sbiw	r24, 0x01	; 1
    10f0:	f1 f7       	brne	.-4      	; 0x10ee <HLCD_U8Init+0x460>
    10f2:	99 8b       	std	Y+17, r25	; 0x11
    10f4:	88 8b       	std	Y+16, r24	; 0x10
    10f6:	0f c0       	rjmp	.+30     	; 0x1116 <HLCD_U8Init+0x488>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    10f8:	6f 8d       	ldd	r22, Y+31	; 0x1f
    10fa:	78 a1       	ldd	r23, Y+32	; 0x20
    10fc:	89 a1       	ldd	r24, Y+33	; 0x21
    10fe:	9a a1       	ldd	r25, Y+34	; 0x22
    1100:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1104:	dc 01       	movw	r26, r24
    1106:	cb 01       	movw	r24, r22
    1108:	8e 8f       	std	Y+30, r24	; 0x1e
    110a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    110c:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    110e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1110:	8a 95       	dec	r24
    1112:	f1 f7       	brne	.-4      	; 0x1110 <HLCD_U8Init+0x482>
    1114:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(40);
	/*send display CLEAR command*/
	HLCD_U8WriteCommand(0b00000001);
    1116:	81 e0       	ldi	r24, 0x01	; 1
    1118:	0e 94 00 0a 	call	0x1400	; 0x1400 <HLCD_U8WriteCommand>
    111c:	80 e0       	ldi	r24, 0x00	; 0
    111e:	90 e0       	ldi	r25, 0x00	; 0
    1120:	a0 e0       	ldi	r26, 0x00	; 0
    1122:	b0 e4       	ldi	r27, 0x40	; 64
    1124:	8b 87       	std	Y+11, r24	; 0x0b
    1126:	9c 87       	std	Y+12, r25	; 0x0c
    1128:	ad 87       	std	Y+13, r26	; 0x0d
    112a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    112c:	6b 85       	ldd	r22, Y+11	; 0x0b
    112e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1130:	8d 85       	ldd	r24, Y+13	; 0x0d
    1132:	9e 85       	ldd	r25, Y+14	; 0x0e
    1134:	20 e0       	ldi	r18, 0x00	; 0
    1136:	30 e0       	ldi	r19, 0x00	; 0
    1138:	4a ef       	ldi	r20, 0xFA	; 250
    113a:	54 e4       	ldi	r21, 0x44	; 68
    113c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1140:	dc 01       	movw	r26, r24
    1142:	cb 01       	movw	r24, r22
    1144:	8f 83       	std	Y+7, r24	; 0x07
    1146:	98 87       	std	Y+8, r25	; 0x08
    1148:	a9 87       	std	Y+9, r26	; 0x09
    114a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    114c:	6f 81       	ldd	r22, Y+7	; 0x07
    114e:	78 85       	ldd	r23, Y+8	; 0x08
    1150:	89 85       	ldd	r24, Y+9	; 0x09
    1152:	9a 85       	ldd	r25, Y+10	; 0x0a
    1154:	20 e0       	ldi	r18, 0x00	; 0
    1156:	30 e0       	ldi	r19, 0x00	; 0
    1158:	40 e8       	ldi	r20, 0x80	; 128
    115a:	5f e3       	ldi	r21, 0x3F	; 63
    115c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1160:	88 23       	and	r24, r24
    1162:	2c f4       	brge	.+10     	; 0x116e <HLCD_U8Init+0x4e0>
		__ticks = 1;
    1164:	81 e0       	ldi	r24, 0x01	; 1
    1166:	90 e0       	ldi	r25, 0x00	; 0
    1168:	9e 83       	std	Y+6, r25	; 0x06
    116a:	8d 83       	std	Y+5, r24	; 0x05
    116c:	3f c0       	rjmp	.+126    	; 0x11ec <HLCD_U8Init+0x55e>
	else if (__tmp > 65535)
    116e:	6f 81       	ldd	r22, Y+7	; 0x07
    1170:	78 85       	ldd	r23, Y+8	; 0x08
    1172:	89 85       	ldd	r24, Y+9	; 0x09
    1174:	9a 85       	ldd	r25, Y+10	; 0x0a
    1176:	20 e0       	ldi	r18, 0x00	; 0
    1178:	3f ef       	ldi	r19, 0xFF	; 255
    117a:	4f e7       	ldi	r20, 0x7F	; 127
    117c:	57 e4       	ldi	r21, 0x47	; 71
    117e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1182:	18 16       	cp	r1, r24
    1184:	4c f5       	brge	.+82     	; 0x11d8 <HLCD_U8Init+0x54a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1186:	6b 85       	ldd	r22, Y+11	; 0x0b
    1188:	7c 85       	ldd	r23, Y+12	; 0x0c
    118a:	8d 85       	ldd	r24, Y+13	; 0x0d
    118c:	9e 85       	ldd	r25, Y+14	; 0x0e
    118e:	20 e0       	ldi	r18, 0x00	; 0
    1190:	30 e0       	ldi	r19, 0x00	; 0
    1192:	40 e2       	ldi	r20, 0x20	; 32
    1194:	51 e4       	ldi	r21, 0x41	; 65
    1196:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    119a:	dc 01       	movw	r26, r24
    119c:	cb 01       	movw	r24, r22
    119e:	bc 01       	movw	r22, r24
    11a0:	cd 01       	movw	r24, r26
    11a2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    11a6:	dc 01       	movw	r26, r24
    11a8:	cb 01       	movw	r24, r22
    11aa:	9e 83       	std	Y+6, r25	; 0x06
    11ac:	8d 83       	std	Y+5, r24	; 0x05
    11ae:	0f c0       	rjmp	.+30     	; 0x11ce <HLCD_U8Init+0x540>
    11b0:	88 ec       	ldi	r24, 0xC8	; 200
    11b2:	90 e0       	ldi	r25, 0x00	; 0
    11b4:	9c 83       	std	Y+4, r25	; 0x04
    11b6:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    11b8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ba:	9c 81       	ldd	r25, Y+4	; 0x04
    11bc:	01 97       	sbiw	r24, 0x01	; 1
    11be:	f1 f7       	brne	.-4      	; 0x11bc <HLCD_U8Init+0x52e>
    11c0:	9c 83       	std	Y+4, r25	; 0x04
    11c2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11c4:	8d 81       	ldd	r24, Y+5	; 0x05
    11c6:	9e 81       	ldd	r25, Y+6	; 0x06
    11c8:	01 97       	sbiw	r24, 0x01	; 1
    11ca:	9e 83       	std	Y+6, r25	; 0x06
    11cc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11ce:	8d 81       	ldd	r24, Y+5	; 0x05
    11d0:	9e 81       	ldd	r25, Y+6	; 0x06
    11d2:	00 97       	sbiw	r24, 0x00	; 0
    11d4:	69 f7       	brne	.-38     	; 0x11b0 <HLCD_U8Init+0x522>
    11d6:	14 c0       	rjmp	.+40     	; 0x1200 <HLCD_U8Init+0x572>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11d8:	6f 81       	ldd	r22, Y+7	; 0x07
    11da:	78 85       	ldd	r23, Y+8	; 0x08
    11dc:	89 85       	ldd	r24, Y+9	; 0x09
    11de:	9a 85       	ldd	r25, Y+10	; 0x0a
    11e0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    11e4:	dc 01       	movw	r26, r24
    11e6:	cb 01       	movw	r24, r22
    11e8:	9e 83       	std	Y+6, r25	; 0x06
    11ea:	8d 83       	std	Y+5, r24	; 0x05
    11ec:	8d 81       	ldd	r24, Y+5	; 0x05
    11ee:	9e 81       	ldd	r25, Y+6	; 0x06
    11f0:	9a 83       	std	Y+2, r25	; 0x02
    11f2:	89 83       	std	Y+1, r24	; 0x01
    11f4:	89 81       	ldd	r24, Y+1	; 0x01
    11f6:	9a 81       	ldd	r25, Y+2	; 0x02
    11f8:	01 97       	sbiw	r24, 0x01	; 1
    11fa:	f1 f7       	brne	.-4      	; 0x11f8 <HLCD_U8Init+0x56a>
    11fc:	9a 83       	std	Y+2, r25	; 0x02
    11fe:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	/*send ENTERY MODE SET command*/
	HLCD_U8WriteCommand(0b00000110);
    1200:	86 e0       	ldi	r24, 0x06	; 6
    1202:	0e 94 00 0a 	call	0x1400	; 0x1400 <HLCD_U8WriteCommand>
	return Local_u8ErrorState;
    1206:	fe 01       	movw	r30, r28
    1208:	e3 5b       	subi	r30, 0xB3	; 179
    120a:	ff 4f       	sbci	r31, 0xFF	; 255
    120c:	80 81       	ld	r24, Z
}
    120e:	c3 5b       	subi	r28, 0xB3	; 179
    1210:	df 4f       	sbci	r29, 0xFF	; 255
    1212:	0f b6       	in	r0, 0x3f	; 63
    1214:	f8 94       	cli
    1216:	de bf       	out	0x3e, r29	; 62
    1218:	0f be       	out	0x3f, r0	; 63
    121a:	cd bf       	out	0x3d, r28	; 61
    121c:	cf 91       	pop	r28
    121e:	df 91       	pop	r29
    1220:	1f 91       	pop	r17
    1222:	0f 91       	pop	r16
    1224:	08 95       	ret

00001226 <HLCD_U8WriteChar>:
u8 HLCD_U8WriteChar(u8 Copy_u8Char){
    1226:	df 93       	push	r29
    1228:	cf 93       	push	r28
    122a:	cd b7       	in	r28, 0x3d	; 61
    122c:	de b7       	in	r29, 0x3e	; 62
    122e:	6a 97       	sbiw	r28, 0x1a	; 26
    1230:	0f b6       	in	r0, 0x3f	; 63
    1232:	f8 94       	cli
    1234:	de bf       	out	0x3e, r29	; 62
    1236:	0f be       	out	0x3f, r0	; 63
    1238:	cd bf       	out	0x3d, r28	; 61
    123a:	8a 8f       	std	Y+26, r24	; 0x1a
	u8 Local_u8ErrorState = STD_TYPES_OK;
    123c:	81 e0       	ldi	r24, 0x01	; 1
    123e:	89 8f       	std	Y+25, r24	; 0x19
	/*1- set RS high(Data)
	 *2- set RW low to write
	 *3- send command on data pins
	 *4- send pulse to enable(E) pin to let LCD read the data */
	MDIO_u8SetPinValue(HLCD_U8_RS_PORT,HLCD_U8_RS_PIN,MDIO_U8_HIGH);
    1240:	82 e0       	ldi	r24, 0x02	; 2
    1242:	60 e0       	ldi	r22, 0x00	; 0
    1244:	41 e0       	ldi	r20, 0x01	; 1
    1246:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <MDIO_u8SetPinValue>
	MDIO_u8SetPinValue(HLCD_U8_RW_PORT,HLCD_U8_RW_PIN,MDIO_U8_LOW);
    124a:	82 e0       	ldi	r24, 0x02	; 2
    124c:	61 e0       	ldi	r22, 0x01	; 1
    124e:	40 e0       	ldi	r20, 0x00	; 0
    1250:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <MDIO_u8SetPinValue>
	MDIO_u8SetPortValue(HLCD_U8_DATA_PORT,Copy_u8Char);
    1254:	80 e0       	ldi	r24, 0x00	; 0
    1256:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1258:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <MDIO_u8SetPortValue>
	MDIO_u8SetPinValue(HLCD_U8_E_PORT,HLCD_U8_E_PIN,MDIO_U8_HIGH);
    125c:	82 e0       	ldi	r24, 0x02	; 2
    125e:	62 e0       	ldi	r22, 0x02	; 2
    1260:	41 e0       	ldi	r20, 0x01	; 1
    1262:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <MDIO_u8SetPinValue>
    1266:	80 e0       	ldi	r24, 0x00	; 0
    1268:	90 e0       	ldi	r25, 0x00	; 0
    126a:	a0 e8       	ldi	r26, 0x80	; 128
    126c:	bf e3       	ldi	r27, 0x3F	; 63
    126e:	8d 8b       	std	Y+21, r24	; 0x15
    1270:	9e 8b       	std	Y+22, r25	; 0x16
    1272:	af 8b       	std	Y+23, r26	; 0x17
    1274:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1276:	6d 89       	ldd	r22, Y+21	; 0x15
    1278:	7e 89       	ldd	r23, Y+22	; 0x16
    127a:	8f 89       	ldd	r24, Y+23	; 0x17
    127c:	98 8d       	ldd	r25, Y+24	; 0x18
    127e:	2b ea       	ldi	r18, 0xAB	; 171
    1280:	3a ea       	ldi	r19, 0xAA	; 170
    1282:	4a e2       	ldi	r20, 0x2A	; 42
    1284:	50 e4       	ldi	r21, 0x40	; 64
    1286:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    128a:	dc 01       	movw	r26, r24
    128c:	cb 01       	movw	r24, r22
    128e:	89 8b       	std	Y+17, r24	; 0x11
    1290:	9a 8b       	std	Y+18, r25	; 0x12
    1292:	ab 8b       	std	Y+19, r26	; 0x13
    1294:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1296:	69 89       	ldd	r22, Y+17	; 0x11
    1298:	7a 89       	ldd	r23, Y+18	; 0x12
    129a:	8b 89       	ldd	r24, Y+19	; 0x13
    129c:	9c 89       	ldd	r25, Y+20	; 0x14
    129e:	20 e0       	ldi	r18, 0x00	; 0
    12a0:	30 e0       	ldi	r19, 0x00	; 0
    12a2:	40 e8       	ldi	r20, 0x80	; 128
    12a4:	5f e3       	ldi	r21, 0x3F	; 63
    12a6:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    12aa:	88 23       	and	r24, r24
    12ac:	1c f4       	brge	.+6      	; 0x12b4 <HLCD_U8WriteChar+0x8e>
		__ticks = 1;
    12ae:	81 e0       	ldi	r24, 0x01	; 1
    12b0:	88 8b       	std	Y+16, r24	; 0x10
    12b2:	91 c0       	rjmp	.+290    	; 0x13d6 <HLCD_U8WriteChar+0x1b0>
	else if (__tmp > 255)
    12b4:	69 89       	ldd	r22, Y+17	; 0x11
    12b6:	7a 89       	ldd	r23, Y+18	; 0x12
    12b8:	8b 89       	ldd	r24, Y+19	; 0x13
    12ba:	9c 89       	ldd	r25, Y+20	; 0x14
    12bc:	20 e0       	ldi	r18, 0x00	; 0
    12be:	30 e0       	ldi	r19, 0x00	; 0
    12c0:	4f e7       	ldi	r20, 0x7F	; 127
    12c2:	53 e4       	ldi	r21, 0x43	; 67
    12c4:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    12c8:	18 16       	cp	r1, r24
    12ca:	0c f0       	brlt	.+2      	; 0x12ce <HLCD_U8WriteChar+0xa8>
    12cc:	7b c0       	rjmp	.+246    	; 0x13c4 <HLCD_U8WriteChar+0x19e>
	{
		_delay_ms(__us / 1000.0);
    12ce:	6d 89       	ldd	r22, Y+21	; 0x15
    12d0:	7e 89       	ldd	r23, Y+22	; 0x16
    12d2:	8f 89       	ldd	r24, Y+23	; 0x17
    12d4:	98 8d       	ldd	r25, Y+24	; 0x18
    12d6:	20 e0       	ldi	r18, 0x00	; 0
    12d8:	30 e0       	ldi	r19, 0x00	; 0
    12da:	4a e7       	ldi	r20, 0x7A	; 122
    12dc:	54 e4       	ldi	r21, 0x44	; 68
    12de:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    12e2:	dc 01       	movw	r26, r24
    12e4:	cb 01       	movw	r24, r22
    12e6:	8c 87       	std	Y+12, r24	; 0x0c
    12e8:	9d 87       	std	Y+13, r25	; 0x0d
    12ea:	ae 87       	std	Y+14, r26	; 0x0e
    12ec:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12ee:	6c 85       	ldd	r22, Y+12	; 0x0c
    12f0:	7d 85       	ldd	r23, Y+13	; 0x0d
    12f2:	8e 85       	ldd	r24, Y+14	; 0x0e
    12f4:	9f 85       	ldd	r25, Y+15	; 0x0f
    12f6:	20 e0       	ldi	r18, 0x00	; 0
    12f8:	30 e0       	ldi	r19, 0x00	; 0
    12fa:	4a ef       	ldi	r20, 0xFA	; 250
    12fc:	54 e4       	ldi	r21, 0x44	; 68
    12fe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1302:	dc 01       	movw	r26, r24
    1304:	cb 01       	movw	r24, r22
    1306:	88 87       	std	Y+8, r24	; 0x08
    1308:	99 87       	std	Y+9, r25	; 0x09
    130a:	aa 87       	std	Y+10, r26	; 0x0a
    130c:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    130e:	68 85       	ldd	r22, Y+8	; 0x08
    1310:	79 85       	ldd	r23, Y+9	; 0x09
    1312:	8a 85       	ldd	r24, Y+10	; 0x0a
    1314:	9b 85       	ldd	r25, Y+11	; 0x0b
    1316:	20 e0       	ldi	r18, 0x00	; 0
    1318:	30 e0       	ldi	r19, 0x00	; 0
    131a:	40 e8       	ldi	r20, 0x80	; 128
    131c:	5f e3       	ldi	r21, 0x3F	; 63
    131e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1322:	88 23       	and	r24, r24
    1324:	2c f4       	brge	.+10     	; 0x1330 <HLCD_U8WriteChar+0x10a>
		__ticks = 1;
    1326:	81 e0       	ldi	r24, 0x01	; 1
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	9f 83       	std	Y+7, r25	; 0x07
    132c:	8e 83       	std	Y+6, r24	; 0x06
    132e:	3f c0       	rjmp	.+126    	; 0x13ae <HLCD_U8WriteChar+0x188>
	else if (__tmp > 65535)
    1330:	68 85       	ldd	r22, Y+8	; 0x08
    1332:	79 85       	ldd	r23, Y+9	; 0x09
    1334:	8a 85       	ldd	r24, Y+10	; 0x0a
    1336:	9b 85       	ldd	r25, Y+11	; 0x0b
    1338:	20 e0       	ldi	r18, 0x00	; 0
    133a:	3f ef       	ldi	r19, 0xFF	; 255
    133c:	4f e7       	ldi	r20, 0x7F	; 127
    133e:	57 e4       	ldi	r21, 0x47	; 71
    1340:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1344:	18 16       	cp	r1, r24
    1346:	4c f5       	brge	.+82     	; 0x139a <HLCD_U8WriteChar+0x174>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1348:	6c 85       	ldd	r22, Y+12	; 0x0c
    134a:	7d 85       	ldd	r23, Y+13	; 0x0d
    134c:	8e 85       	ldd	r24, Y+14	; 0x0e
    134e:	9f 85       	ldd	r25, Y+15	; 0x0f
    1350:	20 e0       	ldi	r18, 0x00	; 0
    1352:	30 e0       	ldi	r19, 0x00	; 0
    1354:	40 e2       	ldi	r20, 0x20	; 32
    1356:	51 e4       	ldi	r21, 0x41	; 65
    1358:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    135c:	dc 01       	movw	r26, r24
    135e:	cb 01       	movw	r24, r22
    1360:	bc 01       	movw	r22, r24
    1362:	cd 01       	movw	r24, r26
    1364:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1368:	dc 01       	movw	r26, r24
    136a:	cb 01       	movw	r24, r22
    136c:	9f 83       	std	Y+7, r25	; 0x07
    136e:	8e 83       	std	Y+6, r24	; 0x06
    1370:	0f c0       	rjmp	.+30     	; 0x1390 <HLCD_U8WriteChar+0x16a>
    1372:	88 ec       	ldi	r24, 0xC8	; 200
    1374:	90 e0       	ldi	r25, 0x00	; 0
    1376:	9d 83       	std	Y+5, r25	; 0x05
    1378:	8c 83       	std	Y+4, r24	; 0x04
    137a:	8c 81       	ldd	r24, Y+4	; 0x04
    137c:	9d 81       	ldd	r25, Y+5	; 0x05
    137e:	01 97       	sbiw	r24, 0x01	; 1
    1380:	f1 f7       	brne	.-4      	; 0x137e <HLCD_U8WriteChar+0x158>
    1382:	9d 83       	std	Y+5, r25	; 0x05
    1384:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1386:	8e 81       	ldd	r24, Y+6	; 0x06
    1388:	9f 81       	ldd	r25, Y+7	; 0x07
    138a:	01 97       	sbiw	r24, 0x01	; 1
    138c:	9f 83       	std	Y+7, r25	; 0x07
    138e:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1390:	8e 81       	ldd	r24, Y+6	; 0x06
    1392:	9f 81       	ldd	r25, Y+7	; 0x07
    1394:	00 97       	sbiw	r24, 0x00	; 0
    1396:	69 f7       	brne	.-38     	; 0x1372 <HLCD_U8WriteChar+0x14c>
    1398:	24 c0       	rjmp	.+72     	; 0x13e2 <HLCD_U8WriteChar+0x1bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    139a:	68 85       	ldd	r22, Y+8	; 0x08
    139c:	79 85       	ldd	r23, Y+9	; 0x09
    139e:	8a 85       	ldd	r24, Y+10	; 0x0a
    13a0:	9b 85       	ldd	r25, Y+11	; 0x0b
    13a2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    13a6:	dc 01       	movw	r26, r24
    13a8:	cb 01       	movw	r24, r22
    13aa:	9f 83       	std	Y+7, r25	; 0x07
    13ac:	8e 83       	std	Y+6, r24	; 0x06
    13ae:	8e 81       	ldd	r24, Y+6	; 0x06
    13b0:	9f 81       	ldd	r25, Y+7	; 0x07
    13b2:	9b 83       	std	Y+3, r25	; 0x03
    13b4:	8a 83       	std	Y+2, r24	; 0x02
    13b6:	8a 81       	ldd	r24, Y+2	; 0x02
    13b8:	9b 81       	ldd	r25, Y+3	; 0x03
    13ba:	01 97       	sbiw	r24, 0x01	; 1
    13bc:	f1 f7       	brne	.-4      	; 0x13ba <HLCD_U8WriteChar+0x194>
    13be:	9b 83       	std	Y+3, r25	; 0x03
    13c0:	8a 83       	std	Y+2, r24	; 0x02
    13c2:	0f c0       	rjmp	.+30     	; 0x13e2 <HLCD_U8WriteChar+0x1bc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    13c4:	69 89       	ldd	r22, Y+17	; 0x11
    13c6:	7a 89       	ldd	r23, Y+18	; 0x12
    13c8:	8b 89       	ldd	r24, Y+19	; 0x13
    13ca:	9c 89       	ldd	r25, Y+20	; 0x14
    13cc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    13d0:	dc 01       	movw	r26, r24
    13d2:	cb 01       	movw	r24, r22
    13d4:	88 8b       	std	Y+16, r24	; 0x10
    13d6:	88 89       	ldd	r24, Y+16	; 0x10
    13d8:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    13da:	89 81       	ldd	r24, Y+1	; 0x01
    13dc:	8a 95       	dec	r24
    13de:	f1 f7       	brne	.-4      	; 0x13dc <HLCD_U8WriteChar+0x1b6>
    13e0:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
	MDIO_u8SetPinValue(HLCD_U8_E_PORT,HLCD_U8_E_PIN,MDIO_U8_LOW);
    13e2:	82 e0       	ldi	r24, 0x02	; 2
    13e4:	62 e0       	ldi	r22, 0x02	; 2
    13e6:	40 e0       	ldi	r20, 0x00	; 0
    13e8:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <MDIO_u8SetPinValue>
	return Local_u8ErrorState;
    13ec:	89 8d       	ldd	r24, Y+25	; 0x19
}
    13ee:	6a 96       	adiw	r28, 0x1a	; 26
    13f0:	0f b6       	in	r0, 0x3f	; 63
    13f2:	f8 94       	cli
    13f4:	de bf       	out	0x3e, r29	; 62
    13f6:	0f be       	out	0x3f, r0	; 63
    13f8:	cd bf       	out	0x3d, r28	; 61
    13fa:	cf 91       	pop	r28
    13fc:	df 91       	pop	r29
    13fe:	08 95       	ret

00001400 <HLCD_U8WriteCommand>:
u8 HLCD_U8WriteCommand(u8 Copy_u8Cmnd){
    1400:	df 93       	push	r29
    1402:	cf 93       	push	r28
    1404:	cd b7       	in	r28, 0x3d	; 61
    1406:	de b7       	in	r29, 0x3e	; 62
    1408:	6a 97       	sbiw	r28, 0x1a	; 26
    140a:	0f b6       	in	r0, 0x3f	; 63
    140c:	f8 94       	cli
    140e:	de bf       	out	0x3e, r29	; 62
    1410:	0f be       	out	0x3f, r0	; 63
    1412:	cd bf       	out	0x3d, r28	; 61
    1414:	8a 8f       	std	Y+26, r24	; 0x1a
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1416:	81 e0       	ldi	r24, 0x01	; 1
    1418:	89 8f       	std	Y+25, r24	; 0x19
	/*1- set RS low(Command)
	 *2- set RW low to write
	 *3- send command on data pins
	 *4- send pulse to enable(E) pin to let LCD read the data */
	MDIO_u8SetPinValue(HLCD_U8_RS_PORT,HLCD_U8_RS_PIN,MDIO_U8_LOW);
    141a:	82 e0       	ldi	r24, 0x02	; 2
    141c:	60 e0       	ldi	r22, 0x00	; 0
    141e:	40 e0       	ldi	r20, 0x00	; 0
    1420:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <MDIO_u8SetPinValue>
	MDIO_u8SetPinValue(HLCD_U8_RW_PORT,HLCD_U8_RW_PIN,MDIO_U8_LOW);
    1424:	82 e0       	ldi	r24, 0x02	; 2
    1426:	61 e0       	ldi	r22, 0x01	; 1
    1428:	40 e0       	ldi	r20, 0x00	; 0
    142a:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <MDIO_u8SetPinValue>
	MDIO_u8SetPortValue(HLCD_U8_DATA_PORT,Copy_u8Cmnd);
    142e:	80 e0       	ldi	r24, 0x00	; 0
    1430:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1432:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <MDIO_u8SetPortValue>
	MDIO_u8SetPinValue(HLCD_U8_E_PORT,HLCD_U8_E_PIN,MDIO_U8_HIGH);
    1436:	82 e0       	ldi	r24, 0x02	; 2
    1438:	62 e0       	ldi	r22, 0x02	; 2
    143a:	41 e0       	ldi	r20, 0x01	; 1
    143c:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <MDIO_u8SetPinValue>
    1440:	80 e0       	ldi	r24, 0x00	; 0
    1442:	90 e0       	ldi	r25, 0x00	; 0
    1444:	a0 e8       	ldi	r26, 0x80	; 128
    1446:	bf e3       	ldi	r27, 0x3F	; 63
    1448:	8d 8b       	std	Y+21, r24	; 0x15
    144a:	9e 8b       	std	Y+22, r25	; 0x16
    144c:	af 8b       	std	Y+23, r26	; 0x17
    144e:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1450:	6d 89       	ldd	r22, Y+21	; 0x15
    1452:	7e 89       	ldd	r23, Y+22	; 0x16
    1454:	8f 89       	ldd	r24, Y+23	; 0x17
    1456:	98 8d       	ldd	r25, Y+24	; 0x18
    1458:	2b ea       	ldi	r18, 0xAB	; 171
    145a:	3a ea       	ldi	r19, 0xAA	; 170
    145c:	4a e2       	ldi	r20, 0x2A	; 42
    145e:	50 e4       	ldi	r21, 0x40	; 64
    1460:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1464:	dc 01       	movw	r26, r24
    1466:	cb 01       	movw	r24, r22
    1468:	89 8b       	std	Y+17, r24	; 0x11
    146a:	9a 8b       	std	Y+18, r25	; 0x12
    146c:	ab 8b       	std	Y+19, r26	; 0x13
    146e:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1470:	69 89       	ldd	r22, Y+17	; 0x11
    1472:	7a 89       	ldd	r23, Y+18	; 0x12
    1474:	8b 89       	ldd	r24, Y+19	; 0x13
    1476:	9c 89       	ldd	r25, Y+20	; 0x14
    1478:	20 e0       	ldi	r18, 0x00	; 0
    147a:	30 e0       	ldi	r19, 0x00	; 0
    147c:	40 e8       	ldi	r20, 0x80	; 128
    147e:	5f e3       	ldi	r21, 0x3F	; 63
    1480:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1484:	88 23       	and	r24, r24
    1486:	1c f4       	brge	.+6      	; 0x148e <HLCD_U8WriteCommand+0x8e>
		__ticks = 1;
    1488:	81 e0       	ldi	r24, 0x01	; 1
    148a:	88 8b       	std	Y+16, r24	; 0x10
    148c:	91 c0       	rjmp	.+290    	; 0x15b0 <HLCD_U8WriteCommand+0x1b0>
	else if (__tmp > 255)
    148e:	69 89       	ldd	r22, Y+17	; 0x11
    1490:	7a 89       	ldd	r23, Y+18	; 0x12
    1492:	8b 89       	ldd	r24, Y+19	; 0x13
    1494:	9c 89       	ldd	r25, Y+20	; 0x14
    1496:	20 e0       	ldi	r18, 0x00	; 0
    1498:	30 e0       	ldi	r19, 0x00	; 0
    149a:	4f e7       	ldi	r20, 0x7F	; 127
    149c:	53 e4       	ldi	r21, 0x43	; 67
    149e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    14a2:	18 16       	cp	r1, r24
    14a4:	0c f0       	brlt	.+2      	; 0x14a8 <HLCD_U8WriteCommand+0xa8>
    14a6:	7b c0       	rjmp	.+246    	; 0x159e <HLCD_U8WriteCommand+0x19e>
	{
		_delay_ms(__us / 1000.0);
    14a8:	6d 89       	ldd	r22, Y+21	; 0x15
    14aa:	7e 89       	ldd	r23, Y+22	; 0x16
    14ac:	8f 89       	ldd	r24, Y+23	; 0x17
    14ae:	98 8d       	ldd	r25, Y+24	; 0x18
    14b0:	20 e0       	ldi	r18, 0x00	; 0
    14b2:	30 e0       	ldi	r19, 0x00	; 0
    14b4:	4a e7       	ldi	r20, 0x7A	; 122
    14b6:	54 e4       	ldi	r21, 0x44	; 68
    14b8:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    14bc:	dc 01       	movw	r26, r24
    14be:	cb 01       	movw	r24, r22
    14c0:	8c 87       	std	Y+12, r24	; 0x0c
    14c2:	9d 87       	std	Y+13, r25	; 0x0d
    14c4:	ae 87       	std	Y+14, r26	; 0x0e
    14c6:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14c8:	6c 85       	ldd	r22, Y+12	; 0x0c
    14ca:	7d 85       	ldd	r23, Y+13	; 0x0d
    14cc:	8e 85       	ldd	r24, Y+14	; 0x0e
    14ce:	9f 85       	ldd	r25, Y+15	; 0x0f
    14d0:	20 e0       	ldi	r18, 0x00	; 0
    14d2:	30 e0       	ldi	r19, 0x00	; 0
    14d4:	4a ef       	ldi	r20, 0xFA	; 250
    14d6:	54 e4       	ldi	r21, 0x44	; 68
    14d8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    14dc:	dc 01       	movw	r26, r24
    14de:	cb 01       	movw	r24, r22
    14e0:	88 87       	std	Y+8, r24	; 0x08
    14e2:	99 87       	std	Y+9, r25	; 0x09
    14e4:	aa 87       	std	Y+10, r26	; 0x0a
    14e6:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    14e8:	68 85       	ldd	r22, Y+8	; 0x08
    14ea:	79 85       	ldd	r23, Y+9	; 0x09
    14ec:	8a 85       	ldd	r24, Y+10	; 0x0a
    14ee:	9b 85       	ldd	r25, Y+11	; 0x0b
    14f0:	20 e0       	ldi	r18, 0x00	; 0
    14f2:	30 e0       	ldi	r19, 0x00	; 0
    14f4:	40 e8       	ldi	r20, 0x80	; 128
    14f6:	5f e3       	ldi	r21, 0x3F	; 63
    14f8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    14fc:	88 23       	and	r24, r24
    14fe:	2c f4       	brge	.+10     	; 0x150a <HLCD_U8WriteCommand+0x10a>
		__ticks = 1;
    1500:	81 e0       	ldi	r24, 0x01	; 1
    1502:	90 e0       	ldi	r25, 0x00	; 0
    1504:	9f 83       	std	Y+7, r25	; 0x07
    1506:	8e 83       	std	Y+6, r24	; 0x06
    1508:	3f c0       	rjmp	.+126    	; 0x1588 <HLCD_U8WriteCommand+0x188>
	else if (__tmp > 65535)
    150a:	68 85       	ldd	r22, Y+8	; 0x08
    150c:	79 85       	ldd	r23, Y+9	; 0x09
    150e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1510:	9b 85       	ldd	r25, Y+11	; 0x0b
    1512:	20 e0       	ldi	r18, 0x00	; 0
    1514:	3f ef       	ldi	r19, 0xFF	; 255
    1516:	4f e7       	ldi	r20, 0x7F	; 127
    1518:	57 e4       	ldi	r21, 0x47	; 71
    151a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    151e:	18 16       	cp	r1, r24
    1520:	4c f5       	brge	.+82     	; 0x1574 <HLCD_U8WriteCommand+0x174>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1522:	6c 85       	ldd	r22, Y+12	; 0x0c
    1524:	7d 85       	ldd	r23, Y+13	; 0x0d
    1526:	8e 85       	ldd	r24, Y+14	; 0x0e
    1528:	9f 85       	ldd	r25, Y+15	; 0x0f
    152a:	20 e0       	ldi	r18, 0x00	; 0
    152c:	30 e0       	ldi	r19, 0x00	; 0
    152e:	40 e2       	ldi	r20, 0x20	; 32
    1530:	51 e4       	ldi	r21, 0x41	; 65
    1532:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1536:	dc 01       	movw	r26, r24
    1538:	cb 01       	movw	r24, r22
    153a:	bc 01       	movw	r22, r24
    153c:	cd 01       	movw	r24, r26
    153e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1542:	dc 01       	movw	r26, r24
    1544:	cb 01       	movw	r24, r22
    1546:	9f 83       	std	Y+7, r25	; 0x07
    1548:	8e 83       	std	Y+6, r24	; 0x06
    154a:	0f c0       	rjmp	.+30     	; 0x156a <HLCD_U8WriteCommand+0x16a>
    154c:	88 ec       	ldi	r24, 0xC8	; 200
    154e:	90 e0       	ldi	r25, 0x00	; 0
    1550:	9d 83       	std	Y+5, r25	; 0x05
    1552:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1554:	8c 81       	ldd	r24, Y+4	; 0x04
    1556:	9d 81       	ldd	r25, Y+5	; 0x05
    1558:	01 97       	sbiw	r24, 0x01	; 1
    155a:	f1 f7       	brne	.-4      	; 0x1558 <HLCD_U8WriteCommand+0x158>
    155c:	9d 83       	std	Y+5, r25	; 0x05
    155e:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1560:	8e 81       	ldd	r24, Y+6	; 0x06
    1562:	9f 81       	ldd	r25, Y+7	; 0x07
    1564:	01 97       	sbiw	r24, 0x01	; 1
    1566:	9f 83       	std	Y+7, r25	; 0x07
    1568:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    156a:	8e 81       	ldd	r24, Y+6	; 0x06
    156c:	9f 81       	ldd	r25, Y+7	; 0x07
    156e:	00 97       	sbiw	r24, 0x00	; 0
    1570:	69 f7       	brne	.-38     	; 0x154c <HLCD_U8WriteCommand+0x14c>
    1572:	24 c0       	rjmp	.+72     	; 0x15bc <HLCD_U8WriteCommand+0x1bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1574:	68 85       	ldd	r22, Y+8	; 0x08
    1576:	79 85       	ldd	r23, Y+9	; 0x09
    1578:	8a 85       	ldd	r24, Y+10	; 0x0a
    157a:	9b 85       	ldd	r25, Y+11	; 0x0b
    157c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1580:	dc 01       	movw	r26, r24
    1582:	cb 01       	movw	r24, r22
    1584:	9f 83       	std	Y+7, r25	; 0x07
    1586:	8e 83       	std	Y+6, r24	; 0x06
    1588:	8e 81       	ldd	r24, Y+6	; 0x06
    158a:	9f 81       	ldd	r25, Y+7	; 0x07
    158c:	9b 83       	std	Y+3, r25	; 0x03
    158e:	8a 83       	std	Y+2, r24	; 0x02
    1590:	8a 81       	ldd	r24, Y+2	; 0x02
    1592:	9b 81       	ldd	r25, Y+3	; 0x03
    1594:	01 97       	sbiw	r24, 0x01	; 1
    1596:	f1 f7       	brne	.-4      	; 0x1594 <HLCD_U8WriteCommand+0x194>
    1598:	9b 83       	std	Y+3, r25	; 0x03
    159a:	8a 83       	std	Y+2, r24	; 0x02
    159c:	0f c0       	rjmp	.+30     	; 0x15bc <HLCD_U8WriteCommand+0x1bc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    159e:	69 89       	ldd	r22, Y+17	; 0x11
    15a0:	7a 89       	ldd	r23, Y+18	; 0x12
    15a2:	8b 89       	ldd	r24, Y+19	; 0x13
    15a4:	9c 89       	ldd	r25, Y+20	; 0x14
    15a6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    15aa:	dc 01       	movw	r26, r24
    15ac:	cb 01       	movw	r24, r22
    15ae:	88 8b       	std	Y+16, r24	; 0x10
    15b0:	88 89       	ldd	r24, Y+16	; 0x10
    15b2:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    15b4:	89 81       	ldd	r24, Y+1	; 0x01
    15b6:	8a 95       	dec	r24
    15b8:	f1 f7       	brne	.-4      	; 0x15b6 <HLCD_U8WriteCommand+0x1b6>
    15ba:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
	MDIO_u8SetPinValue(HLCD_U8_E_PORT,HLCD_U8_E_PIN,MDIO_U8_LOW);
    15bc:	82 e0       	ldi	r24, 0x02	; 2
    15be:	62 e0       	ldi	r22, 0x02	; 2
    15c0:	40 e0       	ldi	r20, 0x00	; 0
    15c2:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <MDIO_u8SetPinValue>
	return Local_u8ErrorState;
    15c6:	89 8d       	ldd	r24, Y+25	; 0x19

}
    15c8:	6a 96       	adiw	r28, 0x1a	; 26
    15ca:	0f b6       	in	r0, 0x3f	; 63
    15cc:	f8 94       	cli
    15ce:	de bf       	out	0x3e, r29	; 62
    15d0:	0f be       	out	0x3f, r0	; 63
    15d2:	cd bf       	out	0x3d, r28	; 61
    15d4:	cf 91       	pop	r28
    15d6:	df 91       	pop	r29
    15d8:	08 95       	ret

000015da <HLCD_U8SetCursor>:
u8 HLCD_U8SetCursor(u8 Copy_u8LineNumber , u8 Copy_u8CharacterNumber){
    15da:	df 93       	push	r29
    15dc:	cf 93       	push	r28
    15de:	00 d0       	rcall	.+0      	; 0x15e0 <HLCD_U8SetCursor+0x6>
    15e0:	0f 92       	push	r0
    15e2:	cd b7       	in	r28, 0x3d	; 61
    15e4:	de b7       	in	r29, 0x3e	; 62
    15e6:	8a 83       	std	Y+2, r24	; 0x02
    15e8:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    15ea:	81 e0       	ldi	r24, 0x01	; 1
    15ec:	89 83       	std	Y+1, r24	; 0x01
	HLCD_U8WriteCommand((0x80|(Copy_u8LineNumber<<6))+Copy_u8CharacterNumber);
    15ee:	8a 81       	ldd	r24, Y+2	; 0x02
    15f0:	88 2f       	mov	r24, r24
    15f2:	90 e0       	ldi	r25, 0x00	; 0
    15f4:	00 24       	eor	r0, r0
    15f6:	96 95       	lsr	r25
    15f8:	87 95       	ror	r24
    15fa:	07 94       	ror	r0
    15fc:	96 95       	lsr	r25
    15fe:	87 95       	ror	r24
    1600:	07 94       	ror	r0
    1602:	98 2f       	mov	r25, r24
    1604:	80 2d       	mov	r24, r0
    1606:	80 68       	ori	r24, 0x80	; 128
    1608:	98 2f       	mov	r25, r24
    160a:	8b 81       	ldd	r24, Y+3	; 0x03
    160c:	89 0f       	add	r24, r25
    160e:	0e 94 00 0a 	call	0x1400	; 0x1400 <HLCD_U8WriteCommand>
	return Local_u8ErrorState;
    1612:	89 81       	ldd	r24, Y+1	; 0x01
}
    1614:	0f 90       	pop	r0
    1616:	0f 90       	pop	r0
    1618:	0f 90       	pop	r0
    161a:	cf 91       	pop	r28
    161c:	df 91       	pop	r29
    161e:	08 95       	ret

00001620 <HLCD_U8ClearLCD>:
void HLCD_U8ClearLCD(void){
    1620:	df 93       	push	r29
    1622:	cf 93       	push	r28
    1624:	cd b7       	in	r28, 0x3d	; 61
    1626:	de b7       	in	r29, 0x3e	; 62
	HLCD_U8WriteCommand(0b00000001);
    1628:	81 e0       	ldi	r24, 0x01	; 1
    162a:	0e 94 00 0a 	call	0x1400	; 0x1400 <HLCD_U8WriteCommand>
}
    162e:	cf 91       	pop	r28
    1630:	df 91       	pop	r29
    1632:	08 95       	ret

00001634 <HLCD_U8DrawChar>:

void HLCD_U8DrawChar(u8 Copy_u8LineNumber , u8 Copy_u8CharacterNumber , u8 Copy_CharIndex , u8 * Copy_CustomChar){
    1634:	df 93       	push	r29
    1636:	cf 93       	push	r28
    1638:	00 d0       	rcall	.+0      	; 0x163a <HLCD_U8DrawChar+0x6>
    163a:	00 d0       	rcall	.+0      	; 0x163c <HLCD_U8DrawChar+0x8>
    163c:	00 d0       	rcall	.+0      	; 0x163e <HLCD_U8DrawChar+0xa>
    163e:	cd b7       	in	r28, 0x3d	; 61
    1640:	de b7       	in	r29, 0x3e	; 62
    1642:	8a 83       	std	Y+2, r24	; 0x02
    1644:	6b 83       	std	Y+3, r22	; 0x03
    1646:	4c 83       	std	Y+4, r20	; 0x04
    1648:	3e 83       	std	Y+6, r19	; 0x06
    164a:	2d 83       	std	Y+5, r18	; 0x05
	HLCD_U8WriteCommand( 0b01000000 + (Copy_CharIndex*8));
    164c:	8c 81       	ldd	r24, Y+4	; 0x04
    164e:	88 2f       	mov	r24, r24
    1650:	90 e0       	ldi	r25, 0x00	; 0
    1652:	08 96       	adiw	r24, 0x08	; 8
    1654:	88 0f       	add	r24, r24
    1656:	99 1f       	adc	r25, r25
    1658:	88 0f       	add	r24, r24
    165a:	99 1f       	adc	r25, r25
    165c:	88 0f       	add	r24, r24
    165e:	99 1f       	adc	r25, r25
    1660:	0e 94 00 0a 	call	0x1400	; 0x1400 <HLCD_U8WriteCommand>
	for(u8 i=0 ; i<8 ; i++){
    1664:	19 82       	std	Y+1, r1	; 0x01
    1666:	0e c0       	rjmp	.+28     	; 0x1684 <HLCD_U8DrawChar+0x50>
		HLCD_U8WriteChar(Copy_CustomChar[i]);
    1668:	89 81       	ldd	r24, Y+1	; 0x01
    166a:	28 2f       	mov	r18, r24
    166c:	30 e0       	ldi	r19, 0x00	; 0
    166e:	8d 81       	ldd	r24, Y+5	; 0x05
    1670:	9e 81       	ldd	r25, Y+6	; 0x06
    1672:	fc 01       	movw	r30, r24
    1674:	e2 0f       	add	r30, r18
    1676:	f3 1f       	adc	r31, r19
    1678:	80 81       	ld	r24, Z
    167a:	0e 94 13 09 	call	0x1226	; 0x1226 <HLCD_U8WriteChar>
	HLCD_U8WriteCommand(0b00000001);
}

void HLCD_U8DrawChar(u8 Copy_u8LineNumber , u8 Copy_u8CharacterNumber , u8 Copy_CharIndex , u8 * Copy_CustomChar){
	HLCD_U8WriteCommand( 0b01000000 + (Copy_CharIndex*8));
	for(u8 i=0 ; i<8 ; i++){
    167e:	89 81       	ldd	r24, Y+1	; 0x01
    1680:	8f 5f       	subi	r24, 0xFF	; 255
    1682:	89 83       	std	Y+1, r24	; 0x01
    1684:	89 81       	ldd	r24, Y+1	; 0x01
    1686:	88 30       	cpi	r24, 0x08	; 8
    1688:	78 f3       	brcs	.-34     	; 0x1668 <HLCD_U8DrawChar+0x34>
		HLCD_U8WriteChar(Copy_CustomChar[i]);
	}
	/*PUT AC back to DDRAM*/
	HLCD_U8SetCursor(Copy_u8LineNumber,Copy_u8CharacterNumber);
    168a:	8a 81       	ldd	r24, Y+2	; 0x02
    168c:	6b 81       	ldd	r22, Y+3	; 0x03
    168e:	0e 94 ed 0a 	call	0x15da	; 0x15da <HLCD_U8SetCursor>
	/*Display drawn chs on LCD*/
	HLCD_U8WriteChar(Copy_CharIndex);
    1692:	8c 81       	ldd	r24, Y+4	; 0x04
    1694:	0e 94 13 09 	call	0x1226	; 0x1226 <HLCD_U8WriteChar>
}
    1698:	26 96       	adiw	r28, 0x06	; 6
    169a:	0f b6       	in	r0, 0x3f	; 63
    169c:	f8 94       	cli
    169e:	de bf       	out	0x3e, r29	; 62
    16a0:	0f be       	out	0x3f, r0	; 63
    16a2:	cd bf       	out	0x3d, r28	; 61
    16a4:	cf 91       	pop	r28
    16a6:	df 91       	pop	r29
    16a8:	08 95       	ret

000016aa <HLCD_U8WriteString>:

u8 HLCD_U8WriteString(u8 * Copy_u8String){
    16aa:	df 93       	push	r29
    16ac:	cf 93       	push	r28
    16ae:	00 d0       	rcall	.+0      	; 0x16b0 <HLCD_U8WriteString+0x6>
    16b0:	0f 92       	push	r0
    16b2:	cd b7       	in	r28, 0x3d	; 61
    16b4:	de b7       	in	r29, 0x3e	; 62
    16b6:	9a 83       	std	Y+2, r25	; 0x02
    16b8:	89 83       	std	Y+1, r24	; 0x01
    16ba:	0a c0       	rjmp	.+20     	; 0x16d0 <HLCD_U8WriteString+0x26>

	while(*Copy_u8String){
		HLCD_U8WriteChar(*Copy_u8String);
    16bc:	e9 81       	ldd	r30, Y+1	; 0x01
    16be:	fa 81       	ldd	r31, Y+2	; 0x02
    16c0:	80 81       	ld	r24, Z
    16c2:	0e 94 13 09 	call	0x1226	; 0x1226 <HLCD_U8WriteChar>
		Copy_u8String++;
    16c6:	89 81       	ldd	r24, Y+1	; 0x01
    16c8:	9a 81       	ldd	r25, Y+2	; 0x02
    16ca:	01 96       	adiw	r24, 0x01	; 1
    16cc:	9a 83       	std	Y+2, r25	; 0x02
    16ce:	89 83       	std	Y+1, r24	; 0x01
	HLCD_U8WriteChar(Copy_CharIndex);
}

u8 HLCD_U8WriteString(u8 * Copy_u8String){

	while(*Copy_u8String){
    16d0:	e9 81       	ldd	r30, Y+1	; 0x01
    16d2:	fa 81       	ldd	r31, Y+2	; 0x02
    16d4:	80 81       	ld	r24, Z
    16d6:	88 23       	and	r24, r24
    16d8:	89 f7       	brne	.-30     	; 0x16bc <HLCD_U8WriteString+0x12>
		HLCD_U8WriteChar(*Copy_u8String);
		Copy_u8String++;
	}
}
    16da:	0f 90       	pop	r0
    16dc:	0f 90       	pop	r0
    16de:	0f 90       	pop	r0
    16e0:	cf 91       	pop	r28
    16e2:	df 91       	pop	r29
    16e4:	08 95       	ret

000016e6 <HLCD_U8WriteNumber>:

u8 HLCD_U8WriteNumber(u8  Copy_u8Number){
    16e6:	df 93       	push	r29
    16e8:	cf 93       	push	r28
    16ea:	cd b7       	in	r28, 0x3d	; 61
    16ec:	de b7       	in	r29, 0x3e	; 62
    16ee:	2f 97       	sbiw	r28, 0x0f	; 15
    16f0:	0f b6       	in	r0, 0x3f	; 63
    16f2:	f8 94       	cli
    16f4:	de bf       	out	0x3e, r29	; 62
    16f6:	0f be       	out	0x3f, r0	; 63
    16f8:	cd bf       	out	0x3d, r28	; 61
    16fa:	89 87       	std	Y+9, r24	; 0x09
	}
	for(j=0 ; j<i ; j++){
		HLCD_U8WriteChar(arr[j]);
	}
	return Local_u8ErrorState;
}
    16fc:	2d b7       	in	r18, 0x3d	; 61
    16fe:	3e b7       	in	r19, 0x3e	; 62
    1700:	3f 87       	std	Y+15, r19	; 0x0f
    1702:	2e 87       	std	Y+14, r18	; 0x0e
		HLCD_U8WriteChar(*Copy_u8String);
		Copy_u8String++;
	}
}

u8 HLCD_U8WriteNumber(u8  Copy_u8Number){
    1704:	8d b7       	in	r24, 0x3d	; 61
    1706:	9e b7       	in	r25, 0x3e	; 62
    1708:	9b 87       	std	Y+11, r25	; 0x0b
    170a:	8a 87       	std	Y+10, r24	; 0x0a
	int Local_u8ErrorState = 1;
    170c:	81 e0       	ldi	r24, 0x01	; 1
    170e:	90 e0       	ldi	r25, 0x00	; 0
    1710:	9e 83       	std	Y+6, r25	; 0x06
    1712:	8d 83       	std	Y+5, r24	; 0x05
	int j = Copy_u8Number;
    1714:	89 85       	ldd	r24, Y+9	; 0x09
    1716:	88 2f       	mov	r24, r24
    1718:	90 e0       	ldi	r25, 0x00	; 0
    171a:	9c 83       	std	Y+4, r25	; 0x04
    171c:	8b 83       	std	Y+3, r24	; 0x03
	int i=0;
    171e:	1a 82       	std	Y+2, r1	; 0x02
    1720:	19 82       	std	Y+1, r1	; 0x01
	do {
		j /= 10;
    1722:	8b 81       	ldd	r24, Y+3	; 0x03
    1724:	9c 81       	ldd	r25, Y+4	; 0x04
    1726:	2a e0       	ldi	r18, 0x0A	; 10
    1728:	30 e0       	ldi	r19, 0x00	; 0
    172a:	b9 01       	movw	r22, r18
    172c:	0e 94 d5 12 	call	0x25aa	; 0x25aa <__divmodhi4>
    1730:	cb 01       	movw	r24, r22
    1732:	9c 83       	std	Y+4, r25	; 0x04
    1734:	8b 83       	std	Y+3, r24	; 0x03
		++i;
    1736:	89 81       	ldd	r24, Y+1	; 0x01
    1738:	9a 81       	ldd	r25, Y+2	; 0x02
    173a:	01 96       	adiw	r24, 0x01	; 1
    173c:	9a 83       	std	Y+2, r25	; 0x02
    173e:	89 83       	std	Y+1, r24	; 0x01
	}

	while (j != 0);
    1740:	8b 81       	ldd	r24, Y+3	; 0x03
    1742:	9c 81       	ldd	r25, Y+4	; 0x04
    1744:	00 97       	sbiw	r24, 0x00	; 0
    1746:	69 f7       	brne	.-38     	; 0x1722 <HLCD_U8WriteNumber+0x3c>
	int arr[i];
    1748:	89 81       	ldd	r24, Y+1	; 0x01
    174a:	9a 81       	ldd	r25, Y+2	; 0x02
    174c:	88 0f       	add	r24, r24
    174e:	99 1f       	adc	r25, r25
    1750:	2d b7       	in	r18, 0x3d	; 61
    1752:	3e b7       	in	r19, 0x3e	; 62
    1754:	28 1b       	sub	r18, r24
    1756:	39 0b       	sbc	r19, r25
    1758:	0f b6       	in	r0, 0x3f	; 63
    175a:	f8 94       	cli
    175c:	3e bf       	out	0x3e, r19	; 62
    175e:	0f be       	out	0x3f, r0	; 63
    1760:	2d bf       	out	0x3d, r18	; 61
    1762:	8d b7       	in	r24, 0x3d	; 61
    1764:	9e b7       	in	r25, 0x3e	; 62
    1766:	01 96       	adiw	r24, 0x01	; 1
    1768:	9d 87       	std	Y+13, r25	; 0x0d
    176a:	8c 87       	std	Y+12, r24	; 0x0c
    176c:	8c 85       	ldd	r24, Y+12	; 0x0c
    176e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1770:	00 96       	adiw	r24, 0x00	; 0
    1772:	9d 87       	std	Y+13, r25	; 0x0d
    1774:	8c 87       	std	Y+12, r24	; 0x0c
    1776:	2c 85       	ldd	r18, Y+12	; 0x0c
    1778:	3d 85       	ldd	r19, Y+13	; 0x0d
    177a:	38 87       	std	Y+8, r19	; 0x08
    177c:	2f 83       	std	Y+7, r18	; 0x07
	for(j=i-1 ; j>=0 ; j--){
    177e:	89 81       	ldd	r24, Y+1	; 0x01
    1780:	9a 81       	ldd	r25, Y+2	; 0x02
    1782:	01 97       	sbiw	r24, 0x01	; 1
    1784:	9c 83       	std	Y+4, r25	; 0x04
    1786:	8b 83       	std	Y+3, r24	; 0x03
    1788:	22 c0       	rjmp	.+68     	; 0x17ce <HLCD_U8WriteNumber+0xe8>
		arr[j] = ((Copy_u8Number) % 10)+48;
    178a:	eb 81       	ldd	r30, Y+3	; 0x03
    178c:	fc 81       	ldd	r31, Y+4	; 0x04
    178e:	89 85       	ldd	r24, Y+9	; 0x09
    1790:	9a e0       	ldi	r25, 0x0A	; 10
    1792:	69 2f       	mov	r22, r25
    1794:	0e 94 c9 12 	call	0x2592	; 0x2592 <__udivmodqi4>
    1798:	89 2f       	mov	r24, r25
    179a:	88 2f       	mov	r24, r24
    179c:	90 e0       	ldi	r25, 0x00	; 0
    179e:	ac 01       	movw	r20, r24
    17a0:	40 5d       	subi	r20, 0xD0	; 208
    17a2:	5f 4f       	sbci	r21, 0xFF	; 255
    17a4:	2f 81       	ldd	r18, Y+7	; 0x07
    17a6:	38 85       	ldd	r19, Y+8	; 0x08
    17a8:	cf 01       	movw	r24, r30
    17aa:	88 0f       	add	r24, r24
    17ac:	99 1f       	adc	r25, r25
    17ae:	f9 01       	movw	r30, r18
    17b0:	e8 0f       	add	r30, r24
    17b2:	f9 1f       	adc	r31, r25
    17b4:	51 83       	std	Z+1, r21	; 0x01
    17b6:	40 83       	st	Z, r20
		(Copy_u8Number)= (Copy_u8Number)/10;
    17b8:	89 85       	ldd	r24, Y+9	; 0x09
    17ba:	9a e0       	ldi	r25, 0x0A	; 10
    17bc:	69 2f       	mov	r22, r25
    17be:	0e 94 c9 12 	call	0x2592	; 0x2592 <__udivmodqi4>
    17c2:	89 87       	std	Y+9, r24	; 0x09
		++i;
	}

	while (j != 0);
	int arr[i];
	for(j=i-1 ; j>=0 ; j--){
    17c4:	8b 81       	ldd	r24, Y+3	; 0x03
    17c6:	9c 81       	ldd	r25, Y+4	; 0x04
    17c8:	01 97       	sbiw	r24, 0x01	; 1
    17ca:	9c 83       	std	Y+4, r25	; 0x04
    17cc:	8b 83       	std	Y+3, r24	; 0x03
    17ce:	8b 81       	ldd	r24, Y+3	; 0x03
    17d0:	9c 81       	ldd	r25, Y+4	; 0x04
    17d2:	99 23       	and	r25, r25
    17d4:	d4 f6       	brge	.-76     	; 0x178a <HLCD_U8WriteNumber+0xa4>
		arr[j] = ((Copy_u8Number) % 10)+48;
		(Copy_u8Number)= (Copy_u8Number)/10;
	}
	for(j=0 ; j<i ; j++){
    17d6:	1c 82       	std	Y+4, r1	; 0x04
    17d8:	1b 82       	std	Y+3, r1	; 0x03
    17da:	12 c0       	rjmp	.+36     	; 0x1800 <HLCD_U8WriteNumber+0x11a>
		HLCD_U8WriteChar(arr[j]);
    17dc:	8b 81       	ldd	r24, Y+3	; 0x03
    17de:	9c 81       	ldd	r25, Y+4	; 0x04
    17e0:	2f 81       	ldd	r18, Y+7	; 0x07
    17e2:	38 85       	ldd	r19, Y+8	; 0x08
    17e4:	88 0f       	add	r24, r24
    17e6:	99 1f       	adc	r25, r25
    17e8:	f9 01       	movw	r30, r18
    17ea:	e8 0f       	add	r30, r24
    17ec:	f9 1f       	adc	r31, r25
    17ee:	80 81       	ld	r24, Z
    17f0:	91 81       	ldd	r25, Z+1	; 0x01
    17f2:	0e 94 13 09 	call	0x1226	; 0x1226 <HLCD_U8WriteChar>
	int arr[i];
	for(j=i-1 ; j>=0 ; j--){
		arr[j] = ((Copy_u8Number) % 10)+48;
		(Copy_u8Number)= (Copy_u8Number)/10;
	}
	for(j=0 ; j<i ; j++){
    17f6:	8b 81       	ldd	r24, Y+3	; 0x03
    17f8:	9c 81       	ldd	r25, Y+4	; 0x04
    17fa:	01 96       	adiw	r24, 0x01	; 1
    17fc:	9c 83       	std	Y+4, r25	; 0x04
    17fe:	8b 83       	std	Y+3, r24	; 0x03
    1800:	2b 81       	ldd	r18, Y+3	; 0x03
    1802:	3c 81       	ldd	r19, Y+4	; 0x04
    1804:	89 81       	ldd	r24, Y+1	; 0x01
    1806:	9a 81       	ldd	r25, Y+2	; 0x02
    1808:	28 17       	cp	r18, r24
    180a:	39 07       	cpc	r19, r25
    180c:	3c f3       	brlt	.-50     	; 0x17dc <HLCD_U8WriteNumber+0xf6>
		HLCD_U8WriteChar(arr[j]);
	}
	return Local_u8ErrorState;
    180e:	8d 81       	ldd	r24, Y+5	; 0x05
    1810:	2a 85       	ldd	r18, Y+10	; 0x0a
    1812:	3b 85       	ldd	r19, Y+11	; 0x0b
    1814:	0f b6       	in	r0, 0x3f	; 63
    1816:	f8 94       	cli
    1818:	3e bf       	out	0x3e, r19	; 62
    181a:	0f be       	out	0x3f, r0	; 63
    181c:	2d bf       	out	0x3d, r18	; 61
}
    181e:	2e 85       	ldd	r18, Y+14	; 0x0e
    1820:	3f 85       	ldd	r19, Y+15	; 0x0f
    1822:	0f b6       	in	r0, 0x3f	; 63
    1824:	f8 94       	cli
    1826:	3e bf       	out	0x3e, r19	; 62
    1828:	0f be       	out	0x3f, r0	; 63
    182a:	2d bf       	out	0x3d, r18	; 61
    182c:	2f 96       	adiw	r28, 0x0f	; 15
    182e:	0f b6       	in	r0, 0x3f	; 63
    1830:	f8 94       	cli
    1832:	de bf       	out	0x3e, r29	; 62
    1834:	0f be       	out	0x3f, r0	; 63
    1836:	cd bf       	out	0x3d, r28	; 61
    1838:	cf 91       	pop	r28
    183a:	df 91       	pop	r29
    183c:	08 95       	ret

0000183e <MDIO_u8SetPinDirection>:
/* MCAL */
#include "MDIO_Interface.h"
#include "MDIO_Private.h"
#include "MDIO_Config.h"
/*Function implementation*/
u8 MDIO_u8SetPinDirection(u8 Copy_u8PortID , u8 Copy_u8PinID , u8 Copy_u8PinDirection){
    183e:	df 93       	push	r29
    1840:	cf 93       	push	r28
    1842:	cd b7       	in	r28, 0x3d	; 61
    1844:	de b7       	in	r29, 0x3e	; 62
    1846:	2c 97       	sbiw	r28, 0x0c	; 12
    1848:	0f b6       	in	r0, 0x3f	; 63
    184a:	f8 94       	cli
    184c:	de bf       	out	0x3e, r29	; 62
    184e:	0f be       	out	0x3f, r0	; 63
    1850:	cd bf       	out	0x3d, r28	; 61
    1852:	8a 83       	std	Y+2, r24	; 0x02
    1854:	6b 83       	std	Y+3, r22	; 0x03
    1856:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState =0;
    1858:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_u8PinID <= MDIO_U8_PIN_7) && (Copy_u8PortID <= MDIO_U8_PORTD)){
    185a:	8b 81       	ldd	r24, Y+3	; 0x03
    185c:	88 30       	cpi	r24, 0x08	; 8
    185e:	08 f0       	brcs	.+2      	; 0x1862 <MDIO_u8SetPinDirection+0x24>
    1860:	be c1       	rjmp	.+892    	; 0x1bde <MDIO_u8SetPinDirection+0x3a0>
    1862:	8a 81       	ldd	r24, Y+2	; 0x02
    1864:	84 30       	cpi	r24, 0x04	; 4
    1866:	08 f0       	brcs	.+2      	; 0x186a <MDIO_u8SetPinDirection+0x2c>
    1868:	ba c1       	rjmp	.+884    	; 0x1bde <MDIO_u8SetPinDirection+0x3a0>
		Local_u8ErrorState =1;
    186a:	81 e0       	ldi	r24, 0x01	; 1
    186c:	89 83       	std	Y+1, r24	; 0x01
		switch (Copy_u8PinDirection){
    186e:	8c 81       	ldd	r24, Y+4	; 0x04
    1870:	28 2f       	mov	r18, r24
    1872:	30 e0       	ldi	r19, 0x00	; 0
    1874:	3c 87       	std	Y+12, r19	; 0x0c
    1876:	2b 87       	std	Y+11, r18	; 0x0b
    1878:	8b 85       	ldd	r24, Y+11	; 0x0b
    187a:	9c 85       	ldd	r25, Y+12	; 0x0c
    187c:	81 30       	cpi	r24, 0x01	; 1
    187e:	91 05       	cpc	r25, r1
    1880:	09 f4       	brne	.+2      	; 0x1884 <MDIO_u8SetPinDirection+0x46>
    1882:	38 c1       	rjmp	.+624    	; 0x1af4 <MDIO_u8SetPinDirection+0x2b6>
    1884:	2b 85       	ldd	r18, Y+11	; 0x0b
    1886:	3c 85       	ldd	r19, Y+12	; 0x0c
    1888:	22 30       	cpi	r18, 0x02	; 2
    188a:	31 05       	cpc	r19, r1
    188c:	09 f4       	brne	.+2      	; 0x1890 <MDIO_u8SetPinDirection+0x52>
    188e:	74 c0       	rjmp	.+232    	; 0x1978 <MDIO_u8SetPinDirection+0x13a>
    1890:	8b 85       	ldd	r24, Y+11	; 0x0b
    1892:	9c 85       	ldd	r25, Y+12	; 0x0c
    1894:	00 97       	sbiw	r24, 0x00	; 0
    1896:	09 f0       	breq	.+2      	; 0x189a <MDIO_u8SetPinDirection+0x5c>
    1898:	a1 c1       	rjmp	.+834    	; 0x1bdc <MDIO_u8SetPinDirection+0x39e>
		case(MDIO_U8_OUTPUT):
			switch(Copy_u8PortID){
    189a:	8a 81       	ldd	r24, Y+2	; 0x02
    189c:	28 2f       	mov	r18, r24
    189e:	30 e0       	ldi	r19, 0x00	; 0
    18a0:	3a 87       	std	Y+10, r19	; 0x0a
    18a2:	29 87       	std	Y+9, r18	; 0x09
    18a4:	89 85       	ldd	r24, Y+9	; 0x09
    18a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    18a8:	81 30       	cpi	r24, 0x01	; 1
    18aa:	91 05       	cpc	r25, r1
    18ac:	49 f1       	breq	.+82     	; 0x1900 <MDIO_u8SetPinDirection+0xc2>
    18ae:	29 85       	ldd	r18, Y+9	; 0x09
    18b0:	3a 85       	ldd	r19, Y+10	; 0x0a
    18b2:	22 30       	cpi	r18, 0x02	; 2
    18b4:	31 05       	cpc	r19, r1
    18b6:	2c f4       	brge	.+10     	; 0x18c2 <MDIO_u8SetPinDirection+0x84>
    18b8:	89 85       	ldd	r24, Y+9	; 0x09
    18ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    18bc:	00 97       	sbiw	r24, 0x00	; 0
    18be:	61 f0       	breq	.+24     	; 0x18d8 <MDIO_u8SetPinDirection+0x9a>
    18c0:	8e c1       	rjmp	.+796    	; 0x1bde <MDIO_u8SetPinDirection+0x3a0>
    18c2:	29 85       	ldd	r18, Y+9	; 0x09
    18c4:	3a 85       	ldd	r19, Y+10	; 0x0a
    18c6:	22 30       	cpi	r18, 0x02	; 2
    18c8:	31 05       	cpc	r19, r1
    18ca:	71 f1       	breq	.+92     	; 0x1928 <MDIO_u8SetPinDirection+0xea>
    18cc:	89 85       	ldd	r24, Y+9	; 0x09
    18ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    18d0:	83 30       	cpi	r24, 0x03	; 3
    18d2:	91 05       	cpc	r25, r1
    18d4:	e9 f1       	breq	.+122    	; 0x1950 <MDIO_u8SetPinDirection+0x112>
    18d6:	83 c1       	rjmp	.+774    	; 0x1bde <MDIO_u8SetPinDirection+0x3a0>
			case(MDIO_U8_PORTA):SET_BIT(MDIO_U8_DDRA,Copy_u8PinID);break;
    18d8:	aa e3       	ldi	r26, 0x3A	; 58
    18da:	b0 e0       	ldi	r27, 0x00	; 0
    18dc:	ea e3       	ldi	r30, 0x3A	; 58
    18de:	f0 e0       	ldi	r31, 0x00	; 0
    18e0:	80 81       	ld	r24, Z
    18e2:	48 2f       	mov	r20, r24
    18e4:	8b 81       	ldd	r24, Y+3	; 0x03
    18e6:	28 2f       	mov	r18, r24
    18e8:	30 e0       	ldi	r19, 0x00	; 0
    18ea:	81 e0       	ldi	r24, 0x01	; 1
    18ec:	90 e0       	ldi	r25, 0x00	; 0
    18ee:	02 2e       	mov	r0, r18
    18f0:	02 c0       	rjmp	.+4      	; 0x18f6 <MDIO_u8SetPinDirection+0xb8>
    18f2:	88 0f       	add	r24, r24
    18f4:	99 1f       	adc	r25, r25
    18f6:	0a 94       	dec	r0
    18f8:	e2 f7       	brpl	.-8      	; 0x18f2 <MDIO_u8SetPinDirection+0xb4>
    18fa:	84 2b       	or	r24, r20
    18fc:	8c 93       	st	X, r24
    18fe:	6f c1       	rjmp	.+734    	; 0x1bde <MDIO_u8SetPinDirection+0x3a0>
			case(MDIO_U8_PORTB):SET_BIT(MDIO_U8_DDRB,Copy_u8PinID);break;
    1900:	a7 e3       	ldi	r26, 0x37	; 55
    1902:	b0 e0       	ldi	r27, 0x00	; 0
    1904:	e7 e3       	ldi	r30, 0x37	; 55
    1906:	f0 e0       	ldi	r31, 0x00	; 0
    1908:	80 81       	ld	r24, Z
    190a:	48 2f       	mov	r20, r24
    190c:	8b 81       	ldd	r24, Y+3	; 0x03
    190e:	28 2f       	mov	r18, r24
    1910:	30 e0       	ldi	r19, 0x00	; 0
    1912:	81 e0       	ldi	r24, 0x01	; 1
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	02 2e       	mov	r0, r18
    1918:	02 c0       	rjmp	.+4      	; 0x191e <MDIO_u8SetPinDirection+0xe0>
    191a:	88 0f       	add	r24, r24
    191c:	99 1f       	adc	r25, r25
    191e:	0a 94       	dec	r0
    1920:	e2 f7       	brpl	.-8      	; 0x191a <MDIO_u8SetPinDirection+0xdc>
    1922:	84 2b       	or	r24, r20
    1924:	8c 93       	st	X, r24
    1926:	5b c1       	rjmp	.+694    	; 0x1bde <MDIO_u8SetPinDirection+0x3a0>
			case(MDIO_U8_PORTC):SET_BIT(MDIO_U8_DDRC,Copy_u8PinID);break;
    1928:	a4 e3       	ldi	r26, 0x34	; 52
    192a:	b0 e0       	ldi	r27, 0x00	; 0
    192c:	e4 e3       	ldi	r30, 0x34	; 52
    192e:	f0 e0       	ldi	r31, 0x00	; 0
    1930:	80 81       	ld	r24, Z
    1932:	48 2f       	mov	r20, r24
    1934:	8b 81       	ldd	r24, Y+3	; 0x03
    1936:	28 2f       	mov	r18, r24
    1938:	30 e0       	ldi	r19, 0x00	; 0
    193a:	81 e0       	ldi	r24, 0x01	; 1
    193c:	90 e0       	ldi	r25, 0x00	; 0
    193e:	02 2e       	mov	r0, r18
    1940:	02 c0       	rjmp	.+4      	; 0x1946 <MDIO_u8SetPinDirection+0x108>
    1942:	88 0f       	add	r24, r24
    1944:	99 1f       	adc	r25, r25
    1946:	0a 94       	dec	r0
    1948:	e2 f7       	brpl	.-8      	; 0x1942 <MDIO_u8SetPinDirection+0x104>
    194a:	84 2b       	or	r24, r20
    194c:	8c 93       	st	X, r24
    194e:	47 c1       	rjmp	.+654    	; 0x1bde <MDIO_u8SetPinDirection+0x3a0>
			case(MDIO_U8_PORTD):SET_BIT(MDIO_U8_DDRD,Copy_u8PinID);break;
    1950:	a1 e3       	ldi	r26, 0x31	; 49
    1952:	b0 e0       	ldi	r27, 0x00	; 0
    1954:	e1 e3       	ldi	r30, 0x31	; 49
    1956:	f0 e0       	ldi	r31, 0x00	; 0
    1958:	80 81       	ld	r24, Z
    195a:	48 2f       	mov	r20, r24
    195c:	8b 81       	ldd	r24, Y+3	; 0x03
    195e:	28 2f       	mov	r18, r24
    1960:	30 e0       	ldi	r19, 0x00	; 0
    1962:	81 e0       	ldi	r24, 0x01	; 1
    1964:	90 e0       	ldi	r25, 0x00	; 0
    1966:	02 2e       	mov	r0, r18
    1968:	02 c0       	rjmp	.+4      	; 0x196e <MDIO_u8SetPinDirection+0x130>
    196a:	88 0f       	add	r24, r24
    196c:	99 1f       	adc	r25, r25
    196e:	0a 94       	dec	r0
    1970:	e2 f7       	brpl	.-8      	; 0x196a <MDIO_u8SetPinDirection+0x12c>
    1972:	84 2b       	or	r24, r20
    1974:	8c 93       	st	X, r24
    1976:	33 c1       	rjmp	.+614    	; 0x1bde <MDIO_u8SetPinDirection+0x3a0>
			}break;
		case(MDIO_U8_INPUT_PULLED_UP):
			switch(Copy_u8PortID){
    1978:	8a 81       	ldd	r24, Y+2	; 0x02
    197a:	28 2f       	mov	r18, r24
    197c:	30 e0       	ldi	r19, 0x00	; 0
    197e:	38 87       	std	Y+8, r19	; 0x08
    1980:	2f 83       	std	Y+7, r18	; 0x07
    1982:	8f 81       	ldd	r24, Y+7	; 0x07
    1984:	98 85       	ldd	r25, Y+8	; 0x08
    1986:	81 30       	cpi	r24, 0x01	; 1
    1988:	91 05       	cpc	r25, r1
    198a:	09 f4       	brne	.+2      	; 0x198e <MDIO_u8SetPinDirection+0x150>
    198c:	3e c0       	rjmp	.+124    	; 0x1a0a <MDIO_u8SetPinDirection+0x1cc>
    198e:	2f 81       	ldd	r18, Y+7	; 0x07
    1990:	38 85       	ldd	r19, Y+8	; 0x08
    1992:	22 30       	cpi	r18, 0x02	; 2
    1994:	31 05       	cpc	r19, r1
    1996:	2c f4       	brge	.+10     	; 0x19a2 <MDIO_u8SetPinDirection+0x164>
    1998:	8f 81       	ldd	r24, Y+7	; 0x07
    199a:	98 85       	ldd	r25, Y+8	; 0x08
    199c:	00 97       	sbiw	r24, 0x00	; 0
    199e:	71 f0       	breq	.+28     	; 0x19bc <MDIO_u8SetPinDirection+0x17e>
    19a0:	1e c1       	rjmp	.+572    	; 0x1bde <MDIO_u8SetPinDirection+0x3a0>
    19a2:	2f 81       	ldd	r18, Y+7	; 0x07
    19a4:	38 85       	ldd	r19, Y+8	; 0x08
    19a6:	22 30       	cpi	r18, 0x02	; 2
    19a8:	31 05       	cpc	r19, r1
    19aa:	09 f4       	brne	.+2      	; 0x19ae <MDIO_u8SetPinDirection+0x170>
    19ac:	55 c0       	rjmp	.+170    	; 0x1a58 <MDIO_u8SetPinDirection+0x21a>
    19ae:	8f 81       	ldd	r24, Y+7	; 0x07
    19b0:	98 85       	ldd	r25, Y+8	; 0x08
    19b2:	83 30       	cpi	r24, 0x03	; 3
    19b4:	91 05       	cpc	r25, r1
    19b6:	09 f4       	brne	.+2      	; 0x19ba <MDIO_u8SetPinDirection+0x17c>
    19b8:	76 c0       	rjmp	.+236    	; 0x1aa6 <MDIO_u8SetPinDirection+0x268>
    19ba:	11 c1       	rjmp	.+546    	; 0x1bde <MDIO_u8SetPinDirection+0x3a0>
			case(MDIO_U8_PORTA):CLEAR_BIT(MDIO_U8_DDRA,Copy_u8PinID);SET_BIT(MDIO_U8_PORTA_REG,Copy_u8PinID);break;
    19bc:	aa e3       	ldi	r26, 0x3A	; 58
    19be:	b0 e0       	ldi	r27, 0x00	; 0
    19c0:	ea e3       	ldi	r30, 0x3A	; 58
    19c2:	f0 e0       	ldi	r31, 0x00	; 0
    19c4:	80 81       	ld	r24, Z
    19c6:	48 2f       	mov	r20, r24
    19c8:	8b 81       	ldd	r24, Y+3	; 0x03
    19ca:	28 2f       	mov	r18, r24
    19cc:	30 e0       	ldi	r19, 0x00	; 0
    19ce:	81 e0       	ldi	r24, 0x01	; 1
    19d0:	90 e0       	ldi	r25, 0x00	; 0
    19d2:	02 c0       	rjmp	.+4      	; 0x19d8 <MDIO_u8SetPinDirection+0x19a>
    19d4:	88 0f       	add	r24, r24
    19d6:	99 1f       	adc	r25, r25
    19d8:	2a 95       	dec	r18
    19da:	e2 f7       	brpl	.-8      	; 0x19d4 <MDIO_u8SetPinDirection+0x196>
    19dc:	80 95       	com	r24
    19de:	84 23       	and	r24, r20
    19e0:	8c 93       	st	X, r24
    19e2:	ab e3       	ldi	r26, 0x3B	; 59
    19e4:	b0 e0       	ldi	r27, 0x00	; 0
    19e6:	eb e3       	ldi	r30, 0x3B	; 59
    19e8:	f0 e0       	ldi	r31, 0x00	; 0
    19ea:	80 81       	ld	r24, Z
    19ec:	48 2f       	mov	r20, r24
    19ee:	8b 81       	ldd	r24, Y+3	; 0x03
    19f0:	28 2f       	mov	r18, r24
    19f2:	30 e0       	ldi	r19, 0x00	; 0
    19f4:	81 e0       	ldi	r24, 0x01	; 1
    19f6:	90 e0       	ldi	r25, 0x00	; 0
    19f8:	02 2e       	mov	r0, r18
    19fa:	02 c0       	rjmp	.+4      	; 0x1a00 <MDIO_u8SetPinDirection+0x1c2>
    19fc:	88 0f       	add	r24, r24
    19fe:	99 1f       	adc	r25, r25
    1a00:	0a 94       	dec	r0
    1a02:	e2 f7       	brpl	.-8      	; 0x19fc <MDIO_u8SetPinDirection+0x1be>
    1a04:	84 2b       	or	r24, r20
    1a06:	8c 93       	st	X, r24
    1a08:	ea c0       	rjmp	.+468    	; 0x1bde <MDIO_u8SetPinDirection+0x3a0>
			case(MDIO_U8_PORTB):CLEAR_BIT(MDIO_U8_DDRB,Copy_u8PinID);SET_BIT(MDIO_U8_PORTB_REG,Copy_u8PinID);break;
    1a0a:	a7 e3       	ldi	r26, 0x37	; 55
    1a0c:	b0 e0       	ldi	r27, 0x00	; 0
    1a0e:	e7 e3       	ldi	r30, 0x37	; 55
    1a10:	f0 e0       	ldi	r31, 0x00	; 0
    1a12:	80 81       	ld	r24, Z
    1a14:	48 2f       	mov	r20, r24
    1a16:	8b 81       	ldd	r24, Y+3	; 0x03
    1a18:	28 2f       	mov	r18, r24
    1a1a:	30 e0       	ldi	r19, 0x00	; 0
    1a1c:	81 e0       	ldi	r24, 0x01	; 1
    1a1e:	90 e0       	ldi	r25, 0x00	; 0
    1a20:	02 c0       	rjmp	.+4      	; 0x1a26 <MDIO_u8SetPinDirection+0x1e8>
    1a22:	88 0f       	add	r24, r24
    1a24:	99 1f       	adc	r25, r25
    1a26:	2a 95       	dec	r18
    1a28:	e2 f7       	brpl	.-8      	; 0x1a22 <MDIO_u8SetPinDirection+0x1e4>
    1a2a:	80 95       	com	r24
    1a2c:	84 23       	and	r24, r20
    1a2e:	8c 93       	st	X, r24
    1a30:	a8 e3       	ldi	r26, 0x38	; 56
    1a32:	b0 e0       	ldi	r27, 0x00	; 0
    1a34:	e8 e3       	ldi	r30, 0x38	; 56
    1a36:	f0 e0       	ldi	r31, 0x00	; 0
    1a38:	80 81       	ld	r24, Z
    1a3a:	48 2f       	mov	r20, r24
    1a3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a3e:	28 2f       	mov	r18, r24
    1a40:	30 e0       	ldi	r19, 0x00	; 0
    1a42:	81 e0       	ldi	r24, 0x01	; 1
    1a44:	90 e0       	ldi	r25, 0x00	; 0
    1a46:	02 2e       	mov	r0, r18
    1a48:	02 c0       	rjmp	.+4      	; 0x1a4e <MDIO_u8SetPinDirection+0x210>
    1a4a:	88 0f       	add	r24, r24
    1a4c:	99 1f       	adc	r25, r25
    1a4e:	0a 94       	dec	r0
    1a50:	e2 f7       	brpl	.-8      	; 0x1a4a <MDIO_u8SetPinDirection+0x20c>
    1a52:	84 2b       	or	r24, r20
    1a54:	8c 93       	st	X, r24
    1a56:	c3 c0       	rjmp	.+390    	; 0x1bde <MDIO_u8SetPinDirection+0x3a0>
			case(MDIO_U8_PORTC):CLEAR_BIT(MDIO_U8_DDRC,Copy_u8PinID);SET_BIT(MDIO_U8_PORTC_REG,Copy_u8PinID);break;
    1a58:	a4 e3       	ldi	r26, 0x34	; 52
    1a5a:	b0 e0       	ldi	r27, 0x00	; 0
    1a5c:	e4 e3       	ldi	r30, 0x34	; 52
    1a5e:	f0 e0       	ldi	r31, 0x00	; 0
    1a60:	80 81       	ld	r24, Z
    1a62:	48 2f       	mov	r20, r24
    1a64:	8b 81       	ldd	r24, Y+3	; 0x03
    1a66:	28 2f       	mov	r18, r24
    1a68:	30 e0       	ldi	r19, 0x00	; 0
    1a6a:	81 e0       	ldi	r24, 0x01	; 1
    1a6c:	90 e0       	ldi	r25, 0x00	; 0
    1a6e:	02 c0       	rjmp	.+4      	; 0x1a74 <MDIO_u8SetPinDirection+0x236>
    1a70:	88 0f       	add	r24, r24
    1a72:	99 1f       	adc	r25, r25
    1a74:	2a 95       	dec	r18
    1a76:	e2 f7       	brpl	.-8      	; 0x1a70 <MDIO_u8SetPinDirection+0x232>
    1a78:	80 95       	com	r24
    1a7a:	84 23       	and	r24, r20
    1a7c:	8c 93       	st	X, r24
    1a7e:	a5 e3       	ldi	r26, 0x35	; 53
    1a80:	b0 e0       	ldi	r27, 0x00	; 0
    1a82:	e5 e3       	ldi	r30, 0x35	; 53
    1a84:	f0 e0       	ldi	r31, 0x00	; 0
    1a86:	80 81       	ld	r24, Z
    1a88:	48 2f       	mov	r20, r24
    1a8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a8c:	28 2f       	mov	r18, r24
    1a8e:	30 e0       	ldi	r19, 0x00	; 0
    1a90:	81 e0       	ldi	r24, 0x01	; 1
    1a92:	90 e0       	ldi	r25, 0x00	; 0
    1a94:	02 2e       	mov	r0, r18
    1a96:	02 c0       	rjmp	.+4      	; 0x1a9c <MDIO_u8SetPinDirection+0x25e>
    1a98:	88 0f       	add	r24, r24
    1a9a:	99 1f       	adc	r25, r25
    1a9c:	0a 94       	dec	r0
    1a9e:	e2 f7       	brpl	.-8      	; 0x1a98 <MDIO_u8SetPinDirection+0x25a>
    1aa0:	84 2b       	or	r24, r20
    1aa2:	8c 93       	st	X, r24
    1aa4:	9c c0       	rjmp	.+312    	; 0x1bde <MDIO_u8SetPinDirection+0x3a0>
			case(MDIO_U8_PORTD):CLEAR_BIT(MDIO_U8_DDRD,Copy_u8PinID);SET_BIT(MDIO_U8_PORTD_REG,Copy_u8PinID);break;
    1aa6:	a1 e3       	ldi	r26, 0x31	; 49
    1aa8:	b0 e0       	ldi	r27, 0x00	; 0
    1aaa:	e1 e3       	ldi	r30, 0x31	; 49
    1aac:	f0 e0       	ldi	r31, 0x00	; 0
    1aae:	80 81       	ld	r24, Z
    1ab0:	48 2f       	mov	r20, r24
    1ab2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab4:	28 2f       	mov	r18, r24
    1ab6:	30 e0       	ldi	r19, 0x00	; 0
    1ab8:	81 e0       	ldi	r24, 0x01	; 1
    1aba:	90 e0       	ldi	r25, 0x00	; 0
    1abc:	02 c0       	rjmp	.+4      	; 0x1ac2 <MDIO_u8SetPinDirection+0x284>
    1abe:	88 0f       	add	r24, r24
    1ac0:	99 1f       	adc	r25, r25
    1ac2:	2a 95       	dec	r18
    1ac4:	e2 f7       	brpl	.-8      	; 0x1abe <MDIO_u8SetPinDirection+0x280>
    1ac6:	80 95       	com	r24
    1ac8:	84 23       	and	r24, r20
    1aca:	8c 93       	st	X, r24
    1acc:	a2 e3       	ldi	r26, 0x32	; 50
    1ace:	b0 e0       	ldi	r27, 0x00	; 0
    1ad0:	e2 e3       	ldi	r30, 0x32	; 50
    1ad2:	f0 e0       	ldi	r31, 0x00	; 0
    1ad4:	80 81       	ld	r24, Z
    1ad6:	48 2f       	mov	r20, r24
    1ad8:	8b 81       	ldd	r24, Y+3	; 0x03
    1ada:	28 2f       	mov	r18, r24
    1adc:	30 e0       	ldi	r19, 0x00	; 0
    1ade:	81 e0       	ldi	r24, 0x01	; 1
    1ae0:	90 e0       	ldi	r25, 0x00	; 0
    1ae2:	02 2e       	mov	r0, r18
    1ae4:	02 c0       	rjmp	.+4      	; 0x1aea <MDIO_u8SetPinDirection+0x2ac>
    1ae6:	88 0f       	add	r24, r24
    1ae8:	99 1f       	adc	r25, r25
    1aea:	0a 94       	dec	r0
    1aec:	e2 f7       	brpl	.-8      	; 0x1ae6 <MDIO_u8SetPinDirection+0x2a8>
    1aee:	84 2b       	or	r24, r20
    1af0:	8c 93       	st	X, r24
    1af2:	75 c0       	rjmp	.+234    	; 0x1bde <MDIO_u8SetPinDirection+0x3a0>
			}break;
		case(MDIO_U8_INPUT_FLOATING):
			switch(Copy_u8PortID){
    1af4:	8a 81       	ldd	r24, Y+2	; 0x02
    1af6:	28 2f       	mov	r18, r24
    1af8:	30 e0       	ldi	r19, 0x00	; 0
    1afa:	3e 83       	std	Y+6, r19	; 0x06
    1afc:	2d 83       	std	Y+5, r18	; 0x05
    1afe:	8d 81       	ldd	r24, Y+5	; 0x05
    1b00:	9e 81       	ldd	r25, Y+6	; 0x06
    1b02:	81 30       	cpi	r24, 0x01	; 1
    1b04:	91 05       	cpc	r25, r1
    1b06:	59 f1       	breq	.+86     	; 0x1b5e <MDIO_u8SetPinDirection+0x320>
    1b08:	2d 81       	ldd	r18, Y+5	; 0x05
    1b0a:	3e 81       	ldd	r19, Y+6	; 0x06
    1b0c:	22 30       	cpi	r18, 0x02	; 2
    1b0e:	31 05       	cpc	r19, r1
    1b10:	2c f4       	brge	.+10     	; 0x1b1c <MDIO_u8SetPinDirection+0x2de>
    1b12:	8d 81       	ldd	r24, Y+5	; 0x05
    1b14:	9e 81       	ldd	r25, Y+6	; 0x06
    1b16:	00 97       	sbiw	r24, 0x00	; 0
    1b18:	69 f0       	breq	.+26     	; 0x1b34 <MDIO_u8SetPinDirection+0x2f6>
    1b1a:	61 c0       	rjmp	.+194    	; 0x1bde <MDIO_u8SetPinDirection+0x3a0>
    1b1c:	2d 81       	ldd	r18, Y+5	; 0x05
    1b1e:	3e 81       	ldd	r19, Y+6	; 0x06
    1b20:	22 30       	cpi	r18, 0x02	; 2
    1b22:	31 05       	cpc	r19, r1
    1b24:	89 f1       	breq	.+98     	; 0x1b88 <MDIO_u8SetPinDirection+0x34a>
    1b26:	8d 81       	ldd	r24, Y+5	; 0x05
    1b28:	9e 81       	ldd	r25, Y+6	; 0x06
    1b2a:	83 30       	cpi	r24, 0x03	; 3
    1b2c:	91 05       	cpc	r25, r1
    1b2e:	09 f4       	brne	.+2      	; 0x1b32 <MDIO_u8SetPinDirection+0x2f4>
    1b30:	40 c0       	rjmp	.+128    	; 0x1bb2 <MDIO_u8SetPinDirection+0x374>
    1b32:	55 c0       	rjmp	.+170    	; 0x1bde <MDIO_u8SetPinDirection+0x3a0>
			case(MDIO_U8_PORTA):CLEAR_BIT(MDIO_U8_DDRA,Copy_u8PinID);break;
    1b34:	aa e3       	ldi	r26, 0x3A	; 58
    1b36:	b0 e0       	ldi	r27, 0x00	; 0
    1b38:	ea e3       	ldi	r30, 0x3A	; 58
    1b3a:	f0 e0       	ldi	r31, 0x00	; 0
    1b3c:	80 81       	ld	r24, Z
    1b3e:	48 2f       	mov	r20, r24
    1b40:	8b 81       	ldd	r24, Y+3	; 0x03
    1b42:	28 2f       	mov	r18, r24
    1b44:	30 e0       	ldi	r19, 0x00	; 0
    1b46:	81 e0       	ldi	r24, 0x01	; 1
    1b48:	90 e0       	ldi	r25, 0x00	; 0
    1b4a:	02 2e       	mov	r0, r18
    1b4c:	02 c0       	rjmp	.+4      	; 0x1b52 <MDIO_u8SetPinDirection+0x314>
    1b4e:	88 0f       	add	r24, r24
    1b50:	99 1f       	adc	r25, r25
    1b52:	0a 94       	dec	r0
    1b54:	e2 f7       	brpl	.-8      	; 0x1b4e <MDIO_u8SetPinDirection+0x310>
    1b56:	80 95       	com	r24
    1b58:	84 23       	and	r24, r20
    1b5a:	8c 93       	st	X, r24
    1b5c:	40 c0       	rjmp	.+128    	; 0x1bde <MDIO_u8SetPinDirection+0x3a0>
			case(MDIO_U8_PORTB):CLEAR_BIT(MDIO_U8_DDRB,Copy_u8PinID);break;
    1b5e:	a7 e3       	ldi	r26, 0x37	; 55
    1b60:	b0 e0       	ldi	r27, 0x00	; 0
    1b62:	e7 e3       	ldi	r30, 0x37	; 55
    1b64:	f0 e0       	ldi	r31, 0x00	; 0
    1b66:	80 81       	ld	r24, Z
    1b68:	48 2f       	mov	r20, r24
    1b6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b6c:	28 2f       	mov	r18, r24
    1b6e:	30 e0       	ldi	r19, 0x00	; 0
    1b70:	81 e0       	ldi	r24, 0x01	; 1
    1b72:	90 e0       	ldi	r25, 0x00	; 0
    1b74:	02 2e       	mov	r0, r18
    1b76:	02 c0       	rjmp	.+4      	; 0x1b7c <MDIO_u8SetPinDirection+0x33e>
    1b78:	88 0f       	add	r24, r24
    1b7a:	99 1f       	adc	r25, r25
    1b7c:	0a 94       	dec	r0
    1b7e:	e2 f7       	brpl	.-8      	; 0x1b78 <MDIO_u8SetPinDirection+0x33a>
    1b80:	80 95       	com	r24
    1b82:	84 23       	and	r24, r20
    1b84:	8c 93       	st	X, r24
    1b86:	2b c0       	rjmp	.+86     	; 0x1bde <MDIO_u8SetPinDirection+0x3a0>
			case(MDIO_U8_PORTC):CLEAR_BIT(MDIO_U8_DDRC,Copy_u8PinID);break;
    1b88:	a4 e3       	ldi	r26, 0x34	; 52
    1b8a:	b0 e0       	ldi	r27, 0x00	; 0
    1b8c:	e4 e3       	ldi	r30, 0x34	; 52
    1b8e:	f0 e0       	ldi	r31, 0x00	; 0
    1b90:	80 81       	ld	r24, Z
    1b92:	48 2f       	mov	r20, r24
    1b94:	8b 81       	ldd	r24, Y+3	; 0x03
    1b96:	28 2f       	mov	r18, r24
    1b98:	30 e0       	ldi	r19, 0x00	; 0
    1b9a:	81 e0       	ldi	r24, 0x01	; 1
    1b9c:	90 e0       	ldi	r25, 0x00	; 0
    1b9e:	02 2e       	mov	r0, r18
    1ba0:	02 c0       	rjmp	.+4      	; 0x1ba6 <MDIO_u8SetPinDirection+0x368>
    1ba2:	88 0f       	add	r24, r24
    1ba4:	99 1f       	adc	r25, r25
    1ba6:	0a 94       	dec	r0
    1ba8:	e2 f7       	brpl	.-8      	; 0x1ba2 <MDIO_u8SetPinDirection+0x364>
    1baa:	80 95       	com	r24
    1bac:	84 23       	and	r24, r20
    1bae:	8c 93       	st	X, r24
    1bb0:	16 c0       	rjmp	.+44     	; 0x1bde <MDIO_u8SetPinDirection+0x3a0>
			case(MDIO_U8_PORTD):CLEAR_BIT(MDIO_U8_DDRD,Copy_u8PinID);break;
    1bb2:	a1 e3       	ldi	r26, 0x31	; 49
    1bb4:	b0 e0       	ldi	r27, 0x00	; 0
    1bb6:	e1 e3       	ldi	r30, 0x31	; 49
    1bb8:	f0 e0       	ldi	r31, 0x00	; 0
    1bba:	80 81       	ld	r24, Z
    1bbc:	48 2f       	mov	r20, r24
    1bbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc0:	28 2f       	mov	r18, r24
    1bc2:	30 e0       	ldi	r19, 0x00	; 0
    1bc4:	81 e0       	ldi	r24, 0x01	; 1
    1bc6:	90 e0       	ldi	r25, 0x00	; 0
    1bc8:	02 2e       	mov	r0, r18
    1bca:	02 c0       	rjmp	.+4      	; 0x1bd0 <MDIO_u8SetPinDirection+0x392>
    1bcc:	88 0f       	add	r24, r24
    1bce:	99 1f       	adc	r25, r25
    1bd0:	0a 94       	dec	r0
    1bd2:	e2 f7       	brpl	.-8      	; 0x1bcc <MDIO_u8SetPinDirection+0x38e>
    1bd4:	80 95       	com	r24
    1bd6:	84 23       	and	r24, r20
    1bd8:	8c 93       	st	X, r24
    1bda:	01 c0       	rjmp	.+2      	; 0x1bde <MDIO_u8SetPinDirection+0x3a0>
			}break;
		default:Local_u8ErrorState=STD_TYPES_NOK;
    1bdc:	19 82       	std	Y+1, r1	; 0x01
		}

	}
	return Local_u8ErrorState;
    1bde:	89 81       	ldd	r24, Y+1	; 0x01
}
    1be0:	2c 96       	adiw	r28, 0x0c	; 12
    1be2:	0f b6       	in	r0, 0x3f	; 63
    1be4:	f8 94       	cli
    1be6:	de bf       	out	0x3e, r29	; 62
    1be8:	0f be       	out	0x3f, r0	; 63
    1bea:	cd bf       	out	0x3d, r28	; 61
    1bec:	cf 91       	pop	r28
    1bee:	df 91       	pop	r29
    1bf0:	08 95       	ret

00001bf2 <MDIO_u8SetPinValue>:
u8 MDIO_u8SetPinValue(u8 Copy_u8PortID , u8 Copy_u8PinID , u8 Copy_u8PinValue){
    1bf2:	df 93       	push	r29
    1bf4:	cf 93       	push	r28
    1bf6:	cd b7       	in	r28, 0x3d	; 61
    1bf8:	de b7       	in	r29, 0x3e	; 62
    1bfa:	2a 97       	sbiw	r28, 0x0a	; 10
    1bfc:	0f b6       	in	r0, 0x3f	; 63
    1bfe:	f8 94       	cli
    1c00:	de bf       	out	0x3e, r29	; 62
    1c02:	0f be       	out	0x3f, r0	; 63
    1c04:	cd bf       	out	0x3d, r28	; 61
    1c06:	8a 83       	std	Y+2, r24	; 0x02
    1c08:	6b 83       	std	Y+3, r22	; 0x03
    1c0a:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState;
	if((Copy_u8PinID <= MDIO_U8_PIN_7) && (Copy_u8PortID <= MDIO_U8_PORTD)){
    1c0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c0e:	88 30       	cpi	r24, 0x08	; 8
    1c10:	08 f0       	brcs	.+2      	; 0x1c14 <MDIO_u8SetPinValue+0x22>
    1c12:	fa c0       	rjmp	.+500    	; 0x1e08 <MDIO_u8SetPinValue+0x216>
    1c14:	8a 81       	ldd	r24, Y+2	; 0x02
    1c16:	84 30       	cpi	r24, 0x04	; 4
    1c18:	08 f0       	brcs	.+2      	; 0x1c1c <MDIO_u8SetPinValue+0x2a>
    1c1a:	f6 c0       	rjmp	.+492    	; 0x1e08 <MDIO_u8SetPinValue+0x216>
		Local_u8ErrorState = 1;
    1c1c:	81 e0       	ldi	r24, 0x01	; 1
    1c1e:	89 83       	std	Y+1, r24	; 0x01
		switch (Copy_u8PinValue){
    1c20:	8c 81       	ldd	r24, Y+4	; 0x04
    1c22:	28 2f       	mov	r18, r24
    1c24:	30 e0       	ldi	r19, 0x00	; 0
    1c26:	3a 87       	std	Y+10, r19	; 0x0a
    1c28:	29 87       	std	Y+9, r18	; 0x09
    1c2a:	89 85       	ldd	r24, Y+9	; 0x09
    1c2c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c2e:	00 97       	sbiw	r24, 0x00	; 0
    1c30:	09 f4       	brne	.+2      	; 0x1c34 <MDIO_u8SetPinValue+0x42>
    1c32:	75 c0       	rjmp	.+234    	; 0x1d1e <MDIO_u8SetPinValue+0x12c>
    1c34:	29 85       	ldd	r18, Y+9	; 0x09
    1c36:	3a 85       	ldd	r19, Y+10	; 0x0a
    1c38:	21 30       	cpi	r18, 0x01	; 1
    1c3a:	31 05       	cpc	r19, r1
    1c3c:	09 f0       	breq	.+2      	; 0x1c40 <MDIO_u8SetPinValue+0x4e>
    1c3e:	e3 c0       	rjmp	.+454    	; 0x1e06 <MDIO_u8SetPinValue+0x214>
		case(MDIO_U8_HIGH):
			switch(Copy_u8PortID){
    1c40:	8a 81       	ldd	r24, Y+2	; 0x02
    1c42:	28 2f       	mov	r18, r24
    1c44:	30 e0       	ldi	r19, 0x00	; 0
    1c46:	38 87       	std	Y+8, r19	; 0x08
    1c48:	2f 83       	std	Y+7, r18	; 0x07
    1c4a:	8f 81       	ldd	r24, Y+7	; 0x07
    1c4c:	98 85       	ldd	r25, Y+8	; 0x08
    1c4e:	81 30       	cpi	r24, 0x01	; 1
    1c50:	91 05       	cpc	r25, r1
    1c52:	49 f1       	breq	.+82     	; 0x1ca6 <MDIO_u8SetPinValue+0xb4>
    1c54:	2f 81       	ldd	r18, Y+7	; 0x07
    1c56:	38 85       	ldd	r19, Y+8	; 0x08
    1c58:	22 30       	cpi	r18, 0x02	; 2
    1c5a:	31 05       	cpc	r19, r1
    1c5c:	2c f4       	brge	.+10     	; 0x1c68 <MDIO_u8SetPinValue+0x76>
    1c5e:	8f 81       	ldd	r24, Y+7	; 0x07
    1c60:	98 85       	ldd	r25, Y+8	; 0x08
    1c62:	00 97       	sbiw	r24, 0x00	; 0
    1c64:	61 f0       	breq	.+24     	; 0x1c7e <MDIO_u8SetPinValue+0x8c>
    1c66:	d0 c0       	rjmp	.+416    	; 0x1e08 <MDIO_u8SetPinValue+0x216>
    1c68:	2f 81       	ldd	r18, Y+7	; 0x07
    1c6a:	38 85       	ldd	r19, Y+8	; 0x08
    1c6c:	22 30       	cpi	r18, 0x02	; 2
    1c6e:	31 05       	cpc	r19, r1
    1c70:	71 f1       	breq	.+92     	; 0x1cce <MDIO_u8SetPinValue+0xdc>
    1c72:	8f 81       	ldd	r24, Y+7	; 0x07
    1c74:	98 85       	ldd	r25, Y+8	; 0x08
    1c76:	83 30       	cpi	r24, 0x03	; 3
    1c78:	91 05       	cpc	r25, r1
    1c7a:	e9 f1       	breq	.+122    	; 0x1cf6 <MDIO_u8SetPinValue+0x104>
    1c7c:	c5 c0       	rjmp	.+394    	; 0x1e08 <MDIO_u8SetPinValue+0x216>
			case(MDIO_U8_PORTA):SET_BIT(MDIO_U8_PORTA_REG,Copy_u8PinID);break;
    1c7e:	ab e3       	ldi	r26, 0x3B	; 59
    1c80:	b0 e0       	ldi	r27, 0x00	; 0
    1c82:	eb e3       	ldi	r30, 0x3B	; 59
    1c84:	f0 e0       	ldi	r31, 0x00	; 0
    1c86:	80 81       	ld	r24, Z
    1c88:	48 2f       	mov	r20, r24
    1c8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c8c:	28 2f       	mov	r18, r24
    1c8e:	30 e0       	ldi	r19, 0x00	; 0
    1c90:	81 e0       	ldi	r24, 0x01	; 1
    1c92:	90 e0       	ldi	r25, 0x00	; 0
    1c94:	02 2e       	mov	r0, r18
    1c96:	02 c0       	rjmp	.+4      	; 0x1c9c <MDIO_u8SetPinValue+0xaa>
    1c98:	88 0f       	add	r24, r24
    1c9a:	99 1f       	adc	r25, r25
    1c9c:	0a 94       	dec	r0
    1c9e:	e2 f7       	brpl	.-8      	; 0x1c98 <MDIO_u8SetPinValue+0xa6>
    1ca0:	84 2b       	or	r24, r20
    1ca2:	8c 93       	st	X, r24
    1ca4:	b1 c0       	rjmp	.+354    	; 0x1e08 <MDIO_u8SetPinValue+0x216>
			case(MDIO_U8_PORTB):SET_BIT(MDIO_U8_PORTB_REG,Copy_u8PinID);break;
    1ca6:	a8 e3       	ldi	r26, 0x38	; 56
    1ca8:	b0 e0       	ldi	r27, 0x00	; 0
    1caa:	e8 e3       	ldi	r30, 0x38	; 56
    1cac:	f0 e0       	ldi	r31, 0x00	; 0
    1cae:	80 81       	ld	r24, Z
    1cb0:	48 2f       	mov	r20, r24
    1cb2:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb4:	28 2f       	mov	r18, r24
    1cb6:	30 e0       	ldi	r19, 0x00	; 0
    1cb8:	81 e0       	ldi	r24, 0x01	; 1
    1cba:	90 e0       	ldi	r25, 0x00	; 0
    1cbc:	02 2e       	mov	r0, r18
    1cbe:	02 c0       	rjmp	.+4      	; 0x1cc4 <MDIO_u8SetPinValue+0xd2>
    1cc0:	88 0f       	add	r24, r24
    1cc2:	99 1f       	adc	r25, r25
    1cc4:	0a 94       	dec	r0
    1cc6:	e2 f7       	brpl	.-8      	; 0x1cc0 <MDIO_u8SetPinValue+0xce>
    1cc8:	84 2b       	or	r24, r20
    1cca:	8c 93       	st	X, r24
    1ccc:	9d c0       	rjmp	.+314    	; 0x1e08 <MDIO_u8SetPinValue+0x216>
			case(MDIO_U8_PORTC):SET_BIT(MDIO_U8_PORTC_REG,Copy_u8PinID);break;
    1cce:	a5 e3       	ldi	r26, 0x35	; 53
    1cd0:	b0 e0       	ldi	r27, 0x00	; 0
    1cd2:	e5 e3       	ldi	r30, 0x35	; 53
    1cd4:	f0 e0       	ldi	r31, 0x00	; 0
    1cd6:	80 81       	ld	r24, Z
    1cd8:	48 2f       	mov	r20, r24
    1cda:	8b 81       	ldd	r24, Y+3	; 0x03
    1cdc:	28 2f       	mov	r18, r24
    1cde:	30 e0       	ldi	r19, 0x00	; 0
    1ce0:	81 e0       	ldi	r24, 0x01	; 1
    1ce2:	90 e0       	ldi	r25, 0x00	; 0
    1ce4:	02 2e       	mov	r0, r18
    1ce6:	02 c0       	rjmp	.+4      	; 0x1cec <MDIO_u8SetPinValue+0xfa>
    1ce8:	88 0f       	add	r24, r24
    1cea:	99 1f       	adc	r25, r25
    1cec:	0a 94       	dec	r0
    1cee:	e2 f7       	brpl	.-8      	; 0x1ce8 <MDIO_u8SetPinValue+0xf6>
    1cf0:	84 2b       	or	r24, r20
    1cf2:	8c 93       	st	X, r24
    1cf4:	89 c0       	rjmp	.+274    	; 0x1e08 <MDIO_u8SetPinValue+0x216>
			case(MDIO_U8_PORTD):SET_BIT(MDIO_U8_PORTD_REG,Copy_u8PinID);break;
    1cf6:	a2 e3       	ldi	r26, 0x32	; 50
    1cf8:	b0 e0       	ldi	r27, 0x00	; 0
    1cfa:	e2 e3       	ldi	r30, 0x32	; 50
    1cfc:	f0 e0       	ldi	r31, 0x00	; 0
    1cfe:	80 81       	ld	r24, Z
    1d00:	48 2f       	mov	r20, r24
    1d02:	8b 81       	ldd	r24, Y+3	; 0x03
    1d04:	28 2f       	mov	r18, r24
    1d06:	30 e0       	ldi	r19, 0x00	; 0
    1d08:	81 e0       	ldi	r24, 0x01	; 1
    1d0a:	90 e0       	ldi	r25, 0x00	; 0
    1d0c:	02 2e       	mov	r0, r18
    1d0e:	02 c0       	rjmp	.+4      	; 0x1d14 <MDIO_u8SetPinValue+0x122>
    1d10:	88 0f       	add	r24, r24
    1d12:	99 1f       	adc	r25, r25
    1d14:	0a 94       	dec	r0
    1d16:	e2 f7       	brpl	.-8      	; 0x1d10 <MDIO_u8SetPinValue+0x11e>
    1d18:	84 2b       	or	r24, r20
    1d1a:	8c 93       	st	X, r24
    1d1c:	75 c0       	rjmp	.+234    	; 0x1e08 <MDIO_u8SetPinValue+0x216>
			}
			break;
		case(MDIO_U8_LOW):
			switch(Copy_u8PortID){
    1d1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d20:	28 2f       	mov	r18, r24
    1d22:	30 e0       	ldi	r19, 0x00	; 0
    1d24:	3e 83       	std	Y+6, r19	; 0x06
    1d26:	2d 83       	std	Y+5, r18	; 0x05
    1d28:	8d 81       	ldd	r24, Y+5	; 0x05
    1d2a:	9e 81       	ldd	r25, Y+6	; 0x06
    1d2c:	81 30       	cpi	r24, 0x01	; 1
    1d2e:	91 05       	cpc	r25, r1
    1d30:	59 f1       	breq	.+86     	; 0x1d88 <MDIO_u8SetPinValue+0x196>
    1d32:	2d 81       	ldd	r18, Y+5	; 0x05
    1d34:	3e 81       	ldd	r19, Y+6	; 0x06
    1d36:	22 30       	cpi	r18, 0x02	; 2
    1d38:	31 05       	cpc	r19, r1
    1d3a:	2c f4       	brge	.+10     	; 0x1d46 <MDIO_u8SetPinValue+0x154>
    1d3c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d3e:	9e 81       	ldd	r25, Y+6	; 0x06
    1d40:	00 97       	sbiw	r24, 0x00	; 0
    1d42:	69 f0       	breq	.+26     	; 0x1d5e <MDIO_u8SetPinValue+0x16c>
    1d44:	61 c0       	rjmp	.+194    	; 0x1e08 <MDIO_u8SetPinValue+0x216>
    1d46:	2d 81       	ldd	r18, Y+5	; 0x05
    1d48:	3e 81       	ldd	r19, Y+6	; 0x06
    1d4a:	22 30       	cpi	r18, 0x02	; 2
    1d4c:	31 05       	cpc	r19, r1
    1d4e:	89 f1       	breq	.+98     	; 0x1db2 <MDIO_u8SetPinValue+0x1c0>
    1d50:	8d 81       	ldd	r24, Y+5	; 0x05
    1d52:	9e 81       	ldd	r25, Y+6	; 0x06
    1d54:	83 30       	cpi	r24, 0x03	; 3
    1d56:	91 05       	cpc	r25, r1
    1d58:	09 f4       	brne	.+2      	; 0x1d5c <MDIO_u8SetPinValue+0x16a>
    1d5a:	40 c0       	rjmp	.+128    	; 0x1ddc <MDIO_u8SetPinValue+0x1ea>
    1d5c:	55 c0       	rjmp	.+170    	; 0x1e08 <MDIO_u8SetPinValue+0x216>
			case(MDIO_U8_PORTA):CLEAR_BIT(MDIO_U8_PORTA_REG,Copy_u8PinID);break;
    1d5e:	ab e3       	ldi	r26, 0x3B	; 59
    1d60:	b0 e0       	ldi	r27, 0x00	; 0
    1d62:	eb e3       	ldi	r30, 0x3B	; 59
    1d64:	f0 e0       	ldi	r31, 0x00	; 0
    1d66:	80 81       	ld	r24, Z
    1d68:	48 2f       	mov	r20, r24
    1d6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d6c:	28 2f       	mov	r18, r24
    1d6e:	30 e0       	ldi	r19, 0x00	; 0
    1d70:	81 e0       	ldi	r24, 0x01	; 1
    1d72:	90 e0       	ldi	r25, 0x00	; 0
    1d74:	02 2e       	mov	r0, r18
    1d76:	02 c0       	rjmp	.+4      	; 0x1d7c <MDIO_u8SetPinValue+0x18a>
    1d78:	88 0f       	add	r24, r24
    1d7a:	99 1f       	adc	r25, r25
    1d7c:	0a 94       	dec	r0
    1d7e:	e2 f7       	brpl	.-8      	; 0x1d78 <MDIO_u8SetPinValue+0x186>
    1d80:	80 95       	com	r24
    1d82:	84 23       	and	r24, r20
    1d84:	8c 93       	st	X, r24
    1d86:	40 c0       	rjmp	.+128    	; 0x1e08 <MDIO_u8SetPinValue+0x216>
			case(MDIO_U8_PORTB):CLEAR_BIT(MDIO_U8_PORTB_REG,Copy_u8PinID);break;
    1d88:	a8 e3       	ldi	r26, 0x38	; 56
    1d8a:	b0 e0       	ldi	r27, 0x00	; 0
    1d8c:	e8 e3       	ldi	r30, 0x38	; 56
    1d8e:	f0 e0       	ldi	r31, 0x00	; 0
    1d90:	80 81       	ld	r24, Z
    1d92:	48 2f       	mov	r20, r24
    1d94:	8b 81       	ldd	r24, Y+3	; 0x03
    1d96:	28 2f       	mov	r18, r24
    1d98:	30 e0       	ldi	r19, 0x00	; 0
    1d9a:	81 e0       	ldi	r24, 0x01	; 1
    1d9c:	90 e0       	ldi	r25, 0x00	; 0
    1d9e:	02 2e       	mov	r0, r18
    1da0:	02 c0       	rjmp	.+4      	; 0x1da6 <MDIO_u8SetPinValue+0x1b4>
    1da2:	88 0f       	add	r24, r24
    1da4:	99 1f       	adc	r25, r25
    1da6:	0a 94       	dec	r0
    1da8:	e2 f7       	brpl	.-8      	; 0x1da2 <MDIO_u8SetPinValue+0x1b0>
    1daa:	80 95       	com	r24
    1dac:	84 23       	and	r24, r20
    1dae:	8c 93       	st	X, r24
    1db0:	2b c0       	rjmp	.+86     	; 0x1e08 <MDIO_u8SetPinValue+0x216>
			case(MDIO_U8_PORTC):CLEAR_BIT(MDIO_U8_PORTC_REG,Copy_u8PinID);break;
    1db2:	a5 e3       	ldi	r26, 0x35	; 53
    1db4:	b0 e0       	ldi	r27, 0x00	; 0
    1db6:	e5 e3       	ldi	r30, 0x35	; 53
    1db8:	f0 e0       	ldi	r31, 0x00	; 0
    1dba:	80 81       	ld	r24, Z
    1dbc:	48 2f       	mov	r20, r24
    1dbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc0:	28 2f       	mov	r18, r24
    1dc2:	30 e0       	ldi	r19, 0x00	; 0
    1dc4:	81 e0       	ldi	r24, 0x01	; 1
    1dc6:	90 e0       	ldi	r25, 0x00	; 0
    1dc8:	02 2e       	mov	r0, r18
    1dca:	02 c0       	rjmp	.+4      	; 0x1dd0 <MDIO_u8SetPinValue+0x1de>
    1dcc:	88 0f       	add	r24, r24
    1dce:	99 1f       	adc	r25, r25
    1dd0:	0a 94       	dec	r0
    1dd2:	e2 f7       	brpl	.-8      	; 0x1dcc <MDIO_u8SetPinValue+0x1da>
    1dd4:	80 95       	com	r24
    1dd6:	84 23       	and	r24, r20
    1dd8:	8c 93       	st	X, r24
    1dda:	16 c0       	rjmp	.+44     	; 0x1e08 <MDIO_u8SetPinValue+0x216>
			case(MDIO_U8_PORTD):CLEAR_BIT(MDIO_U8_PORTD_REG,Copy_u8PinID);break;
    1ddc:	a2 e3       	ldi	r26, 0x32	; 50
    1dde:	b0 e0       	ldi	r27, 0x00	; 0
    1de0:	e2 e3       	ldi	r30, 0x32	; 50
    1de2:	f0 e0       	ldi	r31, 0x00	; 0
    1de4:	80 81       	ld	r24, Z
    1de6:	48 2f       	mov	r20, r24
    1de8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dea:	28 2f       	mov	r18, r24
    1dec:	30 e0       	ldi	r19, 0x00	; 0
    1dee:	81 e0       	ldi	r24, 0x01	; 1
    1df0:	90 e0       	ldi	r25, 0x00	; 0
    1df2:	02 2e       	mov	r0, r18
    1df4:	02 c0       	rjmp	.+4      	; 0x1dfa <MDIO_u8SetPinValue+0x208>
    1df6:	88 0f       	add	r24, r24
    1df8:	99 1f       	adc	r25, r25
    1dfa:	0a 94       	dec	r0
    1dfc:	e2 f7       	brpl	.-8      	; 0x1df6 <MDIO_u8SetPinValue+0x204>
    1dfe:	80 95       	com	r24
    1e00:	84 23       	and	r24, r20
    1e02:	8c 93       	st	X, r24
    1e04:	01 c0       	rjmp	.+2      	; 0x1e08 <MDIO_u8SetPinValue+0x216>
			}
			break;
		default:Local_u8ErrorState=STD_TYPES_NOK;
    1e06:	19 82       	std	Y+1, r1	; 0x01
		}
	}
	return Local_u8ErrorState;
    1e08:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e0a:	2a 96       	adiw	r28, 0x0a	; 10
    1e0c:	0f b6       	in	r0, 0x3f	; 63
    1e0e:	f8 94       	cli
    1e10:	de bf       	out	0x3e, r29	; 62
    1e12:	0f be       	out	0x3f, r0	; 63
    1e14:	cd bf       	out	0x3d, r28	; 61
    1e16:	cf 91       	pop	r28
    1e18:	df 91       	pop	r29
    1e1a:	08 95       	ret

00001e1c <MDIO_u8GetPinValue>:
u8 MDIO_u8GetPinValue(u8 Copy_u8PortID , u8 Copy_u8PinID , u8 * Copy_Pu8PinValue){
    1e1c:	df 93       	push	r29
    1e1e:	cf 93       	push	r28
    1e20:	cd b7       	in	r28, 0x3d	; 61
    1e22:	de b7       	in	r29, 0x3e	; 62
    1e24:	27 97       	sbiw	r28, 0x07	; 7
    1e26:	0f b6       	in	r0, 0x3f	; 63
    1e28:	f8 94       	cli
    1e2a:	de bf       	out	0x3e, r29	; 62
    1e2c:	0f be       	out	0x3f, r0	; 63
    1e2e:	cd bf       	out	0x3d, r28	; 61
    1e30:	8a 83       	std	Y+2, r24	; 0x02
    1e32:	6b 83       	std	Y+3, r22	; 0x03
    1e34:	5d 83       	std	Y+5, r21	; 0x05
    1e36:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState;
	if((Copy_u8PinID <= MDIO_U8_PIN_7) && (Copy_u8PortID <= MDIO_U8_PORTD) && (Copy_Pu8PinValue != STD_TYPE_NULL)){
    1e38:	8b 81       	ldd	r24, Y+3	; 0x03
    1e3a:	88 30       	cpi	r24, 0x08	; 8
    1e3c:	08 f0       	brcs	.+2      	; 0x1e40 <MDIO_u8GetPinValue+0x24>
    1e3e:	7b c0       	rjmp	.+246    	; 0x1f36 <MDIO_u8GetPinValue+0x11a>
    1e40:	8a 81       	ldd	r24, Y+2	; 0x02
    1e42:	84 30       	cpi	r24, 0x04	; 4
    1e44:	08 f0       	brcs	.+2      	; 0x1e48 <MDIO_u8GetPinValue+0x2c>
    1e46:	77 c0       	rjmp	.+238    	; 0x1f36 <MDIO_u8GetPinValue+0x11a>
    1e48:	8c 81       	ldd	r24, Y+4	; 0x04
    1e4a:	9d 81       	ldd	r25, Y+5	; 0x05
    1e4c:	00 97       	sbiw	r24, 0x00	; 0
    1e4e:	09 f4       	brne	.+2      	; 0x1e52 <MDIO_u8GetPinValue+0x36>
    1e50:	72 c0       	rjmp	.+228    	; 0x1f36 <MDIO_u8GetPinValue+0x11a>
		Local_u8ErrorState = 1;
    1e52:	81 e0       	ldi	r24, 0x01	; 1
    1e54:	89 83       	std	Y+1, r24	; 0x01
		switch(Copy_u8PortID){
    1e56:	8a 81       	ldd	r24, Y+2	; 0x02
    1e58:	28 2f       	mov	r18, r24
    1e5a:	30 e0       	ldi	r19, 0x00	; 0
    1e5c:	3f 83       	std	Y+7, r19	; 0x07
    1e5e:	2e 83       	std	Y+6, r18	; 0x06
    1e60:	4e 81       	ldd	r20, Y+6	; 0x06
    1e62:	5f 81       	ldd	r21, Y+7	; 0x07
    1e64:	41 30       	cpi	r20, 0x01	; 1
    1e66:	51 05       	cpc	r21, r1
    1e68:	59 f1       	breq	.+86     	; 0x1ec0 <MDIO_u8GetPinValue+0xa4>
    1e6a:	8e 81       	ldd	r24, Y+6	; 0x06
    1e6c:	9f 81       	ldd	r25, Y+7	; 0x07
    1e6e:	82 30       	cpi	r24, 0x02	; 2
    1e70:	91 05       	cpc	r25, r1
    1e72:	34 f4       	brge	.+12     	; 0x1e80 <MDIO_u8GetPinValue+0x64>
    1e74:	2e 81       	ldd	r18, Y+6	; 0x06
    1e76:	3f 81       	ldd	r19, Y+7	; 0x07
    1e78:	21 15       	cp	r18, r1
    1e7a:	31 05       	cpc	r19, r1
    1e7c:	69 f0       	breq	.+26     	; 0x1e98 <MDIO_u8GetPinValue+0x7c>
    1e7e:	5b c0       	rjmp	.+182    	; 0x1f36 <MDIO_u8GetPinValue+0x11a>
    1e80:	4e 81       	ldd	r20, Y+6	; 0x06
    1e82:	5f 81       	ldd	r21, Y+7	; 0x07
    1e84:	42 30       	cpi	r20, 0x02	; 2
    1e86:	51 05       	cpc	r21, r1
    1e88:	79 f1       	breq	.+94     	; 0x1ee8 <MDIO_u8GetPinValue+0xcc>
    1e8a:	8e 81       	ldd	r24, Y+6	; 0x06
    1e8c:	9f 81       	ldd	r25, Y+7	; 0x07
    1e8e:	83 30       	cpi	r24, 0x03	; 3
    1e90:	91 05       	cpc	r25, r1
    1e92:	09 f4       	brne	.+2      	; 0x1e96 <MDIO_u8GetPinValue+0x7a>
    1e94:	3d c0       	rjmp	.+122    	; 0x1f10 <MDIO_u8GetPinValue+0xf4>
    1e96:	4f c0       	rjmp	.+158    	; 0x1f36 <MDIO_u8GetPinValue+0x11a>
		case(MDIO_U8_PORTA):(* Copy_Pu8PinValue )= GET_BIT(MDIO_U8_PINA,Copy_u8PinID);break;
    1e98:	e9 e3       	ldi	r30, 0x39	; 57
    1e9a:	f0 e0       	ldi	r31, 0x00	; 0
    1e9c:	80 81       	ld	r24, Z
    1e9e:	28 2f       	mov	r18, r24
    1ea0:	30 e0       	ldi	r19, 0x00	; 0
    1ea2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ea4:	88 2f       	mov	r24, r24
    1ea6:	90 e0       	ldi	r25, 0x00	; 0
    1ea8:	a9 01       	movw	r20, r18
    1eaa:	02 c0       	rjmp	.+4      	; 0x1eb0 <MDIO_u8GetPinValue+0x94>
    1eac:	55 95       	asr	r21
    1eae:	47 95       	ror	r20
    1eb0:	8a 95       	dec	r24
    1eb2:	e2 f7       	brpl	.-8      	; 0x1eac <MDIO_u8GetPinValue+0x90>
    1eb4:	ca 01       	movw	r24, r20
    1eb6:	81 70       	andi	r24, 0x01	; 1
    1eb8:	ec 81       	ldd	r30, Y+4	; 0x04
    1eba:	fd 81       	ldd	r31, Y+5	; 0x05
    1ebc:	80 83       	st	Z, r24
    1ebe:	3b c0       	rjmp	.+118    	; 0x1f36 <MDIO_u8GetPinValue+0x11a>
		case(MDIO_U8_PORTB):(* Copy_Pu8PinValue )= GET_BIT(MDIO_U8_PINB,Copy_u8PinID);break;
    1ec0:	e6 e3       	ldi	r30, 0x36	; 54
    1ec2:	f0 e0       	ldi	r31, 0x00	; 0
    1ec4:	80 81       	ld	r24, Z
    1ec6:	28 2f       	mov	r18, r24
    1ec8:	30 e0       	ldi	r19, 0x00	; 0
    1eca:	8b 81       	ldd	r24, Y+3	; 0x03
    1ecc:	88 2f       	mov	r24, r24
    1ece:	90 e0       	ldi	r25, 0x00	; 0
    1ed0:	a9 01       	movw	r20, r18
    1ed2:	02 c0       	rjmp	.+4      	; 0x1ed8 <MDIO_u8GetPinValue+0xbc>
    1ed4:	55 95       	asr	r21
    1ed6:	47 95       	ror	r20
    1ed8:	8a 95       	dec	r24
    1eda:	e2 f7       	brpl	.-8      	; 0x1ed4 <MDIO_u8GetPinValue+0xb8>
    1edc:	ca 01       	movw	r24, r20
    1ede:	81 70       	andi	r24, 0x01	; 1
    1ee0:	ec 81       	ldd	r30, Y+4	; 0x04
    1ee2:	fd 81       	ldd	r31, Y+5	; 0x05
    1ee4:	80 83       	st	Z, r24
    1ee6:	27 c0       	rjmp	.+78     	; 0x1f36 <MDIO_u8GetPinValue+0x11a>
		case(MDIO_U8_PORTC):(* Copy_Pu8PinValue )= GET_BIT(MDIO_U8_PINC,Copy_u8PinID);break;
    1ee8:	e3 e3       	ldi	r30, 0x33	; 51
    1eea:	f0 e0       	ldi	r31, 0x00	; 0
    1eec:	80 81       	ld	r24, Z
    1eee:	28 2f       	mov	r18, r24
    1ef0:	30 e0       	ldi	r19, 0x00	; 0
    1ef2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ef4:	88 2f       	mov	r24, r24
    1ef6:	90 e0       	ldi	r25, 0x00	; 0
    1ef8:	a9 01       	movw	r20, r18
    1efa:	02 c0       	rjmp	.+4      	; 0x1f00 <MDIO_u8GetPinValue+0xe4>
    1efc:	55 95       	asr	r21
    1efe:	47 95       	ror	r20
    1f00:	8a 95       	dec	r24
    1f02:	e2 f7       	brpl	.-8      	; 0x1efc <MDIO_u8GetPinValue+0xe0>
    1f04:	ca 01       	movw	r24, r20
    1f06:	81 70       	andi	r24, 0x01	; 1
    1f08:	ec 81       	ldd	r30, Y+4	; 0x04
    1f0a:	fd 81       	ldd	r31, Y+5	; 0x05
    1f0c:	80 83       	st	Z, r24
    1f0e:	13 c0       	rjmp	.+38     	; 0x1f36 <MDIO_u8GetPinValue+0x11a>
		case(MDIO_U8_PORTD):(* Copy_Pu8PinValue )= GET_BIT(MDIO_U8_PIND,Copy_u8PinID);break;
    1f10:	e0 e3       	ldi	r30, 0x30	; 48
    1f12:	f0 e0       	ldi	r31, 0x00	; 0
    1f14:	80 81       	ld	r24, Z
    1f16:	28 2f       	mov	r18, r24
    1f18:	30 e0       	ldi	r19, 0x00	; 0
    1f1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f1c:	88 2f       	mov	r24, r24
    1f1e:	90 e0       	ldi	r25, 0x00	; 0
    1f20:	a9 01       	movw	r20, r18
    1f22:	02 c0       	rjmp	.+4      	; 0x1f28 <MDIO_u8GetPinValue+0x10c>
    1f24:	55 95       	asr	r21
    1f26:	47 95       	ror	r20
    1f28:	8a 95       	dec	r24
    1f2a:	e2 f7       	brpl	.-8      	; 0x1f24 <MDIO_u8GetPinValue+0x108>
    1f2c:	ca 01       	movw	r24, r20
    1f2e:	81 70       	andi	r24, 0x01	; 1
    1f30:	ec 81       	ldd	r30, Y+4	; 0x04
    1f32:	fd 81       	ldd	r31, Y+5	; 0x05
    1f34:	80 83       	st	Z, r24
		}
	}
	return Local_u8ErrorState;
    1f36:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f38:	27 96       	adiw	r28, 0x07	; 7
    1f3a:	0f b6       	in	r0, 0x3f	; 63
    1f3c:	f8 94       	cli
    1f3e:	de bf       	out	0x3e, r29	; 62
    1f40:	0f be       	out	0x3f, r0	; 63
    1f42:	cd bf       	out	0x3d, r28	; 61
    1f44:	cf 91       	pop	r28
    1f46:	df 91       	pop	r29
    1f48:	08 95       	ret

00001f4a <MDIO_u8GetPortDirection>:
u8 MDIO_u8GetPortDirection(u8 Copy_u8PortID ,  u8 Copy_u8PortDirection){
    1f4a:	df 93       	push	r29
    1f4c:	cf 93       	push	r28
    1f4e:	cd b7       	in	r28, 0x3d	; 61
    1f50:	de b7       	in	r29, 0x3e	; 62
    1f52:	2b 97       	sbiw	r28, 0x0b	; 11
    1f54:	0f b6       	in	r0, 0x3f	; 63
    1f56:	f8 94       	cli
    1f58:	de bf       	out	0x3e, r29	; 62
    1f5a:	0f be       	out	0x3f, r0	; 63
    1f5c:	cd bf       	out	0x3d, r28	; 61
    1f5e:	8a 83       	std	Y+2, r24	; 0x02
    1f60:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_NOK;
    1f62:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8PortID <= MDIO_U8_PORTD){
    1f64:	8a 81       	ldd	r24, Y+2	; 0x02
    1f66:	84 30       	cpi	r24, 0x04	; 4
    1f68:	08 f0       	brcs	.+2      	; 0x1f6c <MDIO_u8GetPortDirection+0x22>
    1f6a:	ba c0       	rjmp	.+372    	; 0x20e0 <MDIO_u8GetPortDirection+0x196>
		Local_u8ErrorState = STD_TYPES_OK;
    1f6c:	81 e0       	ldi	r24, 0x01	; 1
    1f6e:	89 83       	std	Y+1, r24	; 0x01
		switch(Copy_u8PortDirection){
    1f70:	8b 81       	ldd	r24, Y+3	; 0x03
    1f72:	28 2f       	mov	r18, r24
    1f74:	30 e0       	ldi	r19, 0x00	; 0
    1f76:	3b 87       	std	Y+11, r19	; 0x0b
    1f78:	2a 87       	std	Y+10, r18	; 0x0a
    1f7a:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f7c:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f7e:	81 30       	cpi	r24, 0x01	; 1
    1f80:	91 05       	cpc	r25, r1
    1f82:	09 f4       	brne	.+2      	; 0x1f86 <MDIO_u8GetPortDirection+0x3c>
    1f84:	3e c0       	rjmp	.+124    	; 0x2002 <MDIO_u8GetPortDirection+0xb8>
    1f86:	2a 85       	ldd	r18, Y+10	; 0x0a
    1f88:	3b 85       	ldd	r19, Y+11	; 0x0b
    1f8a:	22 30       	cpi	r18, 0x02	; 2
    1f8c:	31 05       	cpc	r19, r1
    1f8e:	09 f4       	brne	.+2      	; 0x1f92 <MDIO_u8GetPortDirection+0x48>
    1f90:	67 c0       	rjmp	.+206    	; 0x2060 <MDIO_u8GetPortDirection+0x116>
    1f92:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f94:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f96:	00 97       	sbiw	r24, 0x00	; 0
    1f98:	09 f0       	breq	.+2      	; 0x1f9c <MDIO_u8GetPortDirection+0x52>
    1f9a:	a1 c0       	rjmp	.+322    	; 0x20de <MDIO_u8GetPortDirection+0x194>
		case(MDIO_U8_OUTPUT):
			switch(Copy_u8PortID){
    1f9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f9e:	28 2f       	mov	r18, r24
    1fa0:	30 e0       	ldi	r19, 0x00	; 0
    1fa2:	39 87       	std	Y+9, r19	; 0x09
    1fa4:	28 87       	std	Y+8, r18	; 0x08
    1fa6:	88 85       	ldd	r24, Y+8	; 0x08
    1fa8:	99 85       	ldd	r25, Y+9	; 0x09
    1faa:	81 30       	cpi	r24, 0x01	; 1
    1fac:	91 05       	cpc	r25, r1
    1fae:	d1 f0       	breq	.+52     	; 0x1fe4 <MDIO_u8GetPortDirection+0x9a>
    1fb0:	28 85       	ldd	r18, Y+8	; 0x08
    1fb2:	39 85       	ldd	r19, Y+9	; 0x09
    1fb4:	22 30       	cpi	r18, 0x02	; 2
    1fb6:	31 05       	cpc	r19, r1
    1fb8:	2c f4       	brge	.+10     	; 0x1fc4 <MDIO_u8GetPortDirection+0x7a>
    1fba:	88 85       	ldd	r24, Y+8	; 0x08
    1fbc:	99 85       	ldd	r25, Y+9	; 0x09
    1fbe:	00 97       	sbiw	r24, 0x00	; 0
    1fc0:	61 f0       	breq	.+24     	; 0x1fda <MDIO_u8GetPortDirection+0x90>
    1fc2:	8e c0       	rjmp	.+284    	; 0x20e0 <MDIO_u8GetPortDirection+0x196>
    1fc4:	28 85       	ldd	r18, Y+8	; 0x08
    1fc6:	39 85       	ldd	r19, Y+9	; 0x09
    1fc8:	22 30       	cpi	r18, 0x02	; 2
    1fca:	31 05       	cpc	r19, r1
    1fcc:	81 f0       	breq	.+32     	; 0x1fee <MDIO_u8GetPortDirection+0xa4>
    1fce:	88 85       	ldd	r24, Y+8	; 0x08
    1fd0:	99 85       	ldd	r25, Y+9	; 0x09
    1fd2:	83 30       	cpi	r24, 0x03	; 3
    1fd4:	91 05       	cpc	r25, r1
    1fd6:	81 f0       	breq	.+32     	; 0x1ff8 <MDIO_u8GetPortDirection+0xae>
    1fd8:	83 c0       	rjmp	.+262    	; 0x20e0 <MDIO_u8GetPortDirection+0x196>
			case(MDIO_U8_PORTA):MDIO_U8_DDRA = 0xFF;break;
    1fda:	ea e3       	ldi	r30, 0x3A	; 58
    1fdc:	f0 e0       	ldi	r31, 0x00	; 0
    1fde:	8f ef       	ldi	r24, 0xFF	; 255
    1fe0:	80 83       	st	Z, r24
    1fe2:	7e c0       	rjmp	.+252    	; 0x20e0 <MDIO_u8GetPortDirection+0x196>
			case(MDIO_U8_PORTB):MDIO_U8_DDRB = 0xFF;break;
    1fe4:	e7 e3       	ldi	r30, 0x37	; 55
    1fe6:	f0 e0       	ldi	r31, 0x00	; 0
    1fe8:	8f ef       	ldi	r24, 0xFF	; 255
    1fea:	80 83       	st	Z, r24
    1fec:	79 c0       	rjmp	.+242    	; 0x20e0 <MDIO_u8GetPortDirection+0x196>
			case(MDIO_U8_PORTC):MDIO_U8_DDRC = 0xFF;break;
    1fee:	e4 e3       	ldi	r30, 0x34	; 52
    1ff0:	f0 e0       	ldi	r31, 0x00	; 0
    1ff2:	8f ef       	ldi	r24, 0xFF	; 255
    1ff4:	80 83       	st	Z, r24
    1ff6:	74 c0       	rjmp	.+232    	; 0x20e0 <MDIO_u8GetPortDirection+0x196>
			case(MDIO_U8_PORTD):MDIO_U8_DDRD = 0xFF;break;
    1ff8:	e1 e3       	ldi	r30, 0x31	; 49
    1ffa:	f0 e0       	ldi	r31, 0x00	; 0
    1ffc:	8f ef       	ldi	r24, 0xFF	; 255
    1ffe:	80 83       	st	Z, r24
    2000:	6f c0       	rjmp	.+222    	; 0x20e0 <MDIO_u8GetPortDirection+0x196>
			}
			break;
		case(MDIO_U8_INPUT_FLOATING):
			switch(Copy_u8PortID){
    2002:	8a 81       	ldd	r24, Y+2	; 0x02
    2004:	28 2f       	mov	r18, r24
    2006:	30 e0       	ldi	r19, 0x00	; 0
    2008:	3f 83       	std	Y+7, r19	; 0x07
    200a:	2e 83       	std	Y+6, r18	; 0x06
    200c:	8e 81       	ldd	r24, Y+6	; 0x06
    200e:	9f 81       	ldd	r25, Y+7	; 0x07
    2010:	81 30       	cpi	r24, 0x01	; 1
    2012:	91 05       	cpc	r25, r1
    2014:	c9 f0       	breq	.+50     	; 0x2048 <MDIO_u8GetPortDirection+0xfe>
    2016:	2e 81       	ldd	r18, Y+6	; 0x06
    2018:	3f 81       	ldd	r19, Y+7	; 0x07
    201a:	22 30       	cpi	r18, 0x02	; 2
    201c:	31 05       	cpc	r19, r1
    201e:	2c f4       	brge	.+10     	; 0x202a <MDIO_u8GetPortDirection+0xe0>
    2020:	8e 81       	ldd	r24, Y+6	; 0x06
    2022:	9f 81       	ldd	r25, Y+7	; 0x07
    2024:	00 97       	sbiw	r24, 0x00	; 0
    2026:	61 f0       	breq	.+24     	; 0x2040 <MDIO_u8GetPortDirection+0xf6>
    2028:	5b c0       	rjmp	.+182    	; 0x20e0 <MDIO_u8GetPortDirection+0x196>
    202a:	2e 81       	ldd	r18, Y+6	; 0x06
    202c:	3f 81       	ldd	r19, Y+7	; 0x07
    202e:	22 30       	cpi	r18, 0x02	; 2
    2030:	31 05       	cpc	r19, r1
    2032:	71 f0       	breq	.+28     	; 0x2050 <MDIO_u8GetPortDirection+0x106>
    2034:	8e 81       	ldd	r24, Y+6	; 0x06
    2036:	9f 81       	ldd	r25, Y+7	; 0x07
    2038:	83 30       	cpi	r24, 0x03	; 3
    203a:	91 05       	cpc	r25, r1
    203c:	69 f0       	breq	.+26     	; 0x2058 <MDIO_u8GetPortDirection+0x10e>
    203e:	50 c0       	rjmp	.+160    	; 0x20e0 <MDIO_u8GetPortDirection+0x196>
			case(MDIO_U8_PORTA):MDIO_U8_DDRA = 0x00;break;
    2040:	ea e3       	ldi	r30, 0x3A	; 58
    2042:	f0 e0       	ldi	r31, 0x00	; 0
    2044:	10 82       	st	Z, r1
    2046:	4c c0       	rjmp	.+152    	; 0x20e0 <MDIO_u8GetPortDirection+0x196>
			case(MDIO_U8_PORTB):MDIO_U8_DDRB = 0x00;break;
    2048:	e7 e3       	ldi	r30, 0x37	; 55
    204a:	f0 e0       	ldi	r31, 0x00	; 0
    204c:	10 82       	st	Z, r1
    204e:	48 c0       	rjmp	.+144    	; 0x20e0 <MDIO_u8GetPortDirection+0x196>
			case(MDIO_U8_PORTC):MDIO_U8_DDRC = 0x00;break;
    2050:	e4 e3       	ldi	r30, 0x34	; 52
    2052:	f0 e0       	ldi	r31, 0x00	; 0
    2054:	10 82       	st	Z, r1
    2056:	44 c0       	rjmp	.+136    	; 0x20e0 <MDIO_u8GetPortDirection+0x196>
			case(MDIO_U8_PORTD):MDIO_U8_DDRD = 0x00;break;
    2058:	e1 e3       	ldi	r30, 0x31	; 49
    205a:	f0 e0       	ldi	r31, 0x00	; 0
    205c:	10 82       	st	Z, r1
    205e:	40 c0       	rjmp	.+128    	; 0x20e0 <MDIO_u8GetPortDirection+0x196>
			}
		break;
		case(MDIO_U8_INPUT_PULLED_UP):
			switch(Copy_u8PortID){
    2060:	8a 81       	ldd	r24, Y+2	; 0x02
    2062:	28 2f       	mov	r18, r24
    2064:	30 e0       	ldi	r19, 0x00	; 0
    2066:	3d 83       	std	Y+5, r19	; 0x05
    2068:	2c 83       	std	Y+4, r18	; 0x04
    206a:	8c 81       	ldd	r24, Y+4	; 0x04
    206c:	9d 81       	ldd	r25, Y+5	; 0x05
    206e:	81 30       	cpi	r24, 0x01	; 1
    2070:	91 05       	cpc	r25, r1
    2072:	e9 f0       	breq	.+58     	; 0x20ae <MDIO_u8GetPortDirection+0x164>
    2074:	2c 81       	ldd	r18, Y+4	; 0x04
    2076:	3d 81       	ldd	r19, Y+5	; 0x05
    2078:	22 30       	cpi	r18, 0x02	; 2
    207a:	31 05       	cpc	r19, r1
    207c:	2c f4       	brge	.+10     	; 0x2088 <MDIO_u8GetPortDirection+0x13e>
    207e:	8c 81       	ldd	r24, Y+4	; 0x04
    2080:	9d 81       	ldd	r25, Y+5	; 0x05
    2082:	00 97       	sbiw	r24, 0x00	; 0
    2084:	61 f0       	breq	.+24     	; 0x209e <MDIO_u8GetPortDirection+0x154>
    2086:	2c c0       	rjmp	.+88     	; 0x20e0 <MDIO_u8GetPortDirection+0x196>
    2088:	2c 81       	ldd	r18, Y+4	; 0x04
    208a:	3d 81       	ldd	r19, Y+5	; 0x05
    208c:	22 30       	cpi	r18, 0x02	; 2
    208e:	31 05       	cpc	r19, r1
    2090:	b1 f0       	breq	.+44     	; 0x20be <MDIO_u8GetPortDirection+0x174>
    2092:	8c 81       	ldd	r24, Y+4	; 0x04
    2094:	9d 81       	ldd	r25, Y+5	; 0x05
    2096:	83 30       	cpi	r24, 0x03	; 3
    2098:	91 05       	cpc	r25, r1
    209a:	c9 f0       	breq	.+50     	; 0x20ce <MDIO_u8GetPortDirection+0x184>
    209c:	21 c0       	rjmp	.+66     	; 0x20e0 <MDIO_u8GetPortDirection+0x196>
			case(MDIO_U8_PORTA):MDIO_U8_DDRA = 0x00;MDIO_U8_PORTA_REG = 0xFF;break;
    209e:	ea e3       	ldi	r30, 0x3A	; 58
    20a0:	f0 e0       	ldi	r31, 0x00	; 0
    20a2:	10 82       	st	Z, r1
    20a4:	eb e3       	ldi	r30, 0x3B	; 59
    20a6:	f0 e0       	ldi	r31, 0x00	; 0
    20a8:	8f ef       	ldi	r24, 0xFF	; 255
    20aa:	80 83       	st	Z, r24
    20ac:	19 c0       	rjmp	.+50     	; 0x20e0 <MDIO_u8GetPortDirection+0x196>
			case(MDIO_U8_PORTB):MDIO_U8_DDRB = 0x00;MDIO_U8_PORTB_REG = 0xFF;break;
    20ae:	e7 e3       	ldi	r30, 0x37	; 55
    20b0:	f0 e0       	ldi	r31, 0x00	; 0
    20b2:	10 82       	st	Z, r1
    20b4:	e8 e3       	ldi	r30, 0x38	; 56
    20b6:	f0 e0       	ldi	r31, 0x00	; 0
    20b8:	8f ef       	ldi	r24, 0xFF	; 255
    20ba:	80 83       	st	Z, r24
    20bc:	11 c0       	rjmp	.+34     	; 0x20e0 <MDIO_u8GetPortDirection+0x196>
			case(MDIO_U8_PORTC):MDIO_U8_DDRC = 0x00;MDIO_U8_PORTC_REG = 0xFF;break;
    20be:	e4 e3       	ldi	r30, 0x34	; 52
    20c0:	f0 e0       	ldi	r31, 0x00	; 0
    20c2:	10 82       	st	Z, r1
    20c4:	e5 e3       	ldi	r30, 0x35	; 53
    20c6:	f0 e0       	ldi	r31, 0x00	; 0
    20c8:	8f ef       	ldi	r24, 0xFF	; 255
    20ca:	80 83       	st	Z, r24
    20cc:	09 c0       	rjmp	.+18     	; 0x20e0 <MDIO_u8GetPortDirection+0x196>
			case(MDIO_U8_PORTD):MDIO_U8_DDRD = 0x00;MDIO_U8_PORTD_REG = 0xFF;break;
    20ce:	e1 e3       	ldi	r30, 0x31	; 49
    20d0:	f0 e0       	ldi	r31, 0x00	; 0
    20d2:	10 82       	st	Z, r1
    20d4:	e2 e3       	ldi	r30, 0x32	; 50
    20d6:	f0 e0       	ldi	r31, 0x00	; 0
    20d8:	8f ef       	ldi	r24, 0xFF	; 255
    20da:	80 83       	st	Z, r24
    20dc:	01 c0       	rjmp	.+2      	; 0x20e0 <MDIO_u8GetPortDirection+0x196>
			}
		break;
		default:Local_u8ErrorState= STD_TYPES_NOK;
    20de:	19 82       	std	Y+1, r1	; 0x01
		}
	}
	return Local_u8ErrorState;
    20e0:	89 81       	ldd	r24, Y+1	; 0x01
}
    20e2:	2b 96       	adiw	r28, 0x0b	; 11
    20e4:	0f b6       	in	r0, 0x3f	; 63
    20e6:	f8 94       	cli
    20e8:	de bf       	out	0x3e, r29	; 62
    20ea:	0f be       	out	0x3f, r0	; 63
    20ec:	cd bf       	out	0x3d, r28	; 61
    20ee:	cf 91       	pop	r28
    20f0:	df 91       	pop	r29
    20f2:	08 95       	ret

000020f4 <MDIO_u8SetPortValue>:
u8 MDIO_u8SetPortValue(u8 Copy_u8PortID  , u8 Copy_u8PortValue){
    20f4:	df 93       	push	r29
    20f6:	cf 93       	push	r28
    20f8:	00 d0       	rcall	.+0      	; 0x20fa <MDIO_u8SetPortValue+0x6>
    20fa:	00 d0       	rcall	.+0      	; 0x20fc <MDIO_u8SetPortValue+0x8>
    20fc:	0f 92       	push	r0
    20fe:	cd b7       	in	r28, 0x3d	; 61
    2100:	de b7       	in	r29, 0x3e	; 62
    2102:	8a 83       	std	Y+2, r24	; 0x02
    2104:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState= STD_TYPES_NOK;
    2106:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8PortID <= MDIO_U8_PORTD){
    2108:	8a 81       	ldd	r24, Y+2	; 0x02
    210a:	84 30       	cpi	r24, 0x04	; 4
    210c:	a0 f5       	brcc	.+104    	; 0x2176 <MDIO_u8SetPortValue+0x82>
		Local_u8ErrorState = STD_TYPES_OK;
    210e:	81 e0       	ldi	r24, 0x01	; 1
    2110:	89 83       	std	Y+1, r24	; 0x01
		switch(Copy_u8PortID){
    2112:	8a 81       	ldd	r24, Y+2	; 0x02
    2114:	28 2f       	mov	r18, r24
    2116:	30 e0       	ldi	r19, 0x00	; 0
    2118:	3d 83       	std	Y+5, r19	; 0x05
    211a:	2c 83       	std	Y+4, r18	; 0x04
    211c:	8c 81       	ldd	r24, Y+4	; 0x04
    211e:	9d 81       	ldd	r25, Y+5	; 0x05
    2120:	81 30       	cpi	r24, 0x01	; 1
    2122:	91 05       	cpc	r25, r1
    2124:	d1 f0       	breq	.+52     	; 0x215a <MDIO_u8SetPortValue+0x66>
    2126:	2c 81       	ldd	r18, Y+4	; 0x04
    2128:	3d 81       	ldd	r19, Y+5	; 0x05
    212a:	22 30       	cpi	r18, 0x02	; 2
    212c:	31 05       	cpc	r19, r1
    212e:	2c f4       	brge	.+10     	; 0x213a <MDIO_u8SetPortValue+0x46>
    2130:	8c 81       	ldd	r24, Y+4	; 0x04
    2132:	9d 81       	ldd	r25, Y+5	; 0x05
    2134:	00 97       	sbiw	r24, 0x00	; 0
    2136:	61 f0       	breq	.+24     	; 0x2150 <MDIO_u8SetPortValue+0x5c>
    2138:	1e c0       	rjmp	.+60     	; 0x2176 <MDIO_u8SetPortValue+0x82>
    213a:	2c 81       	ldd	r18, Y+4	; 0x04
    213c:	3d 81       	ldd	r19, Y+5	; 0x05
    213e:	22 30       	cpi	r18, 0x02	; 2
    2140:	31 05       	cpc	r19, r1
    2142:	81 f0       	breq	.+32     	; 0x2164 <MDIO_u8SetPortValue+0x70>
    2144:	8c 81       	ldd	r24, Y+4	; 0x04
    2146:	9d 81       	ldd	r25, Y+5	; 0x05
    2148:	83 30       	cpi	r24, 0x03	; 3
    214a:	91 05       	cpc	r25, r1
    214c:	81 f0       	breq	.+32     	; 0x216e <MDIO_u8SetPortValue+0x7a>
    214e:	13 c0       	rjmp	.+38     	; 0x2176 <MDIO_u8SetPortValue+0x82>
		case(MDIO_U8_PORTA):MDIO_U8_PORTA_REG = Copy_u8PortValue;break;
    2150:	eb e3       	ldi	r30, 0x3B	; 59
    2152:	f0 e0       	ldi	r31, 0x00	; 0
    2154:	8b 81       	ldd	r24, Y+3	; 0x03
    2156:	80 83       	st	Z, r24
    2158:	0e c0       	rjmp	.+28     	; 0x2176 <MDIO_u8SetPortValue+0x82>
		case(MDIO_U8_PORTB):MDIO_U8_PORTB_REG = Copy_u8PortValue;break;
    215a:	e8 e3       	ldi	r30, 0x38	; 56
    215c:	f0 e0       	ldi	r31, 0x00	; 0
    215e:	8b 81       	ldd	r24, Y+3	; 0x03
    2160:	80 83       	st	Z, r24
    2162:	09 c0       	rjmp	.+18     	; 0x2176 <MDIO_u8SetPortValue+0x82>
		case(MDIO_U8_PORTC):MDIO_U8_PORTC_REG = Copy_u8PortValue;break;
    2164:	e5 e3       	ldi	r30, 0x35	; 53
    2166:	f0 e0       	ldi	r31, 0x00	; 0
    2168:	8b 81       	ldd	r24, Y+3	; 0x03
    216a:	80 83       	st	Z, r24
    216c:	04 c0       	rjmp	.+8      	; 0x2176 <MDIO_u8SetPortValue+0x82>
		case(MDIO_U8_PORTD):MDIO_U8_PORTD_REG = Copy_u8PortValue;break;
    216e:	e2 e3       	ldi	r30, 0x32	; 50
    2170:	f0 e0       	ldi	r31, 0x00	; 0
    2172:	8b 81       	ldd	r24, Y+3	; 0x03
    2174:	80 83       	st	Z, r24
		}
	}
	return Local_u8ErrorState;
    2176:	89 81       	ldd	r24, Y+1	; 0x01
}
    2178:	0f 90       	pop	r0
    217a:	0f 90       	pop	r0
    217c:	0f 90       	pop	r0
    217e:	0f 90       	pop	r0
    2180:	0f 90       	pop	r0
    2182:	cf 91       	pop	r28
    2184:	df 91       	pop	r29
    2186:	08 95       	ret

00002188 <MDIO_u8GetPortValue>:
u8 MDIO_u8GetPortValue(u8 Copy_u8PortID , u8 * Copy_u8PortValue){
    2188:	df 93       	push	r29
    218a:	cf 93       	push	r28
    218c:	00 d0       	rcall	.+0      	; 0x218e <MDIO_u8GetPortValue+0x6>
    218e:	00 d0       	rcall	.+0      	; 0x2190 <MDIO_u8GetPortValue+0x8>
    2190:	00 d0       	rcall	.+0      	; 0x2192 <MDIO_u8GetPortValue+0xa>
    2192:	cd b7       	in	r28, 0x3d	; 61
    2194:	de b7       	in	r29, 0x3e	; 62
    2196:	8a 83       	std	Y+2, r24	; 0x02
    2198:	7c 83       	std	Y+4, r23	; 0x04
    219a:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState= STD_TYPES_NOK;
    219c:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_u8PortID <= MDIO_U8_PORTD) && (Copy_u8PortValue != STD_TYPE_NULL)){
    219e:	8a 81       	ldd	r24, Y+2	; 0x02
    21a0:	84 30       	cpi	r24, 0x04	; 4
    21a2:	08 f0       	brcs	.+2      	; 0x21a6 <MDIO_u8GetPortValue+0x1e>
    21a4:	40 c0       	rjmp	.+128    	; 0x2226 <MDIO_u8GetPortValue+0x9e>
    21a6:	8b 81       	ldd	r24, Y+3	; 0x03
    21a8:	9c 81       	ldd	r25, Y+4	; 0x04
    21aa:	00 97       	sbiw	r24, 0x00	; 0
    21ac:	e1 f1       	breq	.+120    	; 0x2226 <MDIO_u8GetPortValue+0x9e>
		Local_u8ErrorState = STD_TYPES_OK;
    21ae:	81 e0       	ldi	r24, 0x01	; 1
    21b0:	89 83       	std	Y+1, r24	; 0x01
		switch(Copy_u8PortID){
    21b2:	8a 81       	ldd	r24, Y+2	; 0x02
    21b4:	28 2f       	mov	r18, r24
    21b6:	30 e0       	ldi	r19, 0x00	; 0
    21b8:	3e 83       	std	Y+6, r19	; 0x06
    21ba:	2d 83       	std	Y+5, r18	; 0x05
    21bc:	8d 81       	ldd	r24, Y+5	; 0x05
    21be:	9e 81       	ldd	r25, Y+6	; 0x06
    21c0:	81 30       	cpi	r24, 0x01	; 1
    21c2:	91 05       	cpc	r25, r1
    21c4:	e1 f0       	breq	.+56     	; 0x21fe <MDIO_u8GetPortValue+0x76>
    21c6:	2d 81       	ldd	r18, Y+5	; 0x05
    21c8:	3e 81       	ldd	r19, Y+6	; 0x06
    21ca:	22 30       	cpi	r18, 0x02	; 2
    21cc:	31 05       	cpc	r19, r1
    21ce:	2c f4       	brge	.+10     	; 0x21da <MDIO_u8GetPortValue+0x52>
    21d0:	8d 81       	ldd	r24, Y+5	; 0x05
    21d2:	9e 81       	ldd	r25, Y+6	; 0x06
    21d4:	00 97       	sbiw	r24, 0x00	; 0
    21d6:	61 f0       	breq	.+24     	; 0x21f0 <MDIO_u8GetPortValue+0x68>
    21d8:	26 c0       	rjmp	.+76     	; 0x2226 <MDIO_u8GetPortValue+0x9e>
    21da:	2d 81       	ldd	r18, Y+5	; 0x05
    21dc:	3e 81       	ldd	r19, Y+6	; 0x06
    21de:	22 30       	cpi	r18, 0x02	; 2
    21e0:	31 05       	cpc	r19, r1
    21e2:	a1 f0       	breq	.+40     	; 0x220c <MDIO_u8GetPortValue+0x84>
    21e4:	8d 81       	ldd	r24, Y+5	; 0x05
    21e6:	9e 81       	ldd	r25, Y+6	; 0x06
    21e8:	83 30       	cpi	r24, 0x03	; 3
    21ea:	91 05       	cpc	r25, r1
    21ec:	b1 f0       	breq	.+44     	; 0x221a <MDIO_u8GetPortValue+0x92>
    21ee:	1b c0       	rjmp	.+54     	; 0x2226 <MDIO_u8GetPortValue+0x9e>
		case(MDIO_U8_PORTA): * Copy_u8PortValue = MDIO_U8_PINA;break;
    21f0:	e9 e3       	ldi	r30, 0x39	; 57
    21f2:	f0 e0       	ldi	r31, 0x00	; 0
    21f4:	80 81       	ld	r24, Z
    21f6:	eb 81       	ldd	r30, Y+3	; 0x03
    21f8:	fc 81       	ldd	r31, Y+4	; 0x04
    21fa:	80 83       	st	Z, r24
    21fc:	14 c0       	rjmp	.+40     	; 0x2226 <MDIO_u8GetPortValue+0x9e>
		case(MDIO_U8_PORTB): * Copy_u8PortValue = MDIO_U8_PINB;break;
    21fe:	e6 e3       	ldi	r30, 0x36	; 54
    2200:	f0 e0       	ldi	r31, 0x00	; 0
    2202:	80 81       	ld	r24, Z
    2204:	eb 81       	ldd	r30, Y+3	; 0x03
    2206:	fc 81       	ldd	r31, Y+4	; 0x04
    2208:	80 83       	st	Z, r24
    220a:	0d c0       	rjmp	.+26     	; 0x2226 <MDIO_u8GetPortValue+0x9e>
		case(MDIO_U8_PORTC): * Copy_u8PortValue = MDIO_U8_PINC;break;
    220c:	e3 e3       	ldi	r30, 0x33	; 51
    220e:	f0 e0       	ldi	r31, 0x00	; 0
    2210:	80 81       	ld	r24, Z
    2212:	eb 81       	ldd	r30, Y+3	; 0x03
    2214:	fc 81       	ldd	r31, Y+4	; 0x04
    2216:	80 83       	st	Z, r24
    2218:	06 c0       	rjmp	.+12     	; 0x2226 <MDIO_u8GetPortValue+0x9e>
		case(MDIO_U8_PORTD): * Copy_u8PortValue = MDIO_U8_PIND;break;
    221a:	e0 e3       	ldi	r30, 0x30	; 48
    221c:	f0 e0       	ldi	r31, 0x00	; 0
    221e:	80 81       	ld	r24, Z
    2220:	eb 81       	ldd	r30, Y+3	; 0x03
    2222:	fc 81       	ldd	r31, Y+4	; 0x04
    2224:	80 83       	st	Z, r24
		}
	}
	return Local_u8ErrorState;
    2226:	89 81       	ldd	r24, Y+1	; 0x01
}
    2228:	26 96       	adiw	r28, 0x06	; 6
    222a:	0f b6       	in	r0, 0x3f	; 63
    222c:	f8 94       	cli
    222e:	de bf       	out	0x3e, r29	; 62
    2230:	0f be       	out	0x3f, r0	; 63
    2232:	cd bf       	out	0x3d, r28	; 61
    2234:	cf 91       	pop	r28
    2236:	df 91       	pop	r29
    2238:	08 95       	ret

0000223a <MDIO_U8INIT>:
u8 MDIO_U8INIT(void){
    223a:	df 93       	push	r29
    223c:	cf 93       	push	r28
    223e:	0f 92       	push	r0
    2240:	cd b7       	in	r28, 0x3d	; 61
    2242:	de b7       	in	r29, 0x3e	; 62
	/*PORT DIRECTIONS*/
	MDIO_U8_DDRA = PRIVATE_U8_CONC(MDIO_u8_PA7_DIRECTION , MDIO_u8_PA6_DIRECTION , MDIO_u8_PA5_DIRECTION , MDIO_u8_PA4_DIRECTION , MDIO_u8_PA3_DIRECTION, MDIO_u8_PA2_DIRECTION, MDIO_u8_PA1_DIRECTION ,MDIO_u8_PA0_DIRECTION);
    2244:	ea e3       	ldi	r30, 0x3A	; 58
    2246:	f0 e0       	ldi	r31, 0x00	; 0
    2248:	8f ef       	ldi	r24, 0xFF	; 255
    224a:	80 83       	st	Z, r24
	MDIO_U8_DDRB = PRIVATE_U8_CONC(MDIO_u8_PB7_DIRECTION , MDIO_u8_PB6_DIRECTION , MDIO_u8_PB5_DIRECTION , MDIO_u8_PB4_DIRECTION , MDIO_u8_PB3_DIRECTION, MDIO_u8_PB2_DIRECTION, MDIO_u8_PB1_DIRECTION ,MDIO_u8_PB0_DIRECTION);
    224c:	e7 e3       	ldi	r30, 0x37	; 55
    224e:	f0 e0       	ldi	r31, 0x00	; 0
    2250:	8f ea       	ldi	r24, 0xAF	; 175
    2252:	80 83       	st	Z, r24
	MDIO_U8_DDRC = PRIVATE_U8_CONC(MDIO_u8_PC7_DIRECTION , MDIO_u8_PC6_DIRECTION , MDIO_u8_PC5_DIRECTION , MDIO_u8_PC4_DIRECTION , MDIO_u8_PC3_DIRECTION, MDIO_u8_PC2_DIRECTION, MDIO_u8_PC1_DIRECTION ,MDIO_u8_PC0_DIRECTION);
    2254:	e4 e3       	ldi	r30, 0x34	; 52
    2256:	f0 e0       	ldi	r31, 0x00	; 0
    2258:	8f e0       	ldi	r24, 0x0F	; 15
    225a:	80 83       	st	Z, r24
	MDIO_U8_DDRD = PRIVATE_U8_CONC(MDIO_u8_PD7_DIRECTION , MDIO_u8_PD6_DIRECTION , MDIO_u8_PD5_DIRECTION , MDIO_u8_PD4_DIRECTION , MDIO_u8_PD3_DIRECTION, MDIO_u8_PD2_DIRECTION, MDIO_u8_PD1_DIRECTION ,MDIO_u8_PD0_DIRECTION);
    225c:	e1 e3       	ldi	r30, 0x31	; 49
    225e:	f0 e0       	ldi	r31, 0x00	; 0
    2260:	8f ef       	ldi	r24, 0xFF	; 255
    2262:	80 83       	st	Z, r24
	/*PORT VALUES*/
	MDIO_U8_PORTA_REG = PRIVATE_U8_CONC(MDIO_u8_PA7_VALUE , MDIO_u8_PA6_VALUE , MDIO_u8_PA5_VALUE , MDIO_u8_PA4_VALUE , MDIO_u8_PA3_VALUE , MDIO_u8_PA2_VALUE , MDIO_u8_PA1_VALUE , MDIO_u8_PA0_VALUE);
    2264:	eb e3       	ldi	r30, 0x3B	; 59
    2266:	f0 e0       	ldi	r31, 0x00	; 0
    2268:	10 82       	st	Z, r1
	MDIO_U8_PORTB_REG = PRIVATE_U8_CONC(MDIO_u8_PB7_VALUE , MDIO_u8_PB6_VALUE , MDIO_u8_PB5_VALUE , MDIO_u8_PB4_VALUE , MDIO_u8_PB3_VALUE , MDIO_u8_PB2_VALUE , MDIO_u8_PB1_VALUE , MDIO_u8_PB0_VALUE);
    226a:	e8 e3       	ldi	r30, 0x38	; 56
    226c:	f0 e0       	ldi	r31, 0x00	; 0
    226e:	80 e5       	ldi	r24, 0x50	; 80
    2270:	80 83       	st	Z, r24
	MDIO_U8_PORTC_REG = PRIVATE_U8_CONC(MDIO_u8_PC7_VALUE , MDIO_u8_PC6_VALUE , MDIO_u8_PC5_VALUE , MDIO_u8_PC4_VALUE , MDIO_u8_PC3_VALUE , MDIO_u8_PC2_VALUE , MDIO_u8_PC1_VALUE , MDIO_u8_PC0_VALUE);
    2272:	e5 e3       	ldi	r30, 0x35	; 53
    2274:	f0 e0       	ldi	r31, 0x00	; 0
    2276:	8f ef       	ldi	r24, 0xFF	; 255
    2278:	80 83       	st	Z, r24
	MDIO_U8_PORTD_REG = PRIVATE_U8_CONC(MDIO_u8_PD7_VALUE , MDIO_u8_PD6_VALUE , MDIO_u8_PD5_VALUE , MDIO_u8_PD4_VALUE , MDIO_u8_PD3_VALUE , MDIO_u8_PD2_VALUE , MDIO_u8_PD1_VALUE , MDIO_u8_PD0_VALUE);
    227a:	e2 e3       	ldi	r30, 0x32	; 50
    227c:	f0 e0       	ldi	r31, 0x00	; 0
    227e:	10 82       	st	Z, r1
}
    2280:	0f 90       	pop	r0
    2282:	cf 91       	pop	r28
    2284:	df 91       	pop	r29
    2286:	08 95       	ret

00002288 <MSPI_U8_MASTERInit>:
#include "MDIO_Interface.h"
#include "MSPI_Interface.h"
#include "MSPI_Config.h"
#include "MSPI_Private.h"

u8 MSPI_U8_MASTERInit(){
    2288:	df 93       	push	r29
    228a:	cf 93       	push	r28
    228c:	0f 92       	push	r0
    228e:	cd b7       	in	r28, 0x3d	; 61
    2290:	de b7       	in	r29, 0x3e	; 62
	u8 LocalErrorState = STD_TYPES_OK;
    2292:	81 e0       	ldi	r24, 0x01	; 1
    2294:	89 83       	std	Y+1, r24	; 0x01
	/*Enable SPI protocol pins*/
	SET_BIT(MSPI_SPCR_REG , 6);
    2296:	ad e2       	ldi	r26, 0x2D	; 45
    2298:	b0 e0       	ldi	r27, 0x00	; 0
    229a:	ed e2       	ldi	r30, 0x2D	; 45
    229c:	f0 e0       	ldi	r31, 0x00	; 0
    229e:	80 81       	ld	r24, Z
    22a0:	80 64       	ori	r24, 0x40	; 64
    22a2:	8c 93       	st	X, r24
	/*Choose data order option MSB OR LSB*/
	//MSPI_SPCR_REG = MSPI_SPCR_REG | MSPI_DataOrderOption
	SET_BIT(MSPI_SPCR_REG , 5);
    22a4:	ad e2       	ldi	r26, 0x2D	; 45
    22a6:	b0 e0       	ldi	r27, 0x00	; 0
    22a8:	ed e2       	ldi	r30, 0x2D	; 45
    22aa:	f0 e0       	ldi	r31, 0x00	; 0
    22ac:	80 81       	ld	r24, Z
    22ae:	80 62       	ori	r24, 0x20	; 32
    22b0:	8c 93       	st	X, r24
	/*Master mode*/
	SET_BIT(MSPI_SPCR_REG , 4);
    22b2:	ad e2       	ldi	r26, 0x2D	; 45
    22b4:	b0 e0       	ldi	r27, 0x00	; 0
    22b6:	ed e2       	ldi	r30, 0x2D	; 45
    22b8:	f0 e0       	ldi	r31, 0x00	; 0
    22ba:	80 81       	ld	r24, Z
    22bc:	80 61       	ori	r24, 0x10	; 16
    22be:	8c 93       	st	X, r24
	/*clk polarity raising ==> falling*/
	SET_BIT(MSPI_SPCR_REG , 3);
    22c0:	ad e2       	ldi	r26, 0x2D	; 45
    22c2:	b0 e0       	ldi	r27, 0x00	; 0
    22c4:	ed e2       	ldi	r30, 0x2D	; 45
    22c6:	f0 e0       	ldi	r31, 0x00	; 0
    22c8:	80 81       	ld	r24, Z
    22ca:	88 60       	ori	r24, 0x08	; 8
    22cc:	8c 93       	st	X, r24
	/*clock phase setup ==>sample*/
	SET_BIT(MSPI_SPCR_REG , 2);
    22ce:	ad e2       	ldi	r26, 0x2D	; 45
    22d0:	b0 e0       	ldi	r27, 0x00	; 0
    22d2:	ed e2       	ldi	r30, 0x2D	; 45
    22d4:	f0 e0       	ldi	r31, 0x00	; 0
    22d6:	80 81       	ld	r24, Z
    22d8:	84 60       	ori	r24, 0x04	; 4
    22da:	8c 93       	st	X, r24
	/*Select clk ==> foc/128*/
	SET_BIT(MSPI_SPCR_REG , 1);
    22dc:	ad e2       	ldi	r26, 0x2D	; 45
    22de:	b0 e0       	ldi	r27, 0x00	; 0
    22e0:	ed e2       	ldi	r30, 0x2D	; 45
    22e2:	f0 e0       	ldi	r31, 0x00	; 0
    22e4:	80 81       	ld	r24, Z
    22e6:	82 60       	ori	r24, 0x02	; 2
    22e8:	8c 93       	st	X, r24
	SET_BIT(MSPI_SPCR_REG , 0);
    22ea:	ad e2       	ldi	r26, 0x2D	; 45
    22ec:	b0 e0       	ldi	r27, 0x00	; 0
    22ee:	ed e2       	ldi	r30, 0x2D	; 45
    22f0:	f0 e0       	ldi	r31, 0x00	; 0
    22f2:	80 81       	ld	r24, Z
    22f4:	81 60       	ori	r24, 0x01	; 1
    22f6:	8c 93       	st	X, r24
	return LocalErrorState;
    22f8:	89 81       	ldd	r24, Y+1	; 0x01

}
    22fa:	0f 90       	pop	r0
    22fc:	cf 91       	pop	r28
    22fe:	df 91       	pop	r29
    2300:	08 95       	ret

00002302 <MSPI_U8_SlaveInit>:
u8 MSPI_U8_SlaveInit(){
    2302:	df 93       	push	r29
    2304:	cf 93       	push	r28
    2306:	0f 92       	push	r0
    2308:	cd b7       	in	r28, 0x3d	; 61
    230a:	de b7       	in	r29, 0x3e	; 62
	u8 LocalErrorState = STD_TYPES_OK;
    230c:	81 e0       	ldi	r24, 0x01	; 1
    230e:	89 83       	std	Y+1, r24	; 0x01
	/*Enable SPI protocol pins*/
	SET_BIT(MSPI_SPCR_REG , 6);
    2310:	ad e2       	ldi	r26, 0x2D	; 45
    2312:	b0 e0       	ldi	r27, 0x00	; 0
    2314:	ed e2       	ldi	r30, 0x2D	; 45
    2316:	f0 e0       	ldi	r31, 0x00	; 0
    2318:	80 81       	ld	r24, Z
    231a:	80 64       	ori	r24, 0x40	; 64
    231c:	8c 93       	st	X, r24
	/*Choose data order option MSB OR LSB*/
	//MSPI_SPCR_REG = MSPI_SPCR_REG | MSPI_DataOrderOption
	SET_BIT(MSPI_SPCR_REG , 5);
    231e:	ad e2       	ldi	r26, 0x2D	; 45
    2320:	b0 e0       	ldi	r27, 0x00	; 0
    2322:	ed e2       	ldi	r30, 0x2D	; 45
    2324:	f0 e0       	ldi	r31, 0x00	; 0
    2326:	80 81       	ld	r24, Z
    2328:	80 62       	ori	r24, 0x20	; 32
    232a:	8c 93       	st	X, r24
	/*Slave mode*/
	CLEAR_BIT(MSPI_SPCR_REG , 4);
    232c:	ad e2       	ldi	r26, 0x2D	; 45
    232e:	b0 e0       	ldi	r27, 0x00	; 0
    2330:	ed e2       	ldi	r30, 0x2D	; 45
    2332:	f0 e0       	ldi	r31, 0x00	; 0
    2334:	80 81       	ld	r24, Z
    2336:	8f 7e       	andi	r24, 0xEF	; 239
    2338:	8c 93       	st	X, r24
	/*clk polarity raising ==> falling*/
	SET_BIT(MSPI_SPCR_REG , 3);
    233a:	ad e2       	ldi	r26, 0x2D	; 45
    233c:	b0 e0       	ldi	r27, 0x00	; 0
    233e:	ed e2       	ldi	r30, 0x2D	; 45
    2340:	f0 e0       	ldi	r31, 0x00	; 0
    2342:	80 81       	ld	r24, Z
    2344:	88 60       	ori	r24, 0x08	; 8
    2346:	8c 93       	st	X, r24
	/*clock phase setup ==>sample*/
	SET_BIT(MSPI_SPCR_REG , 2);
    2348:	ad e2       	ldi	r26, 0x2D	; 45
    234a:	b0 e0       	ldi	r27, 0x00	; 0
    234c:	ed e2       	ldi	r30, 0x2D	; 45
    234e:	f0 e0       	ldi	r31, 0x00	; 0
    2350:	80 81       	ld	r24, Z
    2352:	84 60       	ori	r24, 0x04	; 4
    2354:	8c 93       	st	X, r24
	return LocalErrorState;
    2356:	89 81       	ldd	r24, Y+1	; 0x01
}
    2358:	0f 90       	pop	r0
    235a:	cf 91       	pop	r28
    235c:	df 91       	pop	r29
    235e:	08 95       	ret

00002360 <MSPI_U8_TransRecieve>:
u8 MSPI_U8_TransRecieve(u8 CopyData){
    2360:	df 93       	push	r29
    2362:	cf 93       	push	r28
    2364:	0f 92       	push	r0
    2366:	cd b7       	in	r28, 0x3d	; 61
    2368:	de b7       	in	r29, 0x3e	; 62
    236a:	89 83       	std	Y+1, r24	; 0x01

	/*Write data on Data register*/
	MSPI_SPDR_REG = CopyData;
    236c:	ef e2       	ldi	r30, 0x2F	; 47
    236e:	f0 e0       	ldi	r31, 0x00	; 0
    2370:	89 81       	ldd	r24, Y+1	; 0x01
    2372:	80 83       	st	Z, r24
	while((!GET_BIT(MSPI_SPDR_REG , 7)));
    2374:	ef e2       	ldi	r30, 0x2F	; 47
    2376:	f0 e0       	ldi	r31, 0x00	; 0
    2378:	80 81       	ld	r24, Z
    237a:	88 23       	and	r24, r24
    237c:	dc f7       	brge	.-10     	; 0x2374 <MSPI_U8_TransRecieve+0x14>

	return MSPI_SPDR_REG;
    237e:	ef e2       	ldi	r30, 0x2F	; 47
    2380:	f0 e0       	ldi	r31, 0x00	; 0
    2382:	80 81       	ld	r24, Z
}
    2384:	0f 90       	pop	r0
    2386:	cf 91       	pop	r28
    2388:	df 91       	pop	r29
    238a:	08 95       	ret

0000238c <main>:
#include <avr/delay.h>
#include "MDIO_Interface.h"
#include "MSPI_Interface.h"

//#define MEXTI_U8_SREG_REG		*((volatile u8*)0X5F)
int main(void){
    238c:	df 93       	push	r29
    238e:	cf 93       	push	r28
    2390:	cd b7       	in	r28, 0x3d	; 61
    2392:	de b7       	in	r29, 0x3e	; 62
    2394:	6d 97       	sbiw	r28, 0x1d	; 29
    2396:	0f b6       	in	r0, 0x3f	; 63
    2398:	f8 94       	cli
    239a:	de bf       	out	0x3e, r29	; 62
    239c:	0f be       	out	0x3f, r0	; 63
    239e:	cd bf       	out	0x3d, r28	; 61
	//SET_BIT(MEXTI_U8_SREG_REG,7);
	u8 Local_Rx_Data ;
	MDIO_U8INIT();
    23a0:	0e 94 1d 11 	call	0x223a	; 0x223a <MDIO_U8INIT>
	MSPI_U8_MASTERInit();
    23a4:	0e 94 44 11 	call	0x2288	; 0x2288 <MSPI_U8_MASTERInit>
		}
		else if(Local_Rx_Data == 2){
			MDIO_u8SetPinValue(MDIO_U8_PORTA , MDIO_U8_PIN_0 , MDIO_U8_HIGH);
		}*/

		Local_Rx_Data = MSPI_U8_TransRecieve(1);
    23a8:	81 e0       	ldi	r24, 0x01	; 1
    23aa:	0e 94 b0 11 	call	0x2360	; 0x2360 <MSPI_U8_TransRecieve>
    23ae:	8d 8f       	std	Y+29, r24	; 0x1d
    23b0:	80 e0       	ldi	r24, 0x00	; 0
    23b2:	90 e0       	ldi	r25, 0x00	; 0
    23b4:	a8 ec       	ldi	r26, 0xC8	; 200
    23b6:	b2 e4       	ldi	r27, 0x42	; 66
    23b8:	89 8f       	std	Y+25, r24	; 0x19
    23ba:	9a 8f       	std	Y+26, r25	; 0x1a
    23bc:	ab 8f       	std	Y+27, r26	; 0x1b
    23be:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23c0:	69 8d       	ldd	r22, Y+25	; 0x19
    23c2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23c4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23c6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23c8:	20 e0       	ldi	r18, 0x00	; 0
    23ca:	30 e0       	ldi	r19, 0x00	; 0
    23cc:	4a ef       	ldi	r20, 0xFA	; 250
    23ce:	54 e4       	ldi	r21, 0x44	; 68
    23d0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    23d4:	dc 01       	movw	r26, r24
    23d6:	cb 01       	movw	r24, r22
    23d8:	8d 8b       	std	Y+21, r24	; 0x15
    23da:	9e 8b       	std	Y+22, r25	; 0x16
    23dc:	af 8b       	std	Y+23, r26	; 0x17
    23de:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    23e0:	6d 89       	ldd	r22, Y+21	; 0x15
    23e2:	7e 89       	ldd	r23, Y+22	; 0x16
    23e4:	8f 89       	ldd	r24, Y+23	; 0x17
    23e6:	98 8d       	ldd	r25, Y+24	; 0x18
    23e8:	20 e0       	ldi	r18, 0x00	; 0
    23ea:	30 e0       	ldi	r19, 0x00	; 0
    23ec:	40 e8       	ldi	r20, 0x80	; 128
    23ee:	5f e3       	ldi	r21, 0x3F	; 63
    23f0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    23f4:	88 23       	and	r24, r24
    23f6:	2c f4       	brge	.+10     	; 0x2402 <main+0x76>
		__ticks = 1;
    23f8:	81 e0       	ldi	r24, 0x01	; 1
    23fa:	90 e0       	ldi	r25, 0x00	; 0
    23fc:	9c 8b       	std	Y+20, r25	; 0x14
    23fe:	8b 8b       	std	Y+19, r24	; 0x13
    2400:	3f c0       	rjmp	.+126    	; 0x2480 <main+0xf4>
	else if (__tmp > 65535)
    2402:	6d 89       	ldd	r22, Y+21	; 0x15
    2404:	7e 89       	ldd	r23, Y+22	; 0x16
    2406:	8f 89       	ldd	r24, Y+23	; 0x17
    2408:	98 8d       	ldd	r25, Y+24	; 0x18
    240a:	20 e0       	ldi	r18, 0x00	; 0
    240c:	3f ef       	ldi	r19, 0xFF	; 255
    240e:	4f e7       	ldi	r20, 0x7F	; 127
    2410:	57 e4       	ldi	r21, 0x47	; 71
    2412:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2416:	18 16       	cp	r1, r24
    2418:	4c f5       	brge	.+82     	; 0x246c <main+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    241a:	69 8d       	ldd	r22, Y+25	; 0x19
    241c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    241e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2420:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2422:	20 e0       	ldi	r18, 0x00	; 0
    2424:	30 e0       	ldi	r19, 0x00	; 0
    2426:	40 e2       	ldi	r20, 0x20	; 32
    2428:	51 e4       	ldi	r21, 0x41	; 65
    242a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    242e:	dc 01       	movw	r26, r24
    2430:	cb 01       	movw	r24, r22
    2432:	bc 01       	movw	r22, r24
    2434:	cd 01       	movw	r24, r26
    2436:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    243a:	dc 01       	movw	r26, r24
    243c:	cb 01       	movw	r24, r22
    243e:	9c 8b       	std	Y+20, r25	; 0x14
    2440:	8b 8b       	std	Y+19, r24	; 0x13
    2442:	0f c0       	rjmp	.+30     	; 0x2462 <main+0xd6>
    2444:	88 ec       	ldi	r24, 0xC8	; 200
    2446:	90 e0       	ldi	r25, 0x00	; 0
    2448:	9a 8b       	std	Y+18, r25	; 0x12
    244a:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    244c:	89 89       	ldd	r24, Y+17	; 0x11
    244e:	9a 89       	ldd	r25, Y+18	; 0x12
    2450:	01 97       	sbiw	r24, 0x01	; 1
    2452:	f1 f7       	brne	.-4      	; 0x2450 <main+0xc4>
    2454:	9a 8b       	std	Y+18, r25	; 0x12
    2456:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2458:	8b 89       	ldd	r24, Y+19	; 0x13
    245a:	9c 89       	ldd	r25, Y+20	; 0x14
    245c:	01 97       	sbiw	r24, 0x01	; 1
    245e:	9c 8b       	std	Y+20, r25	; 0x14
    2460:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2462:	8b 89       	ldd	r24, Y+19	; 0x13
    2464:	9c 89       	ldd	r25, Y+20	; 0x14
    2466:	00 97       	sbiw	r24, 0x00	; 0
    2468:	69 f7       	brne	.-38     	; 0x2444 <main+0xb8>
    246a:	14 c0       	rjmp	.+40     	; 0x2494 <main+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    246c:	6d 89       	ldd	r22, Y+21	; 0x15
    246e:	7e 89       	ldd	r23, Y+22	; 0x16
    2470:	8f 89       	ldd	r24, Y+23	; 0x17
    2472:	98 8d       	ldd	r25, Y+24	; 0x18
    2474:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2478:	dc 01       	movw	r26, r24
    247a:	cb 01       	movw	r24, r22
    247c:	9c 8b       	std	Y+20, r25	; 0x14
    247e:	8b 8b       	std	Y+19, r24	; 0x13
    2480:	8b 89       	ldd	r24, Y+19	; 0x13
    2482:	9c 89       	ldd	r25, Y+20	; 0x14
    2484:	98 8b       	std	Y+16, r25	; 0x10
    2486:	8f 87       	std	Y+15, r24	; 0x0f
    2488:	8f 85       	ldd	r24, Y+15	; 0x0f
    248a:	98 89       	ldd	r25, Y+16	; 0x10
    248c:	01 97       	sbiw	r24, 0x01	; 1
    248e:	f1 f7       	brne	.-4      	; 0x248c <main+0x100>
    2490:	98 8b       	std	Y+16, r25	; 0x10
    2492:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(100);
		Local_Rx_Data = MSPI_U8_TransRecieve(2);
    2494:	82 e0       	ldi	r24, 0x02	; 2
    2496:	0e 94 b0 11 	call	0x2360	; 0x2360 <MSPI_U8_TransRecieve>
    249a:	8d 8f       	std	Y+29, r24	; 0x1d
		if(Local_Rx_Data == 5){
    249c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    249e:	85 30       	cpi	r24, 0x05	; 5
    24a0:	29 f4       	brne	.+10     	; 0x24ac <main+0x120>
			MDIO_u8SetPinValue(MDIO_U8_PORTA , MDIO_U8_PIN_0 , MDIO_U8_HIGH);
    24a2:	80 e0       	ldi	r24, 0x00	; 0
    24a4:	60 e0       	ldi	r22, 0x00	; 0
    24a6:	41 e0       	ldi	r20, 0x01	; 1
    24a8:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <MDIO_u8SetPinValue>
    24ac:	80 e0       	ldi	r24, 0x00	; 0
    24ae:	90 e0       	ldi	r25, 0x00	; 0
    24b0:	a8 ec       	ldi	r26, 0xC8	; 200
    24b2:	b2 e4       	ldi	r27, 0x42	; 66
    24b4:	8b 87       	std	Y+11, r24	; 0x0b
    24b6:	9c 87       	std	Y+12, r25	; 0x0c
    24b8:	ad 87       	std	Y+13, r26	; 0x0d
    24ba:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    24be:	7c 85       	ldd	r23, Y+12	; 0x0c
    24c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    24c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    24c4:	20 e0       	ldi	r18, 0x00	; 0
    24c6:	30 e0       	ldi	r19, 0x00	; 0
    24c8:	4a ef       	ldi	r20, 0xFA	; 250
    24ca:	54 e4       	ldi	r21, 0x44	; 68
    24cc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    24d0:	dc 01       	movw	r26, r24
    24d2:	cb 01       	movw	r24, r22
    24d4:	8f 83       	std	Y+7, r24	; 0x07
    24d6:	98 87       	std	Y+8, r25	; 0x08
    24d8:	a9 87       	std	Y+9, r26	; 0x09
    24da:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24dc:	6f 81       	ldd	r22, Y+7	; 0x07
    24de:	78 85       	ldd	r23, Y+8	; 0x08
    24e0:	89 85       	ldd	r24, Y+9	; 0x09
    24e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    24e4:	20 e0       	ldi	r18, 0x00	; 0
    24e6:	30 e0       	ldi	r19, 0x00	; 0
    24e8:	40 e8       	ldi	r20, 0x80	; 128
    24ea:	5f e3       	ldi	r21, 0x3F	; 63
    24ec:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    24f0:	88 23       	and	r24, r24
    24f2:	2c f4       	brge	.+10     	; 0x24fe <main+0x172>
		__ticks = 1;
    24f4:	81 e0       	ldi	r24, 0x01	; 1
    24f6:	90 e0       	ldi	r25, 0x00	; 0
    24f8:	9e 83       	std	Y+6, r25	; 0x06
    24fa:	8d 83       	std	Y+5, r24	; 0x05
    24fc:	3f c0       	rjmp	.+126    	; 0x257c <main+0x1f0>
	else if (__tmp > 65535)
    24fe:	6f 81       	ldd	r22, Y+7	; 0x07
    2500:	78 85       	ldd	r23, Y+8	; 0x08
    2502:	89 85       	ldd	r24, Y+9	; 0x09
    2504:	9a 85       	ldd	r25, Y+10	; 0x0a
    2506:	20 e0       	ldi	r18, 0x00	; 0
    2508:	3f ef       	ldi	r19, 0xFF	; 255
    250a:	4f e7       	ldi	r20, 0x7F	; 127
    250c:	57 e4       	ldi	r21, 0x47	; 71
    250e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2512:	18 16       	cp	r1, r24
    2514:	4c f5       	brge	.+82     	; 0x2568 <main+0x1dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2516:	6b 85       	ldd	r22, Y+11	; 0x0b
    2518:	7c 85       	ldd	r23, Y+12	; 0x0c
    251a:	8d 85       	ldd	r24, Y+13	; 0x0d
    251c:	9e 85       	ldd	r25, Y+14	; 0x0e
    251e:	20 e0       	ldi	r18, 0x00	; 0
    2520:	30 e0       	ldi	r19, 0x00	; 0
    2522:	40 e2       	ldi	r20, 0x20	; 32
    2524:	51 e4       	ldi	r21, 0x41	; 65
    2526:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    252a:	dc 01       	movw	r26, r24
    252c:	cb 01       	movw	r24, r22
    252e:	bc 01       	movw	r22, r24
    2530:	cd 01       	movw	r24, r26
    2532:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2536:	dc 01       	movw	r26, r24
    2538:	cb 01       	movw	r24, r22
    253a:	9e 83       	std	Y+6, r25	; 0x06
    253c:	8d 83       	std	Y+5, r24	; 0x05
    253e:	0f c0       	rjmp	.+30     	; 0x255e <main+0x1d2>
    2540:	88 ec       	ldi	r24, 0xC8	; 200
    2542:	90 e0       	ldi	r25, 0x00	; 0
    2544:	9c 83       	std	Y+4, r25	; 0x04
    2546:	8b 83       	std	Y+3, r24	; 0x03
    2548:	8b 81       	ldd	r24, Y+3	; 0x03
    254a:	9c 81       	ldd	r25, Y+4	; 0x04
    254c:	01 97       	sbiw	r24, 0x01	; 1
    254e:	f1 f7       	brne	.-4      	; 0x254c <main+0x1c0>
    2550:	9c 83       	std	Y+4, r25	; 0x04
    2552:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2554:	8d 81       	ldd	r24, Y+5	; 0x05
    2556:	9e 81       	ldd	r25, Y+6	; 0x06
    2558:	01 97       	sbiw	r24, 0x01	; 1
    255a:	9e 83       	std	Y+6, r25	; 0x06
    255c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    255e:	8d 81       	ldd	r24, Y+5	; 0x05
    2560:	9e 81       	ldd	r25, Y+6	; 0x06
    2562:	00 97       	sbiw	r24, 0x00	; 0
    2564:	69 f7       	brne	.-38     	; 0x2540 <main+0x1b4>
    2566:	20 cf       	rjmp	.-448    	; 0x23a8 <main+0x1c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2568:	6f 81       	ldd	r22, Y+7	; 0x07
    256a:	78 85       	ldd	r23, Y+8	; 0x08
    256c:	89 85       	ldd	r24, Y+9	; 0x09
    256e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2570:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2574:	dc 01       	movw	r26, r24
    2576:	cb 01       	movw	r24, r22
    2578:	9e 83       	std	Y+6, r25	; 0x06
    257a:	8d 83       	std	Y+5, r24	; 0x05
    257c:	8d 81       	ldd	r24, Y+5	; 0x05
    257e:	9e 81       	ldd	r25, Y+6	; 0x06
    2580:	9a 83       	std	Y+2, r25	; 0x02
    2582:	89 83       	std	Y+1, r24	; 0x01
    2584:	89 81       	ldd	r24, Y+1	; 0x01
    2586:	9a 81       	ldd	r25, Y+2	; 0x02
    2588:	01 97       	sbiw	r24, 0x01	; 1
    258a:	f1 f7       	brne	.-4      	; 0x2588 <main+0x1fc>
    258c:	9a 83       	std	Y+2, r25	; 0x02
    258e:	89 83       	std	Y+1, r24	; 0x01
    2590:	0b cf       	rjmp	.-490    	; 0x23a8 <main+0x1c>

00002592 <__udivmodqi4>:
    2592:	99 1b       	sub	r25, r25
    2594:	79 e0       	ldi	r23, 0x09	; 9
    2596:	04 c0       	rjmp	.+8      	; 0x25a0 <__udivmodqi4_ep>

00002598 <__udivmodqi4_loop>:
    2598:	99 1f       	adc	r25, r25
    259a:	96 17       	cp	r25, r22
    259c:	08 f0       	brcs	.+2      	; 0x25a0 <__udivmodqi4_ep>
    259e:	96 1b       	sub	r25, r22

000025a0 <__udivmodqi4_ep>:
    25a0:	88 1f       	adc	r24, r24
    25a2:	7a 95       	dec	r23
    25a4:	c9 f7       	brne	.-14     	; 0x2598 <__udivmodqi4_loop>
    25a6:	80 95       	com	r24
    25a8:	08 95       	ret

000025aa <__divmodhi4>:
    25aa:	97 fb       	bst	r25, 7
    25ac:	09 2e       	mov	r0, r25
    25ae:	07 26       	eor	r0, r23
    25b0:	0a d0       	rcall	.+20     	; 0x25c6 <__divmodhi4_neg1>
    25b2:	77 fd       	sbrc	r23, 7
    25b4:	04 d0       	rcall	.+8      	; 0x25be <__divmodhi4_neg2>
    25b6:	0c d0       	rcall	.+24     	; 0x25d0 <__udivmodhi4>
    25b8:	06 d0       	rcall	.+12     	; 0x25c6 <__divmodhi4_neg1>
    25ba:	00 20       	and	r0, r0
    25bc:	1a f4       	brpl	.+6      	; 0x25c4 <__divmodhi4_exit>

000025be <__divmodhi4_neg2>:
    25be:	70 95       	com	r23
    25c0:	61 95       	neg	r22
    25c2:	7f 4f       	sbci	r23, 0xFF	; 255

000025c4 <__divmodhi4_exit>:
    25c4:	08 95       	ret

000025c6 <__divmodhi4_neg1>:
    25c6:	f6 f7       	brtc	.-4      	; 0x25c4 <__divmodhi4_exit>
    25c8:	90 95       	com	r25
    25ca:	81 95       	neg	r24
    25cc:	9f 4f       	sbci	r25, 0xFF	; 255
    25ce:	08 95       	ret

000025d0 <__udivmodhi4>:
    25d0:	aa 1b       	sub	r26, r26
    25d2:	bb 1b       	sub	r27, r27
    25d4:	51 e1       	ldi	r21, 0x11	; 17
    25d6:	07 c0       	rjmp	.+14     	; 0x25e6 <__udivmodhi4_ep>

000025d8 <__udivmodhi4_loop>:
    25d8:	aa 1f       	adc	r26, r26
    25da:	bb 1f       	adc	r27, r27
    25dc:	a6 17       	cp	r26, r22
    25de:	b7 07       	cpc	r27, r23
    25e0:	10 f0       	brcs	.+4      	; 0x25e6 <__udivmodhi4_ep>
    25e2:	a6 1b       	sub	r26, r22
    25e4:	b7 0b       	sbc	r27, r23

000025e6 <__udivmodhi4_ep>:
    25e6:	88 1f       	adc	r24, r24
    25e8:	99 1f       	adc	r25, r25
    25ea:	5a 95       	dec	r21
    25ec:	a9 f7       	brne	.-22     	; 0x25d8 <__udivmodhi4_loop>
    25ee:	80 95       	com	r24
    25f0:	90 95       	com	r25
    25f2:	bc 01       	movw	r22, r24
    25f4:	cd 01       	movw	r24, r26
    25f6:	08 95       	ret

000025f8 <__prologue_saves__>:
    25f8:	2f 92       	push	r2
    25fa:	3f 92       	push	r3
    25fc:	4f 92       	push	r4
    25fe:	5f 92       	push	r5
    2600:	6f 92       	push	r6
    2602:	7f 92       	push	r7
    2604:	8f 92       	push	r8
    2606:	9f 92       	push	r9
    2608:	af 92       	push	r10
    260a:	bf 92       	push	r11
    260c:	cf 92       	push	r12
    260e:	df 92       	push	r13
    2610:	ef 92       	push	r14
    2612:	ff 92       	push	r15
    2614:	0f 93       	push	r16
    2616:	1f 93       	push	r17
    2618:	cf 93       	push	r28
    261a:	df 93       	push	r29
    261c:	cd b7       	in	r28, 0x3d	; 61
    261e:	de b7       	in	r29, 0x3e	; 62
    2620:	ca 1b       	sub	r28, r26
    2622:	db 0b       	sbc	r29, r27
    2624:	0f b6       	in	r0, 0x3f	; 63
    2626:	f8 94       	cli
    2628:	de bf       	out	0x3e, r29	; 62
    262a:	0f be       	out	0x3f, r0	; 63
    262c:	cd bf       	out	0x3d, r28	; 61
    262e:	09 94       	ijmp

00002630 <__epilogue_restores__>:
    2630:	2a 88       	ldd	r2, Y+18	; 0x12
    2632:	39 88       	ldd	r3, Y+17	; 0x11
    2634:	48 88       	ldd	r4, Y+16	; 0x10
    2636:	5f 84       	ldd	r5, Y+15	; 0x0f
    2638:	6e 84       	ldd	r6, Y+14	; 0x0e
    263a:	7d 84       	ldd	r7, Y+13	; 0x0d
    263c:	8c 84       	ldd	r8, Y+12	; 0x0c
    263e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2640:	aa 84       	ldd	r10, Y+10	; 0x0a
    2642:	b9 84       	ldd	r11, Y+9	; 0x09
    2644:	c8 84       	ldd	r12, Y+8	; 0x08
    2646:	df 80       	ldd	r13, Y+7	; 0x07
    2648:	ee 80       	ldd	r14, Y+6	; 0x06
    264a:	fd 80       	ldd	r15, Y+5	; 0x05
    264c:	0c 81       	ldd	r16, Y+4	; 0x04
    264e:	1b 81       	ldd	r17, Y+3	; 0x03
    2650:	aa 81       	ldd	r26, Y+2	; 0x02
    2652:	b9 81       	ldd	r27, Y+1	; 0x01
    2654:	ce 0f       	add	r28, r30
    2656:	d1 1d       	adc	r29, r1
    2658:	0f b6       	in	r0, 0x3f	; 63
    265a:	f8 94       	cli
    265c:	de bf       	out	0x3e, r29	; 62
    265e:	0f be       	out	0x3f, r0	; 63
    2660:	cd bf       	out	0x3d, r28	; 61
    2662:	ed 01       	movw	r28, r26
    2664:	08 95       	ret

00002666 <_exit>:
    2666:	f8 94       	cli

00002668 <__stop_program>:
    2668:	ff cf       	rjmp	.-2      	; 0x2668 <__stop_program>
