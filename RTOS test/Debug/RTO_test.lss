
RTO_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002a32  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00002a32  00002ac6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000023  0080006a  0080006a  00002ad0  2**0
                  ALLOC
  3 .stab         000021e4  00000000  00000000  00002ad0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000121f  00000000  00000000  00004cb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00005ed3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00006033  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  000061c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  00008207  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  00009308  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000a28c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000a40c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000a6ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000af5c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 ee 12 	jmp	0x25dc	; 0x25dc <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 e9 11 	jmp	0x23d2	; 0x23d2 <__vector_10>
      2c:	0c 94 9e 11 	jmp	0x233c	; 0x233c <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e3       	ldi	r30, 0x32	; 50
      68:	fa e2       	ldi	r31, 0x2A	; 42
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 36       	cpi	r26, 0x6A	; 106
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	aa e6       	ldi	r26, 0x6A	; 106
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 38       	cpi	r26, 0x8D	; 141
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 81 14 	call	0x2902	; 0x2902 <main>
      8a:	0c 94 17 15 	jmp	0x2a2e	; 0x2a2e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 e0 14 	jmp	0x29c0	; 0x29c0 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 fc 14 	jmp	0x29f8	; 0x29f8 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 ec 14 	jmp	0x29d8	; 0x29d8 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 08 15 	jmp	0x2a10	; 0x2a10 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 ec 14 	jmp	0x29d8	; 0x29d8 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 08 15 	jmp	0x2a10	; 0x2a10 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 e0 14 	jmp	0x29c0	; 0x29c0 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 fc 14 	jmp	0x29f8	; 0x29f8 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 e8 14 	jmp	0x29d0	; 0x29d0 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 04 15 	jmp	0x2a08	; 0x2a08 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 ec 14 	jmp	0x29d8	; 0x29d8 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 08 15 	jmp	0x2a10	; 0x2a10 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 ec 14 	jmp	0x29d8	; 0x29d8 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 08 15 	jmp	0x2a10	; 0x2a10 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 ec 14 	jmp	0x29d8	; 0x29d8 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 08 15 	jmp	0x2a10	; 0x2a10 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 f0 14 	jmp	0x29e0	; 0x29e0 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 0c 15 	jmp	0x2a18	; 0x2a18 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <HLCD_U8Init>:
#include "HLCD_Interface.h"
#include "HLCD_Private.h"
#include "HLCD_Config.h"
#include <avr/delay.h>
#include <stdio.h>
u8 HLCD_U8Init(void){
     c9e:	0f 93       	push	r16
     ca0:	1f 93       	push	r17
     ca2:	df 93       	push	r29
     ca4:	cf 93       	push	r28
     ca6:	cd b7       	in	r28, 0x3d	; 61
     ca8:	de b7       	in	r29, 0x3e	; 62
     caa:	cd 54       	subi	r28, 0x4D	; 77
     cac:	d0 40       	sbci	r29, 0x00	; 0
     cae:	0f b6       	in	r0, 0x3f	; 63
     cb0:	f8 94       	cli
     cb2:	de bf       	out	0x3e, r29	; 62
     cb4:	0f be       	out	0x3f, r0	; 63
     cb6:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8ErrorState = STD_TYPES_OK;
     cb8:	fe 01       	movw	r30, r28
     cba:	e3 5b       	subi	r30, 0xB3	; 179
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	81 e0       	ldi	r24, 0x01	; 1
     cc0:	80 83       	st	Z, r24
     cc2:	fe 01       	movw	r30, r28
     cc4:	e7 5b       	subi	r30, 0xB7	; 183
     cc6:	ff 4f       	sbci	r31, 0xFF	; 255
     cc8:	80 e0       	ldi	r24, 0x00	; 0
     cca:	90 e0       	ldi	r25, 0x00	; 0
     ccc:	a8 ef       	ldi	r26, 0xF8	; 248
     cce:	b1 e4       	ldi	r27, 0x41	; 65
     cd0:	80 83       	st	Z, r24
     cd2:	91 83       	std	Z+1, r25	; 0x01
     cd4:	a2 83       	std	Z+2, r26	; 0x02
     cd6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cd8:	8e 01       	movw	r16, r28
     cda:	0b 5b       	subi	r16, 0xBB	; 187
     cdc:	1f 4f       	sbci	r17, 0xFF	; 255
     cde:	fe 01       	movw	r30, r28
     ce0:	e7 5b       	subi	r30, 0xB7	; 183
     ce2:	ff 4f       	sbci	r31, 0xFF	; 255
     ce4:	60 81       	ld	r22, Z
     ce6:	71 81       	ldd	r23, Z+1	; 0x01
     ce8:	82 81       	ldd	r24, Z+2	; 0x02
     cea:	93 81       	ldd	r25, Z+3	; 0x03
     cec:	20 e0       	ldi	r18, 0x00	; 0
     cee:	30 e0       	ldi	r19, 0x00	; 0
     cf0:	4a ef       	ldi	r20, 0xFA	; 250
     cf2:	54 e4       	ldi	r21, 0x44	; 68
     cf4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cf8:	dc 01       	movw	r26, r24
     cfa:	cb 01       	movw	r24, r22
     cfc:	f8 01       	movw	r30, r16
     cfe:	80 83       	st	Z, r24
     d00:	91 83       	std	Z+1, r25	; 0x01
     d02:	a2 83       	std	Z+2, r26	; 0x02
     d04:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     d06:	fe 01       	movw	r30, r28
     d08:	eb 5b       	subi	r30, 0xBB	; 187
     d0a:	ff 4f       	sbci	r31, 0xFF	; 255
     d0c:	60 81       	ld	r22, Z
     d0e:	71 81       	ldd	r23, Z+1	; 0x01
     d10:	82 81       	ldd	r24, Z+2	; 0x02
     d12:	93 81       	ldd	r25, Z+3	; 0x03
     d14:	20 e0       	ldi	r18, 0x00	; 0
     d16:	30 e0       	ldi	r19, 0x00	; 0
     d18:	40 e8       	ldi	r20, 0x80	; 128
     d1a:	5f e3       	ldi	r21, 0x3F	; 63
     d1c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     d20:	88 23       	and	r24, r24
     d22:	44 f4       	brge	.+16     	; 0xd34 <HLCD_U8Init+0x96>
		__ticks = 1;
     d24:	fe 01       	movw	r30, r28
     d26:	ed 5b       	subi	r30, 0xBD	; 189
     d28:	ff 4f       	sbci	r31, 0xFF	; 255
     d2a:	81 e0       	ldi	r24, 0x01	; 1
     d2c:	90 e0       	ldi	r25, 0x00	; 0
     d2e:	91 83       	std	Z+1, r25	; 0x01
     d30:	80 83       	st	Z, r24
     d32:	64 c0       	rjmp	.+200    	; 0xdfc <HLCD_U8Init+0x15e>
	else if (__tmp > 65535)
     d34:	fe 01       	movw	r30, r28
     d36:	eb 5b       	subi	r30, 0xBB	; 187
     d38:	ff 4f       	sbci	r31, 0xFF	; 255
     d3a:	60 81       	ld	r22, Z
     d3c:	71 81       	ldd	r23, Z+1	; 0x01
     d3e:	82 81       	ldd	r24, Z+2	; 0x02
     d40:	93 81       	ldd	r25, Z+3	; 0x03
     d42:	20 e0       	ldi	r18, 0x00	; 0
     d44:	3f ef       	ldi	r19, 0xFF	; 255
     d46:	4f e7       	ldi	r20, 0x7F	; 127
     d48:	57 e4       	ldi	r21, 0x47	; 71
     d4a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     d4e:	18 16       	cp	r1, r24
     d50:	0c f0       	brlt	.+2      	; 0xd54 <HLCD_U8Init+0xb6>
     d52:	43 c0       	rjmp	.+134    	; 0xdda <HLCD_U8Init+0x13c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d54:	fe 01       	movw	r30, r28
     d56:	e7 5b       	subi	r30, 0xB7	; 183
     d58:	ff 4f       	sbci	r31, 0xFF	; 255
     d5a:	60 81       	ld	r22, Z
     d5c:	71 81       	ldd	r23, Z+1	; 0x01
     d5e:	82 81       	ldd	r24, Z+2	; 0x02
     d60:	93 81       	ldd	r25, Z+3	; 0x03
     d62:	20 e0       	ldi	r18, 0x00	; 0
     d64:	30 e0       	ldi	r19, 0x00	; 0
     d66:	40 e2       	ldi	r20, 0x20	; 32
     d68:	51 e4       	ldi	r21, 0x41	; 65
     d6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d6e:	dc 01       	movw	r26, r24
     d70:	cb 01       	movw	r24, r22
     d72:	8e 01       	movw	r16, r28
     d74:	0d 5b       	subi	r16, 0xBD	; 189
     d76:	1f 4f       	sbci	r17, 0xFF	; 255
     d78:	bc 01       	movw	r22, r24
     d7a:	cd 01       	movw	r24, r26
     d7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d80:	dc 01       	movw	r26, r24
     d82:	cb 01       	movw	r24, r22
     d84:	f8 01       	movw	r30, r16
     d86:	91 83       	std	Z+1, r25	; 0x01
     d88:	80 83       	st	Z, r24
     d8a:	1f c0       	rjmp	.+62     	; 0xdca <HLCD_U8Init+0x12c>
     d8c:	fe 01       	movw	r30, r28
     d8e:	ef 5b       	subi	r30, 0xBF	; 191
     d90:	ff 4f       	sbci	r31, 0xFF	; 255
     d92:	88 ec       	ldi	r24, 0xC8	; 200
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	91 83       	std	Z+1, r25	; 0x01
     d98:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d9a:	fe 01       	movw	r30, r28
     d9c:	ef 5b       	subi	r30, 0xBF	; 191
     d9e:	ff 4f       	sbci	r31, 0xFF	; 255
     da0:	80 81       	ld	r24, Z
     da2:	91 81       	ldd	r25, Z+1	; 0x01
     da4:	01 97       	sbiw	r24, 0x01	; 1
     da6:	f1 f7       	brne	.-4      	; 0xda4 <HLCD_U8Init+0x106>
     da8:	fe 01       	movw	r30, r28
     daa:	ef 5b       	subi	r30, 0xBF	; 191
     dac:	ff 4f       	sbci	r31, 0xFF	; 255
     dae:	91 83       	std	Z+1, r25	; 0x01
     db0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     db2:	de 01       	movw	r26, r28
     db4:	ad 5b       	subi	r26, 0xBD	; 189
     db6:	bf 4f       	sbci	r27, 0xFF	; 255
     db8:	fe 01       	movw	r30, r28
     dba:	ed 5b       	subi	r30, 0xBD	; 189
     dbc:	ff 4f       	sbci	r31, 0xFF	; 255
     dbe:	80 81       	ld	r24, Z
     dc0:	91 81       	ldd	r25, Z+1	; 0x01
     dc2:	01 97       	sbiw	r24, 0x01	; 1
     dc4:	11 96       	adiw	r26, 0x01	; 1
     dc6:	9c 93       	st	X, r25
     dc8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dca:	fe 01       	movw	r30, r28
     dcc:	ed 5b       	subi	r30, 0xBD	; 189
     dce:	ff 4f       	sbci	r31, 0xFF	; 255
     dd0:	80 81       	ld	r24, Z
     dd2:	91 81       	ldd	r25, Z+1	; 0x01
     dd4:	00 97       	sbiw	r24, 0x00	; 0
     dd6:	d1 f6       	brne	.-76     	; 0xd8c <HLCD_U8Init+0xee>
     dd8:	24 c0       	rjmp	.+72     	; 0xe22 <HLCD_U8Init+0x184>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     dda:	8e 01       	movw	r16, r28
     ddc:	0d 5b       	subi	r16, 0xBD	; 189
     dde:	1f 4f       	sbci	r17, 0xFF	; 255
     de0:	fe 01       	movw	r30, r28
     de2:	eb 5b       	subi	r30, 0xBB	; 187
     de4:	ff 4f       	sbci	r31, 0xFF	; 255
     de6:	60 81       	ld	r22, Z
     de8:	71 81       	ldd	r23, Z+1	; 0x01
     dea:	82 81       	ldd	r24, Z+2	; 0x02
     dec:	93 81       	ldd	r25, Z+3	; 0x03
     dee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     df2:	dc 01       	movw	r26, r24
     df4:	cb 01       	movw	r24, r22
     df6:	f8 01       	movw	r30, r16
     df8:	91 83       	std	Z+1, r25	; 0x01
     dfa:	80 83       	st	Z, r24
     dfc:	fe 01       	movw	r30, r28
     dfe:	ed 5b       	subi	r30, 0xBD	; 189
     e00:	ff 4f       	sbci	r31, 0xFF	; 255
     e02:	80 81       	ld	r24, Z
     e04:	91 81       	ldd	r25, Z+1	; 0x01
     e06:	fe 01       	movw	r30, r28
     e08:	ff 96       	adiw	r30, 0x3f	; 63
     e0a:	91 83       	std	Z+1, r25	; 0x01
     e0c:	80 83       	st	Z, r24
     e0e:	fe 01       	movw	r30, r28
     e10:	ff 96       	adiw	r30, 0x3f	; 63
     e12:	80 81       	ld	r24, Z
     e14:	91 81       	ldd	r25, Z+1	; 0x01
     e16:	01 97       	sbiw	r24, 0x01	; 1
     e18:	f1 f7       	brne	.-4      	; 0xe16 <HLCD_U8Init+0x178>
     e1a:	fe 01       	movw	r30, r28
     e1c:	ff 96       	adiw	r30, 0x3f	; 63
     e1e:	91 83       	std	Z+1, r25	; 0x01
     e20:	80 83       	st	Z, r24
	_delay_ms(31);
	/*send function set command*/
	HLCD_U8WriteCommand(0b00111000);
     e22:	88 e3       	ldi	r24, 0x38	; 56
     e24:	0e 94 08 0a 	call	0x1410	; 0x1410 <HLCD_U8WriteCommand>
     e28:	80 e0       	ldi	r24, 0x00	; 0
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	a0 e2       	ldi	r26, 0x20	; 32
     e2e:	b2 e4       	ldi	r27, 0x42	; 66
     e30:	8b af       	std	Y+59, r24	; 0x3b
     e32:	9c af       	std	Y+60, r25	; 0x3c
     e34:	ad af       	std	Y+61, r26	; 0x3d
     e36:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     e38:	6b ad       	ldd	r22, Y+59	; 0x3b
     e3a:	7c ad       	ldd	r23, Y+60	; 0x3c
     e3c:	8d ad       	ldd	r24, Y+61	; 0x3d
     e3e:	9e ad       	ldd	r25, Y+62	; 0x3e
     e40:	2b ea       	ldi	r18, 0xAB	; 171
     e42:	3a ea       	ldi	r19, 0xAA	; 170
     e44:	4a e2       	ldi	r20, 0x2A	; 42
     e46:	50 e4       	ldi	r21, 0x40	; 64
     e48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e4c:	dc 01       	movw	r26, r24
     e4e:	cb 01       	movw	r24, r22
     e50:	8f ab       	std	Y+55, r24	; 0x37
     e52:	98 af       	std	Y+56, r25	; 0x38
     e54:	a9 af       	std	Y+57, r26	; 0x39
     e56:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
     e58:	6f a9       	ldd	r22, Y+55	; 0x37
     e5a:	78 ad       	ldd	r23, Y+56	; 0x38
     e5c:	89 ad       	ldd	r24, Y+57	; 0x39
     e5e:	9a ad       	ldd	r25, Y+58	; 0x3a
     e60:	20 e0       	ldi	r18, 0x00	; 0
     e62:	30 e0       	ldi	r19, 0x00	; 0
     e64:	40 e8       	ldi	r20, 0x80	; 128
     e66:	5f e3       	ldi	r21, 0x3F	; 63
     e68:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     e6c:	88 23       	and	r24, r24
     e6e:	1c f4       	brge	.+6      	; 0xe76 <HLCD_U8Init+0x1d8>
		__ticks = 1;
     e70:	81 e0       	ldi	r24, 0x01	; 1
     e72:	8e ab       	std	Y+54, r24	; 0x36
     e74:	91 c0       	rjmp	.+290    	; 0xf98 <HLCD_U8Init+0x2fa>
	else if (__tmp > 255)
     e76:	6f a9       	ldd	r22, Y+55	; 0x37
     e78:	78 ad       	ldd	r23, Y+56	; 0x38
     e7a:	89 ad       	ldd	r24, Y+57	; 0x39
     e7c:	9a ad       	ldd	r25, Y+58	; 0x3a
     e7e:	20 e0       	ldi	r18, 0x00	; 0
     e80:	30 e0       	ldi	r19, 0x00	; 0
     e82:	4f e7       	ldi	r20, 0x7F	; 127
     e84:	53 e4       	ldi	r21, 0x43	; 67
     e86:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     e8a:	18 16       	cp	r1, r24
     e8c:	0c f0       	brlt	.+2      	; 0xe90 <HLCD_U8Init+0x1f2>
     e8e:	7b c0       	rjmp	.+246    	; 0xf86 <HLCD_U8Init+0x2e8>
	{
		_delay_ms(__us / 1000.0);
     e90:	6b ad       	ldd	r22, Y+59	; 0x3b
     e92:	7c ad       	ldd	r23, Y+60	; 0x3c
     e94:	8d ad       	ldd	r24, Y+61	; 0x3d
     e96:	9e ad       	ldd	r25, Y+62	; 0x3e
     e98:	20 e0       	ldi	r18, 0x00	; 0
     e9a:	30 e0       	ldi	r19, 0x00	; 0
     e9c:	4a e7       	ldi	r20, 0x7A	; 122
     e9e:	54 e4       	ldi	r21, 0x44	; 68
     ea0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
     ea4:	dc 01       	movw	r26, r24
     ea6:	cb 01       	movw	r24, r22
     ea8:	8a ab       	std	Y+50, r24	; 0x32
     eaa:	9b ab       	std	Y+51, r25	; 0x33
     eac:	ac ab       	std	Y+52, r26	; 0x34
     eae:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     eb0:	6a a9       	ldd	r22, Y+50	; 0x32
     eb2:	7b a9       	ldd	r23, Y+51	; 0x33
     eb4:	8c a9       	ldd	r24, Y+52	; 0x34
     eb6:	9d a9       	ldd	r25, Y+53	; 0x35
     eb8:	20 e0       	ldi	r18, 0x00	; 0
     eba:	30 e0       	ldi	r19, 0x00	; 0
     ebc:	4a ef       	ldi	r20, 0xFA	; 250
     ebe:	54 e4       	ldi	r21, 0x44	; 68
     ec0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ec4:	dc 01       	movw	r26, r24
     ec6:	cb 01       	movw	r24, r22
     ec8:	8e a7       	std	Y+46, r24	; 0x2e
     eca:	9f a7       	std	Y+47, r25	; 0x2f
     ecc:	a8 ab       	std	Y+48, r26	; 0x30
     ece:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
     ed0:	6e a5       	ldd	r22, Y+46	; 0x2e
     ed2:	7f a5       	ldd	r23, Y+47	; 0x2f
     ed4:	88 a9       	ldd	r24, Y+48	; 0x30
     ed6:	99 a9       	ldd	r25, Y+49	; 0x31
     ed8:	20 e0       	ldi	r18, 0x00	; 0
     eda:	30 e0       	ldi	r19, 0x00	; 0
     edc:	40 e8       	ldi	r20, 0x80	; 128
     ede:	5f e3       	ldi	r21, 0x3F	; 63
     ee0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     ee4:	88 23       	and	r24, r24
     ee6:	2c f4       	brge	.+10     	; 0xef2 <HLCD_U8Init+0x254>
		__ticks = 1;
     ee8:	81 e0       	ldi	r24, 0x01	; 1
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	9d a7       	std	Y+45, r25	; 0x2d
     eee:	8c a7       	std	Y+44, r24	; 0x2c
     ef0:	3f c0       	rjmp	.+126    	; 0xf70 <HLCD_U8Init+0x2d2>
	else if (__tmp > 65535)
     ef2:	6e a5       	ldd	r22, Y+46	; 0x2e
     ef4:	7f a5       	ldd	r23, Y+47	; 0x2f
     ef6:	88 a9       	ldd	r24, Y+48	; 0x30
     ef8:	99 a9       	ldd	r25, Y+49	; 0x31
     efa:	20 e0       	ldi	r18, 0x00	; 0
     efc:	3f ef       	ldi	r19, 0xFF	; 255
     efe:	4f e7       	ldi	r20, 0x7F	; 127
     f00:	57 e4       	ldi	r21, 0x47	; 71
     f02:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     f06:	18 16       	cp	r1, r24
     f08:	4c f5       	brge	.+82     	; 0xf5c <HLCD_U8Init+0x2be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f0a:	6a a9       	ldd	r22, Y+50	; 0x32
     f0c:	7b a9       	ldd	r23, Y+51	; 0x33
     f0e:	8c a9       	ldd	r24, Y+52	; 0x34
     f10:	9d a9       	ldd	r25, Y+53	; 0x35
     f12:	20 e0       	ldi	r18, 0x00	; 0
     f14:	30 e0       	ldi	r19, 0x00	; 0
     f16:	40 e2       	ldi	r20, 0x20	; 32
     f18:	51 e4       	ldi	r21, 0x41	; 65
     f1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f1e:	dc 01       	movw	r26, r24
     f20:	cb 01       	movw	r24, r22
     f22:	bc 01       	movw	r22, r24
     f24:	cd 01       	movw	r24, r26
     f26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f2a:	dc 01       	movw	r26, r24
     f2c:	cb 01       	movw	r24, r22
     f2e:	9d a7       	std	Y+45, r25	; 0x2d
     f30:	8c a7       	std	Y+44, r24	; 0x2c
     f32:	0f c0       	rjmp	.+30     	; 0xf52 <HLCD_U8Init+0x2b4>
     f34:	88 ec       	ldi	r24, 0xC8	; 200
     f36:	90 e0       	ldi	r25, 0x00	; 0
     f38:	9b a7       	std	Y+43, r25	; 0x2b
     f3a:	8a a7       	std	Y+42, r24	; 0x2a
     f3c:	8a a5       	ldd	r24, Y+42	; 0x2a
     f3e:	9b a5       	ldd	r25, Y+43	; 0x2b
     f40:	01 97       	sbiw	r24, 0x01	; 1
     f42:	f1 f7       	brne	.-4      	; 0xf40 <HLCD_U8Init+0x2a2>
     f44:	9b a7       	std	Y+43, r25	; 0x2b
     f46:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f48:	8c a5       	ldd	r24, Y+44	; 0x2c
     f4a:	9d a5       	ldd	r25, Y+45	; 0x2d
     f4c:	01 97       	sbiw	r24, 0x01	; 1
     f4e:	9d a7       	std	Y+45, r25	; 0x2d
     f50:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f52:	8c a5       	ldd	r24, Y+44	; 0x2c
     f54:	9d a5       	ldd	r25, Y+45	; 0x2d
     f56:	00 97       	sbiw	r24, 0x00	; 0
     f58:	69 f7       	brne	.-38     	; 0xf34 <HLCD_U8Init+0x296>
     f5a:	24 c0       	rjmp	.+72     	; 0xfa4 <HLCD_U8Init+0x306>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f5c:	6e a5       	ldd	r22, Y+46	; 0x2e
     f5e:	7f a5       	ldd	r23, Y+47	; 0x2f
     f60:	88 a9       	ldd	r24, Y+48	; 0x30
     f62:	99 a9       	ldd	r25, Y+49	; 0x31
     f64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f68:	dc 01       	movw	r26, r24
     f6a:	cb 01       	movw	r24, r22
     f6c:	9d a7       	std	Y+45, r25	; 0x2d
     f6e:	8c a7       	std	Y+44, r24	; 0x2c
     f70:	8c a5       	ldd	r24, Y+44	; 0x2c
     f72:	9d a5       	ldd	r25, Y+45	; 0x2d
     f74:	99 a7       	std	Y+41, r25	; 0x29
     f76:	88 a7       	std	Y+40, r24	; 0x28
     f78:	88 a5       	ldd	r24, Y+40	; 0x28
     f7a:	99 a5       	ldd	r25, Y+41	; 0x29
     f7c:	01 97       	sbiw	r24, 0x01	; 1
     f7e:	f1 f7       	brne	.-4      	; 0xf7c <HLCD_U8Init+0x2de>
     f80:	99 a7       	std	Y+41, r25	; 0x29
     f82:	88 a7       	std	Y+40, r24	; 0x28
     f84:	0f c0       	rjmp	.+30     	; 0xfa4 <HLCD_U8Init+0x306>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     f86:	6f a9       	ldd	r22, Y+55	; 0x37
     f88:	78 ad       	ldd	r23, Y+56	; 0x38
     f8a:	89 ad       	ldd	r24, Y+57	; 0x39
     f8c:	9a ad       	ldd	r25, Y+58	; 0x3a
     f8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f92:	dc 01       	movw	r26, r24
     f94:	cb 01       	movw	r24, r22
     f96:	8e ab       	std	Y+54, r24	; 0x36
     f98:	8e a9       	ldd	r24, Y+54	; 0x36
     f9a:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     f9c:	8f a1       	ldd	r24, Y+39	; 0x27
     f9e:	8a 95       	dec	r24
     fa0:	f1 f7       	brne	.-4      	; 0xf9e <HLCD_U8Init+0x300>
     fa2:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(40);
	/*send display on\off command*/
	HLCD_U8WriteCommand(0b00001111);
     fa4:	8f e0       	ldi	r24, 0x0F	; 15
     fa6:	0e 94 08 0a 	call	0x1410	; 0x1410 <HLCD_U8WriteCommand>
     faa:	80 e0       	ldi	r24, 0x00	; 0
     fac:	90 e0       	ldi	r25, 0x00	; 0
     fae:	a0 e2       	ldi	r26, 0x20	; 32
     fb0:	b2 e4       	ldi	r27, 0x42	; 66
     fb2:	8b a3       	std	Y+35, r24	; 0x23
     fb4:	9c a3       	std	Y+36, r25	; 0x24
     fb6:	ad a3       	std	Y+37, r26	; 0x25
     fb8:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     fba:	6b a1       	ldd	r22, Y+35	; 0x23
     fbc:	7c a1       	ldd	r23, Y+36	; 0x24
     fbe:	8d a1       	ldd	r24, Y+37	; 0x25
     fc0:	9e a1       	ldd	r25, Y+38	; 0x26
     fc2:	2b ea       	ldi	r18, 0xAB	; 171
     fc4:	3a ea       	ldi	r19, 0xAA	; 170
     fc6:	4a e2       	ldi	r20, 0x2A	; 42
     fc8:	50 e4       	ldi	r21, 0x40	; 64
     fca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fce:	dc 01       	movw	r26, r24
     fd0:	cb 01       	movw	r24, r22
     fd2:	8f 8f       	std	Y+31, r24	; 0x1f
     fd4:	98 a3       	std	Y+32, r25	; 0x20
     fd6:	a9 a3       	std	Y+33, r26	; 0x21
     fd8:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
     fda:	6f 8d       	ldd	r22, Y+31	; 0x1f
     fdc:	78 a1       	ldd	r23, Y+32	; 0x20
     fde:	89 a1       	ldd	r24, Y+33	; 0x21
     fe0:	9a a1       	ldd	r25, Y+34	; 0x22
     fe2:	20 e0       	ldi	r18, 0x00	; 0
     fe4:	30 e0       	ldi	r19, 0x00	; 0
     fe6:	40 e8       	ldi	r20, 0x80	; 128
     fe8:	5f e3       	ldi	r21, 0x3F	; 63
     fea:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     fee:	88 23       	and	r24, r24
     ff0:	1c f4       	brge	.+6      	; 0xff8 <HLCD_U8Init+0x35a>
		__ticks = 1;
     ff2:	81 e0       	ldi	r24, 0x01	; 1
     ff4:	8e 8f       	std	Y+30, r24	; 0x1e
     ff6:	91 c0       	rjmp	.+290    	; 0x111a <HLCD_U8Init+0x47c>
	else if (__tmp > 255)
     ff8:	6f 8d       	ldd	r22, Y+31	; 0x1f
     ffa:	78 a1       	ldd	r23, Y+32	; 0x20
     ffc:	89 a1       	ldd	r24, Y+33	; 0x21
     ffe:	9a a1       	ldd	r25, Y+34	; 0x22
    1000:	20 e0       	ldi	r18, 0x00	; 0
    1002:	30 e0       	ldi	r19, 0x00	; 0
    1004:	4f e7       	ldi	r20, 0x7F	; 127
    1006:	53 e4       	ldi	r21, 0x43	; 67
    1008:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    100c:	18 16       	cp	r1, r24
    100e:	0c f0       	brlt	.+2      	; 0x1012 <HLCD_U8Init+0x374>
    1010:	7b c0       	rjmp	.+246    	; 0x1108 <HLCD_U8Init+0x46a>
	{
		_delay_ms(__us / 1000.0);
    1012:	6b a1       	ldd	r22, Y+35	; 0x23
    1014:	7c a1       	ldd	r23, Y+36	; 0x24
    1016:	8d a1       	ldd	r24, Y+37	; 0x25
    1018:	9e a1       	ldd	r25, Y+38	; 0x26
    101a:	20 e0       	ldi	r18, 0x00	; 0
    101c:	30 e0       	ldi	r19, 0x00	; 0
    101e:	4a e7       	ldi	r20, 0x7A	; 122
    1020:	54 e4       	ldi	r21, 0x44	; 68
    1022:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1026:	dc 01       	movw	r26, r24
    1028:	cb 01       	movw	r24, r22
    102a:	8a 8f       	std	Y+26, r24	; 0x1a
    102c:	9b 8f       	std	Y+27, r25	; 0x1b
    102e:	ac 8f       	std	Y+28, r26	; 0x1c
    1030:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1032:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1034:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1036:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1038:	9d 8d       	ldd	r25, Y+29	; 0x1d
    103a:	20 e0       	ldi	r18, 0x00	; 0
    103c:	30 e0       	ldi	r19, 0x00	; 0
    103e:	4a ef       	ldi	r20, 0xFA	; 250
    1040:	54 e4       	ldi	r21, 0x44	; 68
    1042:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1046:	dc 01       	movw	r26, r24
    1048:	cb 01       	movw	r24, r22
    104a:	8e 8b       	std	Y+22, r24	; 0x16
    104c:	9f 8b       	std	Y+23, r25	; 0x17
    104e:	a8 8f       	std	Y+24, r26	; 0x18
    1050:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    1052:	6e 89       	ldd	r22, Y+22	; 0x16
    1054:	7f 89       	ldd	r23, Y+23	; 0x17
    1056:	88 8d       	ldd	r24, Y+24	; 0x18
    1058:	99 8d       	ldd	r25, Y+25	; 0x19
    105a:	20 e0       	ldi	r18, 0x00	; 0
    105c:	30 e0       	ldi	r19, 0x00	; 0
    105e:	40 e8       	ldi	r20, 0x80	; 128
    1060:	5f e3       	ldi	r21, 0x3F	; 63
    1062:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1066:	88 23       	and	r24, r24
    1068:	2c f4       	brge	.+10     	; 0x1074 <HLCD_U8Init+0x3d6>
		__ticks = 1;
    106a:	81 e0       	ldi	r24, 0x01	; 1
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	9d 8b       	std	Y+21, r25	; 0x15
    1070:	8c 8b       	std	Y+20, r24	; 0x14
    1072:	3f c0       	rjmp	.+126    	; 0x10f2 <HLCD_U8Init+0x454>
	else if (__tmp > 65535)
    1074:	6e 89       	ldd	r22, Y+22	; 0x16
    1076:	7f 89       	ldd	r23, Y+23	; 0x17
    1078:	88 8d       	ldd	r24, Y+24	; 0x18
    107a:	99 8d       	ldd	r25, Y+25	; 0x19
    107c:	20 e0       	ldi	r18, 0x00	; 0
    107e:	3f ef       	ldi	r19, 0xFF	; 255
    1080:	4f e7       	ldi	r20, 0x7F	; 127
    1082:	57 e4       	ldi	r21, 0x47	; 71
    1084:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1088:	18 16       	cp	r1, r24
    108a:	4c f5       	brge	.+82     	; 0x10de <HLCD_U8Init+0x440>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    108c:	6a 8d       	ldd	r22, Y+26	; 0x1a
    108e:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1090:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1092:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1094:	20 e0       	ldi	r18, 0x00	; 0
    1096:	30 e0       	ldi	r19, 0x00	; 0
    1098:	40 e2       	ldi	r20, 0x20	; 32
    109a:	51 e4       	ldi	r21, 0x41	; 65
    109c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10a0:	dc 01       	movw	r26, r24
    10a2:	cb 01       	movw	r24, r22
    10a4:	bc 01       	movw	r22, r24
    10a6:	cd 01       	movw	r24, r26
    10a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10ac:	dc 01       	movw	r26, r24
    10ae:	cb 01       	movw	r24, r22
    10b0:	9d 8b       	std	Y+21, r25	; 0x15
    10b2:	8c 8b       	std	Y+20, r24	; 0x14
    10b4:	0f c0       	rjmp	.+30     	; 0x10d4 <HLCD_U8Init+0x436>
    10b6:	88 ec       	ldi	r24, 0xC8	; 200
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	9b 8b       	std	Y+19, r25	; 0x13
    10bc:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    10be:	8a 89       	ldd	r24, Y+18	; 0x12
    10c0:	9b 89       	ldd	r25, Y+19	; 0x13
    10c2:	01 97       	sbiw	r24, 0x01	; 1
    10c4:	f1 f7       	brne	.-4      	; 0x10c2 <HLCD_U8Init+0x424>
    10c6:	9b 8b       	std	Y+19, r25	; 0x13
    10c8:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10ca:	8c 89       	ldd	r24, Y+20	; 0x14
    10cc:	9d 89       	ldd	r25, Y+21	; 0x15
    10ce:	01 97       	sbiw	r24, 0x01	; 1
    10d0:	9d 8b       	std	Y+21, r25	; 0x15
    10d2:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10d4:	8c 89       	ldd	r24, Y+20	; 0x14
    10d6:	9d 89       	ldd	r25, Y+21	; 0x15
    10d8:	00 97       	sbiw	r24, 0x00	; 0
    10da:	69 f7       	brne	.-38     	; 0x10b6 <HLCD_U8Init+0x418>
    10dc:	24 c0       	rjmp	.+72     	; 0x1126 <HLCD_U8Init+0x488>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10de:	6e 89       	ldd	r22, Y+22	; 0x16
    10e0:	7f 89       	ldd	r23, Y+23	; 0x17
    10e2:	88 8d       	ldd	r24, Y+24	; 0x18
    10e4:	99 8d       	ldd	r25, Y+25	; 0x19
    10e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10ea:	dc 01       	movw	r26, r24
    10ec:	cb 01       	movw	r24, r22
    10ee:	9d 8b       	std	Y+21, r25	; 0x15
    10f0:	8c 8b       	std	Y+20, r24	; 0x14
    10f2:	8c 89       	ldd	r24, Y+20	; 0x14
    10f4:	9d 89       	ldd	r25, Y+21	; 0x15
    10f6:	99 8b       	std	Y+17, r25	; 0x11
    10f8:	88 8b       	std	Y+16, r24	; 0x10
    10fa:	88 89       	ldd	r24, Y+16	; 0x10
    10fc:	99 89       	ldd	r25, Y+17	; 0x11
    10fe:	01 97       	sbiw	r24, 0x01	; 1
    1100:	f1 f7       	brne	.-4      	; 0x10fe <HLCD_U8Init+0x460>
    1102:	99 8b       	std	Y+17, r25	; 0x11
    1104:	88 8b       	std	Y+16, r24	; 0x10
    1106:	0f c0       	rjmp	.+30     	; 0x1126 <HLCD_U8Init+0x488>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1108:	6f 8d       	ldd	r22, Y+31	; 0x1f
    110a:	78 a1       	ldd	r23, Y+32	; 0x20
    110c:	89 a1       	ldd	r24, Y+33	; 0x21
    110e:	9a a1       	ldd	r25, Y+34	; 0x22
    1110:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1114:	dc 01       	movw	r26, r24
    1116:	cb 01       	movw	r24, r22
    1118:	8e 8f       	std	Y+30, r24	; 0x1e
    111a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    111c:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    111e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1120:	8a 95       	dec	r24
    1122:	f1 f7       	brne	.-4      	; 0x1120 <HLCD_U8Init+0x482>
    1124:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(40);
	/*send display CLEAR command*/
	HLCD_U8WriteCommand(0b00000001);
    1126:	81 e0       	ldi	r24, 0x01	; 1
    1128:	0e 94 08 0a 	call	0x1410	; 0x1410 <HLCD_U8WriteCommand>
    112c:	80 e0       	ldi	r24, 0x00	; 0
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	a0 e0       	ldi	r26, 0x00	; 0
    1132:	b0 e4       	ldi	r27, 0x40	; 64
    1134:	8b 87       	std	Y+11, r24	; 0x0b
    1136:	9c 87       	std	Y+12, r25	; 0x0c
    1138:	ad 87       	std	Y+13, r26	; 0x0d
    113a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    113c:	6b 85       	ldd	r22, Y+11	; 0x0b
    113e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1140:	8d 85       	ldd	r24, Y+13	; 0x0d
    1142:	9e 85       	ldd	r25, Y+14	; 0x0e
    1144:	20 e0       	ldi	r18, 0x00	; 0
    1146:	30 e0       	ldi	r19, 0x00	; 0
    1148:	4a ef       	ldi	r20, 0xFA	; 250
    114a:	54 e4       	ldi	r21, 0x44	; 68
    114c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1150:	dc 01       	movw	r26, r24
    1152:	cb 01       	movw	r24, r22
    1154:	8f 83       	std	Y+7, r24	; 0x07
    1156:	98 87       	std	Y+8, r25	; 0x08
    1158:	a9 87       	std	Y+9, r26	; 0x09
    115a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    115c:	6f 81       	ldd	r22, Y+7	; 0x07
    115e:	78 85       	ldd	r23, Y+8	; 0x08
    1160:	89 85       	ldd	r24, Y+9	; 0x09
    1162:	9a 85       	ldd	r25, Y+10	; 0x0a
    1164:	20 e0       	ldi	r18, 0x00	; 0
    1166:	30 e0       	ldi	r19, 0x00	; 0
    1168:	40 e8       	ldi	r20, 0x80	; 128
    116a:	5f e3       	ldi	r21, 0x3F	; 63
    116c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1170:	88 23       	and	r24, r24
    1172:	2c f4       	brge	.+10     	; 0x117e <HLCD_U8Init+0x4e0>
		__ticks = 1;
    1174:	81 e0       	ldi	r24, 0x01	; 1
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	9e 83       	std	Y+6, r25	; 0x06
    117a:	8d 83       	std	Y+5, r24	; 0x05
    117c:	3f c0       	rjmp	.+126    	; 0x11fc <HLCD_U8Init+0x55e>
	else if (__tmp > 65535)
    117e:	6f 81       	ldd	r22, Y+7	; 0x07
    1180:	78 85       	ldd	r23, Y+8	; 0x08
    1182:	89 85       	ldd	r24, Y+9	; 0x09
    1184:	9a 85       	ldd	r25, Y+10	; 0x0a
    1186:	20 e0       	ldi	r18, 0x00	; 0
    1188:	3f ef       	ldi	r19, 0xFF	; 255
    118a:	4f e7       	ldi	r20, 0x7F	; 127
    118c:	57 e4       	ldi	r21, 0x47	; 71
    118e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1192:	18 16       	cp	r1, r24
    1194:	4c f5       	brge	.+82     	; 0x11e8 <HLCD_U8Init+0x54a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1196:	6b 85       	ldd	r22, Y+11	; 0x0b
    1198:	7c 85       	ldd	r23, Y+12	; 0x0c
    119a:	8d 85       	ldd	r24, Y+13	; 0x0d
    119c:	9e 85       	ldd	r25, Y+14	; 0x0e
    119e:	20 e0       	ldi	r18, 0x00	; 0
    11a0:	30 e0       	ldi	r19, 0x00	; 0
    11a2:	40 e2       	ldi	r20, 0x20	; 32
    11a4:	51 e4       	ldi	r21, 0x41	; 65
    11a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11aa:	dc 01       	movw	r26, r24
    11ac:	cb 01       	movw	r24, r22
    11ae:	bc 01       	movw	r22, r24
    11b0:	cd 01       	movw	r24, r26
    11b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11b6:	dc 01       	movw	r26, r24
    11b8:	cb 01       	movw	r24, r22
    11ba:	9e 83       	std	Y+6, r25	; 0x06
    11bc:	8d 83       	std	Y+5, r24	; 0x05
    11be:	0f c0       	rjmp	.+30     	; 0x11de <HLCD_U8Init+0x540>
    11c0:	88 ec       	ldi	r24, 0xC8	; 200
    11c2:	90 e0       	ldi	r25, 0x00	; 0
    11c4:	9c 83       	std	Y+4, r25	; 0x04
    11c6:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    11c8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ca:	9c 81       	ldd	r25, Y+4	; 0x04
    11cc:	01 97       	sbiw	r24, 0x01	; 1
    11ce:	f1 f7       	brne	.-4      	; 0x11cc <HLCD_U8Init+0x52e>
    11d0:	9c 83       	std	Y+4, r25	; 0x04
    11d2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11d4:	8d 81       	ldd	r24, Y+5	; 0x05
    11d6:	9e 81       	ldd	r25, Y+6	; 0x06
    11d8:	01 97       	sbiw	r24, 0x01	; 1
    11da:	9e 83       	std	Y+6, r25	; 0x06
    11dc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11de:	8d 81       	ldd	r24, Y+5	; 0x05
    11e0:	9e 81       	ldd	r25, Y+6	; 0x06
    11e2:	00 97       	sbiw	r24, 0x00	; 0
    11e4:	69 f7       	brne	.-38     	; 0x11c0 <HLCD_U8Init+0x522>
    11e6:	14 c0       	rjmp	.+40     	; 0x1210 <HLCD_U8Init+0x572>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11e8:	6f 81       	ldd	r22, Y+7	; 0x07
    11ea:	78 85       	ldd	r23, Y+8	; 0x08
    11ec:	89 85       	ldd	r24, Y+9	; 0x09
    11ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    11f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11f4:	dc 01       	movw	r26, r24
    11f6:	cb 01       	movw	r24, r22
    11f8:	9e 83       	std	Y+6, r25	; 0x06
    11fa:	8d 83       	std	Y+5, r24	; 0x05
    11fc:	8d 81       	ldd	r24, Y+5	; 0x05
    11fe:	9e 81       	ldd	r25, Y+6	; 0x06
    1200:	9a 83       	std	Y+2, r25	; 0x02
    1202:	89 83       	std	Y+1, r24	; 0x01
    1204:	89 81       	ldd	r24, Y+1	; 0x01
    1206:	9a 81       	ldd	r25, Y+2	; 0x02
    1208:	01 97       	sbiw	r24, 0x01	; 1
    120a:	f1 f7       	brne	.-4      	; 0x1208 <HLCD_U8Init+0x56a>
    120c:	9a 83       	std	Y+2, r25	; 0x02
    120e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	/*send ENTERY MODE SET command*/
	HLCD_U8WriteCommand(0b00000110);
    1210:	86 e0       	ldi	r24, 0x06	; 6
    1212:	0e 94 08 0a 	call	0x1410	; 0x1410 <HLCD_U8WriteCommand>
	return Local_u8ErrorState;
    1216:	fe 01       	movw	r30, r28
    1218:	e3 5b       	subi	r30, 0xB3	; 179
    121a:	ff 4f       	sbci	r31, 0xFF	; 255
    121c:	80 81       	ld	r24, Z
}
    121e:	c3 5b       	subi	r28, 0xB3	; 179
    1220:	df 4f       	sbci	r29, 0xFF	; 255
    1222:	0f b6       	in	r0, 0x3f	; 63
    1224:	f8 94       	cli
    1226:	de bf       	out	0x3e, r29	; 62
    1228:	0f be       	out	0x3f, r0	; 63
    122a:	cd bf       	out	0x3d, r28	; 61
    122c:	cf 91       	pop	r28
    122e:	df 91       	pop	r29
    1230:	1f 91       	pop	r17
    1232:	0f 91       	pop	r16
    1234:	08 95       	ret

00001236 <HLCD_U8WriteChar>:
u8 HLCD_U8WriteChar(u8 Copy_u8Char){
    1236:	df 93       	push	r29
    1238:	cf 93       	push	r28
    123a:	cd b7       	in	r28, 0x3d	; 61
    123c:	de b7       	in	r29, 0x3e	; 62
    123e:	6a 97       	sbiw	r28, 0x1a	; 26
    1240:	0f b6       	in	r0, 0x3f	; 63
    1242:	f8 94       	cli
    1244:	de bf       	out	0x3e, r29	; 62
    1246:	0f be       	out	0x3f, r0	; 63
    1248:	cd bf       	out	0x3d, r28	; 61
    124a:	8a 8f       	std	Y+26, r24	; 0x1a
	u8 Local_u8ErrorState = STD_TYPES_OK;
    124c:	81 e0       	ldi	r24, 0x01	; 1
    124e:	89 8f       	std	Y+25, r24	; 0x19
	/*1- set RS high(Data)
	 *2- set RW low to write
	 *3- send command on data pins
	 *4- send pulse to enable(E) pin to let LCD read the data */
	MDIO_u8SetPinValue(HLCD_U8_RS_PORT,HLCD_U8_RS_PIN,MDIO_U8_HIGH);
    1250:	82 e0       	ldi	r24, 0x02	; 2
    1252:	60 e0       	ldi	r22, 0x00	; 0
    1254:	41 e0       	ldi	r20, 0x01	; 1
    1256:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <MDIO_u8SetPinValue>
	MDIO_u8SetPinValue(HLCD_U8_RW_PORT,HLCD_U8_RW_PIN,MDIO_U8_LOW);
    125a:	82 e0       	ldi	r24, 0x02	; 2
    125c:	61 e0       	ldi	r22, 0x01	; 1
    125e:	40 e0       	ldi	r20, 0x00	; 0
    1260:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <MDIO_u8SetPinValue>
	MDIO_u8SetPortValue(HLCD_U8_DATA_PORT,Copy_u8Char);
    1264:	80 e0       	ldi	r24, 0x00	; 0
    1266:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1268:	0e 94 82 10 	call	0x2104	; 0x2104 <MDIO_u8SetPortValue>
	MDIO_u8SetPinValue(HLCD_U8_E_PORT,HLCD_U8_E_PIN,MDIO_U8_HIGH);
    126c:	82 e0       	ldi	r24, 0x02	; 2
    126e:	62 e0       	ldi	r22, 0x02	; 2
    1270:	41 e0       	ldi	r20, 0x01	; 1
    1272:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <MDIO_u8SetPinValue>
    1276:	80 e0       	ldi	r24, 0x00	; 0
    1278:	90 e0       	ldi	r25, 0x00	; 0
    127a:	a0 e8       	ldi	r26, 0x80	; 128
    127c:	bf e3       	ldi	r27, 0x3F	; 63
    127e:	8d 8b       	std	Y+21, r24	; 0x15
    1280:	9e 8b       	std	Y+22, r25	; 0x16
    1282:	af 8b       	std	Y+23, r26	; 0x17
    1284:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1286:	6d 89       	ldd	r22, Y+21	; 0x15
    1288:	7e 89       	ldd	r23, Y+22	; 0x16
    128a:	8f 89       	ldd	r24, Y+23	; 0x17
    128c:	98 8d       	ldd	r25, Y+24	; 0x18
    128e:	2b ea       	ldi	r18, 0xAB	; 171
    1290:	3a ea       	ldi	r19, 0xAA	; 170
    1292:	4a e2       	ldi	r20, 0x2A	; 42
    1294:	50 e4       	ldi	r21, 0x40	; 64
    1296:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    129a:	dc 01       	movw	r26, r24
    129c:	cb 01       	movw	r24, r22
    129e:	89 8b       	std	Y+17, r24	; 0x11
    12a0:	9a 8b       	std	Y+18, r25	; 0x12
    12a2:	ab 8b       	std	Y+19, r26	; 0x13
    12a4:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    12a6:	69 89       	ldd	r22, Y+17	; 0x11
    12a8:	7a 89       	ldd	r23, Y+18	; 0x12
    12aa:	8b 89       	ldd	r24, Y+19	; 0x13
    12ac:	9c 89       	ldd	r25, Y+20	; 0x14
    12ae:	20 e0       	ldi	r18, 0x00	; 0
    12b0:	30 e0       	ldi	r19, 0x00	; 0
    12b2:	40 e8       	ldi	r20, 0x80	; 128
    12b4:	5f e3       	ldi	r21, 0x3F	; 63
    12b6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    12ba:	88 23       	and	r24, r24
    12bc:	1c f4       	brge	.+6      	; 0x12c4 <HLCD_U8WriteChar+0x8e>
		__ticks = 1;
    12be:	81 e0       	ldi	r24, 0x01	; 1
    12c0:	88 8b       	std	Y+16, r24	; 0x10
    12c2:	91 c0       	rjmp	.+290    	; 0x13e6 <HLCD_U8WriteChar+0x1b0>
	else if (__tmp > 255)
    12c4:	69 89       	ldd	r22, Y+17	; 0x11
    12c6:	7a 89       	ldd	r23, Y+18	; 0x12
    12c8:	8b 89       	ldd	r24, Y+19	; 0x13
    12ca:	9c 89       	ldd	r25, Y+20	; 0x14
    12cc:	20 e0       	ldi	r18, 0x00	; 0
    12ce:	30 e0       	ldi	r19, 0x00	; 0
    12d0:	4f e7       	ldi	r20, 0x7F	; 127
    12d2:	53 e4       	ldi	r21, 0x43	; 67
    12d4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    12d8:	18 16       	cp	r1, r24
    12da:	0c f0       	brlt	.+2      	; 0x12de <HLCD_U8WriteChar+0xa8>
    12dc:	7b c0       	rjmp	.+246    	; 0x13d4 <HLCD_U8WriteChar+0x19e>
	{
		_delay_ms(__us / 1000.0);
    12de:	6d 89       	ldd	r22, Y+21	; 0x15
    12e0:	7e 89       	ldd	r23, Y+22	; 0x16
    12e2:	8f 89       	ldd	r24, Y+23	; 0x17
    12e4:	98 8d       	ldd	r25, Y+24	; 0x18
    12e6:	20 e0       	ldi	r18, 0x00	; 0
    12e8:	30 e0       	ldi	r19, 0x00	; 0
    12ea:	4a e7       	ldi	r20, 0x7A	; 122
    12ec:	54 e4       	ldi	r21, 0x44	; 68
    12ee:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    12f2:	dc 01       	movw	r26, r24
    12f4:	cb 01       	movw	r24, r22
    12f6:	8c 87       	std	Y+12, r24	; 0x0c
    12f8:	9d 87       	std	Y+13, r25	; 0x0d
    12fa:	ae 87       	std	Y+14, r26	; 0x0e
    12fc:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12fe:	6c 85       	ldd	r22, Y+12	; 0x0c
    1300:	7d 85       	ldd	r23, Y+13	; 0x0d
    1302:	8e 85       	ldd	r24, Y+14	; 0x0e
    1304:	9f 85       	ldd	r25, Y+15	; 0x0f
    1306:	20 e0       	ldi	r18, 0x00	; 0
    1308:	30 e0       	ldi	r19, 0x00	; 0
    130a:	4a ef       	ldi	r20, 0xFA	; 250
    130c:	54 e4       	ldi	r21, 0x44	; 68
    130e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1312:	dc 01       	movw	r26, r24
    1314:	cb 01       	movw	r24, r22
    1316:	88 87       	std	Y+8, r24	; 0x08
    1318:	99 87       	std	Y+9, r25	; 0x09
    131a:	aa 87       	std	Y+10, r26	; 0x0a
    131c:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    131e:	68 85       	ldd	r22, Y+8	; 0x08
    1320:	79 85       	ldd	r23, Y+9	; 0x09
    1322:	8a 85       	ldd	r24, Y+10	; 0x0a
    1324:	9b 85       	ldd	r25, Y+11	; 0x0b
    1326:	20 e0       	ldi	r18, 0x00	; 0
    1328:	30 e0       	ldi	r19, 0x00	; 0
    132a:	40 e8       	ldi	r20, 0x80	; 128
    132c:	5f e3       	ldi	r21, 0x3F	; 63
    132e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1332:	88 23       	and	r24, r24
    1334:	2c f4       	brge	.+10     	; 0x1340 <HLCD_U8WriteChar+0x10a>
		__ticks = 1;
    1336:	81 e0       	ldi	r24, 0x01	; 1
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	9f 83       	std	Y+7, r25	; 0x07
    133c:	8e 83       	std	Y+6, r24	; 0x06
    133e:	3f c0       	rjmp	.+126    	; 0x13be <HLCD_U8WriteChar+0x188>
	else if (__tmp > 65535)
    1340:	68 85       	ldd	r22, Y+8	; 0x08
    1342:	79 85       	ldd	r23, Y+9	; 0x09
    1344:	8a 85       	ldd	r24, Y+10	; 0x0a
    1346:	9b 85       	ldd	r25, Y+11	; 0x0b
    1348:	20 e0       	ldi	r18, 0x00	; 0
    134a:	3f ef       	ldi	r19, 0xFF	; 255
    134c:	4f e7       	ldi	r20, 0x7F	; 127
    134e:	57 e4       	ldi	r21, 0x47	; 71
    1350:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1354:	18 16       	cp	r1, r24
    1356:	4c f5       	brge	.+82     	; 0x13aa <HLCD_U8WriteChar+0x174>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1358:	6c 85       	ldd	r22, Y+12	; 0x0c
    135a:	7d 85       	ldd	r23, Y+13	; 0x0d
    135c:	8e 85       	ldd	r24, Y+14	; 0x0e
    135e:	9f 85       	ldd	r25, Y+15	; 0x0f
    1360:	20 e0       	ldi	r18, 0x00	; 0
    1362:	30 e0       	ldi	r19, 0x00	; 0
    1364:	40 e2       	ldi	r20, 0x20	; 32
    1366:	51 e4       	ldi	r21, 0x41	; 65
    1368:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    136c:	dc 01       	movw	r26, r24
    136e:	cb 01       	movw	r24, r22
    1370:	bc 01       	movw	r22, r24
    1372:	cd 01       	movw	r24, r26
    1374:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1378:	dc 01       	movw	r26, r24
    137a:	cb 01       	movw	r24, r22
    137c:	9f 83       	std	Y+7, r25	; 0x07
    137e:	8e 83       	std	Y+6, r24	; 0x06
    1380:	0f c0       	rjmp	.+30     	; 0x13a0 <HLCD_U8WriteChar+0x16a>
    1382:	88 ec       	ldi	r24, 0xC8	; 200
    1384:	90 e0       	ldi	r25, 0x00	; 0
    1386:	9d 83       	std	Y+5, r25	; 0x05
    1388:	8c 83       	std	Y+4, r24	; 0x04
    138a:	8c 81       	ldd	r24, Y+4	; 0x04
    138c:	9d 81       	ldd	r25, Y+5	; 0x05
    138e:	01 97       	sbiw	r24, 0x01	; 1
    1390:	f1 f7       	brne	.-4      	; 0x138e <HLCD_U8WriteChar+0x158>
    1392:	9d 83       	std	Y+5, r25	; 0x05
    1394:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1396:	8e 81       	ldd	r24, Y+6	; 0x06
    1398:	9f 81       	ldd	r25, Y+7	; 0x07
    139a:	01 97       	sbiw	r24, 0x01	; 1
    139c:	9f 83       	std	Y+7, r25	; 0x07
    139e:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13a0:	8e 81       	ldd	r24, Y+6	; 0x06
    13a2:	9f 81       	ldd	r25, Y+7	; 0x07
    13a4:	00 97       	sbiw	r24, 0x00	; 0
    13a6:	69 f7       	brne	.-38     	; 0x1382 <HLCD_U8WriteChar+0x14c>
    13a8:	24 c0       	rjmp	.+72     	; 0x13f2 <HLCD_U8WriteChar+0x1bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13aa:	68 85       	ldd	r22, Y+8	; 0x08
    13ac:	79 85       	ldd	r23, Y+9	; 0x09
    13ae:	8a 85       	ldd	r24, Y+10	; 0x0a
    13b0:	9b 85       	ldd	r25, Y+11	; 0x0b
    13b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13b6:	dc 01       	movw	r26, r24
    13b8:	cb 01       	movw	r24, r22
    13ba:	9f 83       	std	Y+7, r25	; 0x07
    13bc:	8e 83       	std	Y+6, r24	; 0x06
    13be:	8e 81       	ldd	r24, Y+6	; 0x06
    13c0:	9f 81       	ldd	r25, Y+7	; 0x07
    13c2:	9b 83       	std	Y+3, r25	; 0x03
    13c4:	8a 83       	std	Y+2, r24	; 0x02
    13c6:	8a 81       	ldd	r24, Y+2	; 0x02
    13c8:	9b 81       	ldd	r25, Y+3	; 0x03
    13ca:	01 97       	sbiw	r24, 0x01	; 1
    13cc:	f1 f7       	brne	.-4      	; 0x13ca <HLCD_U8WriteChar+0x194>
    13ce:	9b 83       	std	Y+3, r25	; 0x03
    13d0:	8a 83       	std	Y+2, r24	; 0x02
    13d2:	0f c0       	rjmp	.+30     	; 0x13f2 <HLCD_U8WriteChar+0x1bc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    13d4:	69 89       	ldd	r22, Y+17	; 0x11
    13d6:	7a 89       	ldd	r23, Y+18	; 0x12
    13d8:	8b 89       	ldd	r24, Y+19	; 0x13
    13da:	9c 89       	ldd	r25, Y+20	; 0x14
    13dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13e0:	dc 01       	movw	r26, r24
    13e2:	cb 01       	movw	r24, r22
    13e4:	88 8b       	std	Y+16, r24	; 0x10
    13e6:	88 89       	ldd	r24, Y+16	; 0x10
    13e8:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    13ea:	89 81       	ldd	r24, Y+1	; 0x01
    13ec:	8a 95       	dec	r24
    13ee:	f1 f7       	brne	.-4      	; 0x13ec <HLCD_U8WriteChar+0x1b6>
    13f0:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
	MDIO_u8SetPinValue(HLCD_U8_E_PORT,HLCD_U8_E_PIN,MDIO_U8_LOW);
    13f2:	82 e0       	ldi	r24, 0x02	; 2
    13f4:	62 e0       	ldi	r22, 0x02	; 2
    13f6:	40 e0       	ldi	r20, 0x00	; 0
    13f8:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <MDIO_u8SetPinValue>
	return Local_u8ErrorState;
    13fc:	89 8d       	ldd	r24, Y+25	; 0x19
}
    13fe:	6a 96       	adiw	r28, 0x1a	; 26
    1400:	0f b6       	in	r0, 0x3f	; 63
    1402:	f8 94       	cli
    1404:	de bf       	out	0x3e, r29	; 62
    1406:	0f be       	out	0x3f, r0	; 63
    1408:	cd bf       	out	0x3d, r28	; 61
    140a:	cf 91       	pop	r28
    140c:	df 91       	pop	r29
    140e:	08 95       	ret

00001410 <HLCD_U8WriteCommand>:
u8 HLCD_U8WriteCommand(u8 Copy_u8Cmnd){
    1410:	df 93       	push	r29
    1412:	cf 93       	push	r28
    1414:	cd b7       	in	r28, 0x3d	; 61
    1416:	de b7       	in	r29, 0x3e	; 62
    1418:	6a 97       	sbiw	r28, 0x1a	; 26
    141a:	0f b6       	in	r0, 0x3f	; 63
    141c:	f8 94       	cli
    141e:	de bf       	out	0x3e, r29	; 62
    1420:	0f be       	out	0x3f, r0	; 63
    1422:	cd bf       	out	0x3d, r28	; 61
    1424:	8a 8f       	std	Y+26, r24	; 0x1a
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1426:	81 e0       	ldi	r24, 0x01	; 1
    1428:	89 8f       	std	Y+25, r24	; 0x19
	/*1- set RS low(Command)
	 *2- set RW low to write
	 *3- send command on data pins
	 *4- send pulse to enable(E) pin to let LCD read the data */
	MDIO_u8SetPinValue(HLCD_U8_RS_PORT,HLCD_U8_RS_PIN,MDIO_U8_LOW);
    142a:	82 e0       	ldi	r24, 0x02	; 2
    142c:	60 e0       	ldi	r22, 0x00	; 0
    142e:	40 e0       	ldi	r20, 0x00	; 0
    1430:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <MDIO_u8SetPinValue>
	MDIO_u8SetPinValue(HLCD_U8_RW_PORT,HLCD_U8_RW_PIN,MDIO_U8_LOW);
    1434:	82 e0       	ldi	r24, 0x02	; 2
    1436:	61 e0       	ldi	r22, 0x01	; 1
    1438:	40 e0       	ldi	r20, 0x00	; 0
    143a:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <MDIO_u8SetPinValue>
	MDIO_u8SetPortValue(HLCD_U8_DATA_PORT,Copy_u8Cmnd);
    143e:	80 e0       	ldi	r24, 0x00	; 0
    1440:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1442:	0e 94 82 10 	call	0x2104	; 0x2104 <MDIO_u8SetPortValue>
	MDIO_u8SetPinValue(HLCD_U8_E_PORT,HLCD_U8_E_PIN,MDIO_U8_HIGH);
    1446:	82 e0       	ldi	r24, 0x02	; 2
    1448:	62 e0       	ldi	r22, 0x02	; 2
    144a:	41 e0       	ldi	r20, 0x01	; 1
    144c:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <MDIO_u8SetPinValue>
    1450:	80 e0       	ldi	r24, 0x00	; 0
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	a0 e8       	ldi	r26, 0x80	; 128
    1456:	bf e3       	ldi	r27, 0x3F	; 63
    1458:	8d 8b       	std	Y+21, r24	; 0x15
    145a:	9e 8b       	std	Y+22, r25	; 0x16
    145c:	af 8b       	std	Y+23, r26	; 0x17
    145e:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1460:	6d 89       	ldd	r22, Y+21	; 0x15
    1462:	7e 89       	ldd	r23, Y+22	; 0x16
    1464:	8f 89       	ldd	r24, Y+23	; 0x17
    1466:	98 8d       	ldd	r25, Y+24	; 0x18
    1468:	2b ea       	ldi	r18, 0xAB	; 171
    146a:	3a ea       	ldi	r19, 0xAA	; 170
    146c:	4a e2       	ldi	r20, 0x2A	; 42
    146e:	50 e4       	ldi	r21, 0x40	; 64
    1470:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1474:	dc 01       	movw	r26, r24
    1476:	cb 01       	movw	r24, r22
    1478:	89 8b       	std	Y+17, r24	; 0x11
    147a:	9a 8b       	std	Y+18, r25	; 0x12
    147c:	ab 8b       	std	Y+19, r26	; 0x13
    147e:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1480:	69 89       	ldd	r22, Y+17	; 0x11
    1482:	7a 89       	ldd	r23, Y+18	; 0x12
    1484:	8b 89       	ldd	r24, Y+19	; 0x13
    1486:	9c 89       	ldd	r25, Y+20	; 0x14
    1488:	20 e0       	ldi	r18, 0x00	; 0
    148a:	30 e0       	ldi	r19, 0x00	; 0
    148c:	40 e8       	ldi	r20, 0x80	; 128
    148e:	5f e3       	ldi	r21, 0x3F	; 63
    1490:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1494:	88 23       	and	r24, r24
    1496:	1c f4       	brge	.+6      	; 0x149e <HLCD_U8WriteCommand+0x8e>
		__ticks = 1;
    1498:	81 e0       	ldi	r24, 0x01	; 1
    149a:	88 8b       	std	Y+16, r24	; 0x10
    149c:	91 c0       	rjmp	.+290    	; 0x15c0 <HLCD_U8WriteCommand+0x1b0>
	else if (__tmp > 255)
    149e:	69 89       	ldd	r22, Y+17	; 0x11
    14a0:	7a 89       	ldd	r23, Y+18	; 0x12
    14a2:	8b 89       	ldd	r24, Y+19	; 0x13
    14a4:	9c 89       	ldd	r25, Y+20	; 0x14
    14a6:	20 e0       	ldi	r18, 0x00	; 0
    14a8:	30 e0       	ldi	r19, 0x00	; 0
    14aa:	4f e7       	ldi	r20, 0x7F	; 127
    14ac:	53 e4       	ldi	r21, 0x43	; 67
    14ae:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    14b2:	18 16       	cp	r1, r24
    14b4:	0c f0       	brlt	.+2      	; 0x14b8 <HLCD_U8WriteCommand+0xa8>
    14b6:	7b c0       	rjmp	.+246    	; 0x15ae <HLCD_U8WriteCommand+0x19e>
	{
		_delay_ms(__us / 1000.0);
    14b8:	6d 89       	ldd	r22, Y+21	; 0x15
    14ba:	7e 89       	ldd	r23, Y+22	; 0x16
    14bc:	8f 89       	ldd	r24, Y+23	; 0x17
    14be:	98 8d       	ldd	r25, Y+24	; 0x18
    14c0:	20 e0       	ldi	r18, 0x00	; 0
    14c2:	30 e0       	ldi	r19, 0x00	; 0
    14c4:	4a e7       	ldi	r20, 0x7A	; 122
    14c6:	54 e4       	ldi	r21, 0x44	; 68
    14c8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    14cc:	dc 01       	movw	r26, r24
    14ce:	cb 01       	movw	r24, r22
    14d0:	8c 87       	std	Y+12, r24	; 0x0c
    14d2:	9d 87       	std	Y+13, r25	; 0x0d
    14d4:	ae 87       	std	Y+14, r26	; 0x0e
    14d6:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14d8:	6c 85       	ldd	r22, Y+12	; 0x0c
    14da:	7d 85       	ldd	r23, Y+13	; 0x0d
    14dc:	8e 85       	ldd	r24, Y+14	; 0x0e
    14de:	9f 85       	ldd	r25, Y+15	; 0x0f
    14e0:	20 e0       	ldi	r18, 0x00	; 0
    14e2:	30 e0       	ldi	r19, 0x00	; 0
    14e4:	4a ef       	ldi	r20, 0xFA	; 250
    14e6:	54 e4       	ldi	r21, 0x44	; 68
    14e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14ec:	dc 01       	movw	r26, r24
    14ee:	cb 01       	movw	r24, r22
    14f0:	88 87       	std	Y+8, r24	; 0x08
    14f2:	99 87       	std	Y+9, r25	; 0x09
    14f4:	aa 87       	std	Y+10, r26	; 0x0a
    14f6:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    14f8:	68 85       	ldd	r22, Y+8	; 0x08
    14fa:	79 85       	ldd	r23, Y+9	; 0x09
    14fc:	8a 85       	ldd	r24, Y+10	; 0x0a
    14fe:	9b 85       	ldd	r25, Y+11	; 0x0b
    1500:	20 e0       	ldi	r18, 0x00	; 0
    1502:	30 e0       	ldi	r19, 0x00	; 0
    1504:	40 e8       	ldi	r20, 0x80	; 128
    1506:	5f e3       	ldi	r21, 0x3F	; 63
    1508:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    150c:	88 23       	and	r24, r24
    150e:	2c f4       	brge	.+10     	; 0x151a <HLCD_U8WriteCommand+0x10a>
		__ticks = 1;
    1510:	81 e0       	ldi	r24, 0x01	; 1
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	9f 83       	std	Y+7, r25	; 0x07
    1516:	8e 83       	std	Y+6, r24	; 0x06
    1518:	3f c0       	rjmp	.+126    	; 0x1598 <HLCD_U8WriteCommand+0x188>
	else if (__tmp > 65535)
    151a:	68 85       	ldd	r22, Y+8	; 0x08
    151c:	79 85       	ldd	r23, Y+9	; 0x09
    151e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1520:	9b 85       	ldd	r25, Y+11	; 0x0b
    1522:	20 e0       	ldi	r18, 0x00	; 0
    1524:	3f ef       	ldi	r19, 0xFF	; 255
    1526:	4f e7       	ldi	r20, 0x7F	; 127
    1528:	57 e4       	ldi	r21, 0x47	; 71
    152a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    152e:	18 16       	cp	r1, r24
    1530:	4c f5       	brge	.+82     	; 0x1584 <HLCD_U8WriteCommand+0x174>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1532:	6c 85       	ldd	r22, Y+12	; 0x0c
    1534:	7d 85       	ldd	r23, Y+13	; 0x0d
    1536:	8e 85       	ldd	r24, Y+14	; 0x0e
    1538:	9f 85       	ldd	r25, Y+15	; 0x0f
    153a:	20 e0       	ldi	r18, 0x00	; 0
    153c:	30 e0       	ldi	r19, 0x00	; 0
    153e:	40 e2       	ldi	r20, 0x20	; 32
    1540:	51 e4       	ldi	r21, 0x41	; 65
    1542:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1546:	dc 01       	movw	r26, r24
    1548:	cb 01       	movw	r24, r22
    154a:	bc 01       	movw	r22, r24
    154c:	cd 01       	movw	r24, r26
    154e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1552:	dc 01       	movw	r26, r24
    1554:	cb 01       	movw	r24, r22
    1556:	9f 83       	std	Y+7, r25	; 0x07
    1558:	8e 83       	std	Y+6, r24	; 0x06
    155a:	0f c0       	rjmp	.+30     	; 0x157a <HLCD_U8WriteCommand+0x16a>
    155c:	88 ec       	ldi	r24, 0xC8	; 200
    155e:	90 e0       	ldi	r25, 0x00	; 0
    1560:	9d 83       	std	Y+5, r25	; 0x05
    1562:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1564:	8c 81       	ldd	r24, Y+4	; 0x04
    1566:	9d 81       	ldd	r25, Y+5	; 0x05
    1568:	01 97       	sbiw	r24, 0x01	; 1
    156a:	f1 f7       	brne	.-4      	; 0x1568 <HLCD_U8WriteCommand+0x158>
    156c:	9d 83       	std	Y+5, r25	; 0x05
    156e:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1570:	8e 81       	ldd	r24, Y+6	; 0x06
    1572:	9f 81       	ldd	r25, Y+7	; 0x07
    1574:	01 97       	sbiw	r24, 0x01	; 1
    1576:	9f 83       	std	Y+7, r25	; 0x07
    1578:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    157a:	8e 81       	ldd	r24, Y+6	; 0x06
    157c:	9f 81       	ldd	r25, Y+7	; 0x07
    157e:	00 97       	sbiw	r24, 0x00	; 0
    1580:	69 f7       	brne	.-38     	; 0x155c <HLCD_U8WriteCommand+0x14c>
    1582:	24 c0       	rjmp	.+72     	; 0x15cc <HLCD_U8WriteCommand+0x1bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1584:	68 85       	ldd	r22, Y+8	; 0x08
    1586:	79 85       	ldd	r23, Y+9	; 0x09
    1588:	8a 85       	ldd	r24, Y+10	; 0x0a
    158a:	9b 85       	ldd	r25, Y+11	; 0x0b
    158c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1590:	dc 01       	movw	r26, r24
    1592:	cb 01       	movw	r24, r22
    1594:	9f 83       	std	Y+7, r25	; 0x07
    1596:	8e 83       	std	Y+6, r24	; 0x06
    1598:	8e 81       	ldd	r24, Y+6	; 0x06
    159a:	9f 81       	ldd	r25, Y+7	; 0x07
    159c:	9b 83       	std	Y+3, r25	; 0x03
    159e:	8a 83       	std	Y+2, r24	; 0x02
    15a0:	8a 81       	ldd	r24, Y+2	; 0x02
    15a2:	9b 81       	ldd	r25, Y+3	; 0x03
    15a4:	01 97       	sbiw	r24, 0x01	; 1
    15a6:	f1 f7       	brne	.-4      	; 0x15a4 <HLCD_U8WriteCommand+0x194>
    15a8:	9b 83       	std	Y+3, r25	; 0x03
    15aa:	8a 83       	std	Y+2, r24	; 0x02
    15ac:	0f c0       	rjmp	.+30     	; 0x15cc <HLCD_U8WriteCommand+0x1bc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    15ae:	69 89       	ldd	r22, Y+17	; 0x11
    15b0:	7a 89       	ldd	r23, Y+18	; 0x12
    15b2:	8b 89       	ldd	r24, Y+19	; 0x13
    15b4:	9c 89       	ldd	r25, Y+20	; 0x14
    15b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15ba:	dc 01       	movw	r26, r24
    15bc:	cb 01       	movw	r24, r22
    15be:	88 8b       	std	Y+16, r24	; 0x10
    15c0:	88 89       	ldd	r24, Y+16	; 0x10
    15c2:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    15c4:	89 81       	ldd	r24, Y+1	; 0x01
    15c6:	8a 95       	dec	r24
    15c8:	f1 f7       	brne	.-4      	; 0x15c6 <HLCD_U8WriteCommand+0x1b6>
    15ca:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
	MDIO_u8SetPinValue(HLCD_U8_E_PORT,HLCD_U8_E_PIN,MDIO_U8_LOW);
    15cc:	82 e0       	ldi	r24, 0x02	; 2
    15ce:	62 e0       	ldi	r22, 0x02	; 2
    15d0:	40 e0       	ldi	r20, 0x00	; 0
    15d2:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <MDIO_u8SetPinValue>
	return Local_u8ErrorState;
    15d6:	89 8d       	ldd	r24, Y+25	; 0x19

}
    15d8:	6a 96       	adiw	r28, 0x1a	; 26
    15da:	0f b6       	in	r0, 0x3f	; 63
    15dc:	f8 94       	cli
    15de:	de bf       	out	0x3e, r29	; 62
    15e0:	0f be       	out	0x3f, r0	; 63
    15e2:	cd bf       	out	0x3d, r28	; 61
    15e4:	cf 91       	pop	r28
    15e6:	df 91       	pop	r29
    15e8:	08 95       	ret

000015ea <HLCD_U8SetCursor>:
u8 HLCD_U8SetCursor(u8 Copy_u8LineNumber , u8 Copy_u8CharacterNumber){
    15ea:	df 93       	push	r29
    15ec:	cf 93       	push	r28
    15ee:	00 d0       	rcall	.+0      	; 0x15f0 <HLCD_U8SetCursor+0x6>
    15f0:	0f 92       	push	r0
    15f2:	cd b7       	in	r28, 0x3d	; 61
    15f4:	de b7       	in	r29, 0x3e	; 62
    15f6:	8a 83       	std	Y+2, r24	; 0x02
    15f8:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    15fa:	81 e0       	ldi	r24, 0x01	; 1
    15fc:	89 83       	std	Y+1, r24	; 0x01
	HLCD_U8WriteCommand((0x80|(Copy_u8LineNumber<<6))+Copy_u8CharacterNumber);
    15fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1600:	88 2f       	mov	r24, r24
    1602:	90 e0       	ldi	r25, 0x00	; 0
    1604:	00 24       	eor	r0, r0
    1606:	96 95       	lsr	r25
    1608:	87 95       	ror	r24
    160a:	07 94       	ror	r0
    160c:	96 95       	lsr	r25
    160e:	87 95       	ror	r24
    1610:	07 94       	ror	r0
    1612:	98 2f       	mov	r25, r24
    1614:	80 2d       	mov	r24, r0
    1616:	80 68       	ori	r24, 0x80	; 128
    1618:	98 2f       	mov	r25, r24
    161a:	8b 81       	ldd	r24, Y+3	; 0x03
    161c:	89 0f       	add	r24, r25
    161e:	0e 94 08 0a 	call	0x1410	; 0x1410 <HLCD_U8WriteCommand>
	return Local_u8ErrorState;
    1622:	89 81       	ldd	r24, Y+1	; 0x01
}
    1624:	0f 90       	pop	r0
    1626:	0f 90       	pop	r0
    1628:	0f 90       	pop	r0
    162a:	cf 91       	pop	r28
    162c:	df 91       	pop	r29
    162e:	08 95       	ret

00001630 <HLCD_U8ClearLCD>:
void HLCD_U8ClearLCD(void){
    1630:	df 93       	push	r29
    1632:	cf 93       	push	r28
    1634:	cd b7       	in	r28, 0x3d	; 61
    1636:	de b7       	in	r29, 0x3e	; 62
	HLCD_U8WriteCommand(0b00000001);
    1638:	81 e0       	ldi	r24, 0x01	; 1
    163a:	0e 94 08 0a 	call	0x1410	; 0x1410 <HLCD_U8WriteCommand>
}
    163e:	cf 91       	pop	r28
    1640:	df 91       	pop	r29
    1642:	08 95       	ret

00001644 <HLCD_U8DrawChar>:

void HLCD_U8DrawChar(u8 Copy_u8LineNumber , u8 Copy_u8CharacterNumber , u8 Copy_CharIndex , u8 * Copy_CustomChar){
    1644:	df 93       	push	r29
    1646:	cf 93       	push	r28
    1648:	00 d0       	rcall	.+0      	; 0x164a <HLCD_U8DrawChar+0x6>
    164a:	00 d0       	rcall	.+0      	; 0x164c <HLCD_U8DrawChar+0x8>
    164c:	00 d0       	rcall	.+0      	; 0x164e <HLCD_U8DrawChar+0xa>
    164e:	cd b7       	in	r28, 0x3d	; 61
    1650:	de b7       	in	r29, 0x3e	; 62
    1652:	8a 83       	std	Y+2, r24	; 0x02
    1654:	6b 83       	std	Y+3, r22	; 0x03
    1656:	4c 83       	std	Y+4, r20	; 0x04
    1658:	3e 83       	std	Y+6, r19	; 0x06
    165a:	2d 83       	std	Y+5, r18	; 0x05
	HLCD_U8WriteCommand( 0b01000000 + (Copy_CharIndex*8));
    165c:	8c 81       	ldd	r24, Y+4	; 0x04
    165e:	88 2f       	mov	r24, r24
    1660:	90 e0       	ldi	r25, 0x00	; 0
    1662:	08 96       	adiw	r24, 0x08	; 8
    1664:	88 0f       	add	r24, r24
    1666:	99 1f       	adc	r25, r25
    1668:	88 0f       	add	r24, r24
    166a:	99 1f       	adc	r25, r25
    166c:	88 0f       	add	r24, r24
    166e:	99 1f       	adc	r25, r25
    1670:	0e 94 08 0a 	call	0x1410	; 0x1410 <HLCD_U8WriteCommand>
	for(u8 i=0 ; i<8 ; i++){
    1674:	19 82       	std	Y+1, r1	; 0x01
    1676:	0e c0       	rjmp	.+28     	; 0x1694 <HLCD_U8DrawChar+0x50>
		HLCD_U8WriteChar(Copy_CustomChar[i]);
    1678:	89 81       	ldd	r24, Y+1	; 0x01
    167a:	28 2f       	mov	r18, r24
    167c:	30 e0       	ldi	r19, 0x00	; 0
    167e:	8d 81       	ldd	r24, Y+5	; 0x05
    1680:	9e 81       	ldd	r25, Y+6	; 0x06
    1682:	fc 01       	movw	r30, r24
    1684:	e2 0f       	add	r30, r18
    1686:	f3 1f       	adc	r31, r19
    1688:	80 81       	ld	r24, Z
    168a:	0e 94 1b 09 	call	0x1236	; 0x1236 <HLCD_U8WriteChar>
	HLCD_U8WriteCommand(0b00000001);
}

void HLCD_U8DrawChar(u8 Copy_u8LineNumber , u8 Copy_u8CharacterNumber , u8 Copy_CharIndex , u8 * Copy_CustomChar){
	HLCD_U8WriteCommand( 0b01000000 + (Copy_CharIndex*8));
	for(u8 i=0 ; i<8 ; i++){
    168e:	89 81       	ldd	r24, Y+1	; 0x01
    1690:	8f 5f       	subi	r24, 0xFF	; 255
    1692:	89 83       	std	Y+1, r24	; 0x01
    1694:	89 81       	ldd	r24, Y+1	; 0x01
    1696:	88 30       	cpi	r24, 0x08	; 8
    1698:	78 f3       	brcs	.-34     	; 0x1678 <HLCD_U8DrawChar+0x34>
		HLCD_U8WriteChar(Copy_CustomChar[i]);
	}
	/*PUT AC back to DDRAM*/
	HLCD_U8SetCursor(Copy_u8LineNumber,Copy_u8CharacterNumber);
    169a:	8a 81       	ldd	r24, Y+2	; 0x02
    169c:	6b 81       	ldd	r22, Y+3	; 0x03
    169e:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <HLCD_U8SetCursor>
	/*Display drawn chs on LCD*/
	HLCD_U8WriteChar(Copy_CharIndex);
    16a2:	8c 81       	ldd	r24, Y+4	; 0x04
    16a4:	0e 94 1b 09 	call	0x1236	; 0x1236 <HLCD_U8WriteChar>
}
    16a8:	26 96       	adiw	r28, 0x06	; 6
    16aa:	0f b6       	in	r0, 0x3f	; 63
    16ac:	f8 94       	cli
    16ae:	de bf       	out	0x3e, r29	; 62
    16b0:	0f be       	out	0x3f, r0	; 63
    16b2:	cd bf       	out	0x3d, r28	; 61
    16b4:	cf 91       	pop	r28
    16b6:	df 91       	pop	r29
    16b8:	08 95       	ret

000016ba <HLCD_U8WriteString>:

u8 HLCD_U8WriteString(u8 * Copy_u8String){
    16ba:	df 93       	push	r29
    16bc:	cf 93       	push	r28
    16be:	00 d0       	rcall	.+0      	; 0x16c0 <HLCD_U8WriteString+0x6>
    16c0:	0f 92       	push	r0
    16c2:	cd b7       	in	r28, 0x3d	; 61
    16c4:	de b7       	in	r29, 0x3e	; 62
    16c6:	9a 83       	std	Y+2, r25	; 0x02
    16c8:	89 83       	std	Y+1, r24	; 0x01
    16ca:	0a c0       	rjmp	.+20     	; 0x16e0 <HLCD_U8WriteString+0x26>

	while(*Copy_u8String){
		HLCD_U8WriteChar(*Copy_u8String);
    16cc:	e9 81       	ldd	r30, Y+1	; 0x01
    16ce:	fa 81       	ldd	r31, Y+2	; 0x02
    16d0:	80 81       	ld	r24, Z
    16d2:	0e 94 1b 09 	call	0x1236	; 0x1236 <HLCD_U8WriteChar>
		Copy_u8String++;
    16d6:	89 81       	ldd	r24, Y+1	; 0x01
    16d8:	9a 81       	ldd	r25, Y+2	; 0x02
    16da:	01 96       	adiw	r24, 0x01	; 1
    16dc:	9a 83       	std	Y+2, r25	; 0x02
    16de:	89 83       	std	Y+1, r24	; 0x01
	HLCD_U8WriteChar(Copy_CharIndex);
}

u8 HLCD_U8WriteString(u8 * Copy_u8String){

	while(*Copy_u8String){
    16e0:	e9 81       	ldd	r30, Y+1	; 0x01
    16e2:	fa 81       	ldd	r31, Y+2	; 0x02
    16e4:	80 81       	ld	r24, Z
    16e6:	88 23       	and	r24, r24
    16e8:	89 f7       	brne	.-30     	; 0x16cc <HLCD_U8WriteString+0x12>
		HLCD_U8WriteChar(*Copy_u8String);
		Copy_u8String++;
	}
}
    16ea:	0f 90       	pop	r0
    16ec:	0f 90       	pop	r0
    16ee:	0f 90       	pop	r0
    16f0:	cf 91       	pop	r28
    16f2:	df 91       	pop	r29
    16f4:	08 95       	ret

000016f6 <HLCD_U8WriteNumber>:

u8 HLCD_U8WriteNumber(u8  Copy_u8Number){
    16f6:	df 93       	push	r29
    16f8:	cf 93       	push	r28
    16fa:	cd b7       	in	r28, 0x3d	; 61
    16fc:	de b7       	in	r29, 0x3e	; 62
    16fe:	2f 97       	sbiw	r28, 0x0f	; 15
    1700:	0f b6       	in	r0, 0x3f	; 63
    1702:	f8 94       	cli
    1704:	de bf       	out	0x3e, r29	; 62
    1706:	0f be       	out	0x3f, r0	; 63
    1708:	cd bf       	out	0x3d, r28	; 61
    170a:	89 87       	std	Y+9, r24	; 0x09
	}
	for(j=0 ; j<i ; j++){
		HLCD_U8WriteChar(arr[j]);
	}
	return Local_u8ErrorState;
}
    170c:	2d b7       	in	r18, 0x3d	; 61
    170e:	3e b7       	in	r19, 0x3e	; 62
    1710:	3f 87       	std	Y+15, r19	; 0x0f
    1712:	2e 87       	std	Y+14, r18	; 0x0e
		HLCD_U8WriteChar(*Copy_u8String);
		Copy_u8String++;
	}
}

u8 HLCD_U8WriteNumber(u8  Copy_u8Number){
    1714:	8d b7       	in	r24, 0x3d	; 61
    1716:	9e b7       	in	r25, 0x3e	; 62
    1718:	9b 87       	std	Y+11, r25	; 0x0b
    171a:	8a 87       	std	Y+10, r24	; 0x0a
	int Local_u8ErrorState = 1;
    171c:	81 e0       	ldi	r24, 0x01	; 1
    171e:	90 e0       	ldi	r25, 0x00	; 0
    1720:	9e 83       	std	Y+6, r25	; 0x06
    1722:	8d 83       	std	Y+5, r24	; 0x05
	int j = Copy_u8Number;
    1724:	89 85       	ldd	r24, Y+9	; 0x09
    1726:	88 2f       	mov	r24, r24
    1728:	90 e0       	ldi	r25, 0x00	; 0
    172a:	9c 83       	std	Y+4, r25	; 0x04
    172c:	8b 83       	std	Y+3, r24	; 0x03
	int i=0;
    172e:	1a 82       	std	Y+2, r1	; 0x02
    1730:	19 82       	std	Y+1, r1	; 0x01
	do {
		j /= 10;
    1732:	8b 81       	ldd	r24, Y+3	; 0x03
    1734:	9c 81       	ldd	r25, Y+4	; 0x04
    1736:	2a e0       	ldi	r18, 0x0A	; 10
    1738:	30 e0       	ldi	r19, 0x00	; 0
    173a:	b9 01       	movw	r22, r18
    173c:	0e 94 b9 14 	call	0x2972	; 0x2972 <__divmodhi4>
    1740:	cb 01       	movw	r24, r22
    1742:	9c 83       	std	Y+4, r25	; 0x04
    1744:	8b 83       	std	Y+3, r24	; 0x03
		++i;
    1746:	89 81       	ldd	r24, Y+1	; 0x01
    1748:	9a 81       	ldd	r25, Y+2	; 0x02
    174a:	01 96       	adiw	r24, 0x01	; 1
    174c:	9a 83       	std	Y+2, r25	; 0x02
    174e:	89 83       	std	Y+1, r24	; 0x01
	}

	while (j != 0);
    1750:	8b 81       	ldd	r24, Y+3	; 0x03
    1752:	9c 81       	ldd	r25, Y+4	; 0x04
    1754:	00 97       	sbiw	r24, 0x00	; 0
    1756:	69 f7       	brne	.-38     	; 0x1732 <HLCD_U8WriteNumber+0x3c>
	int arr[i];
    1758:	89 81       	ldd	r24, Y+1	; 0x01
    175a:	9a 81       	ldd	r25, Y+2	; 0x02
    175c:	88 0f       	add	r24, r24
    175e:	99 1f       	adc	r25, r25
    1760:	2d b7       	in	r18, 0x3d	; 61
    1762:	3e b7       	in	r19, 0x3e	; 62
    1764:	28 1b       	sub	r18, r24
    1766:	39 0b       	sbc	r19, r25
    1768:	0f b6       	in	r0, 0x3f	; 63
    176a:	f8 94       	cli
    176c:	3e bf       	out	0x3e, r19	; 62
    176e:	0f be       	out	0x3f, r0	; 63
    1770:	2d bf       	out	0x3d, r18	; 61
    1772:	8d b7       	in	r24, 0x3d	; 61
    1774:	9e b7       	in	r25, 0x3e	; 62
    1776:	01 96       	adiw	r24, 0x01	; 1
    1778:	9d 87       	std	Y+13, r25	; 0x0d
    177a:	8c 87       	std	Y+12, r24	; 0x0c
    177c:	8c 85       	ldd	r24, Y+12	; 0x0c
    177e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1780:	00 96       	adiw	r24, 0x00	; 0
    1782:	9d 87       	std	Y+13, r25	; 0x0d
    1784:	8c 87       	std	Y+12, r24	; 0x0c
    1786:	2c 85       	ldd	r18, Y+12	; 0x0c
    1788:	3d 85       	ldd	r19, Y+13	; 0x0d
    178a:	38 87       	std	Y+8, r19	; 0x08
    178c:	2f 83       	std	Y+7, r18	; 0x07
	for(j=i-1 ; j>=0 ; j--){
    178e:	89 81       	ldd	r24, Y+1	; 0x01
    1790:	9a 81       	ldd	r25, Y+2	; 0x02
    1792:	01 97       	sbiw	r24, 0x01	; 1
    1794:	9c 83       	std	Y+4, r25	; 0x04
    1796:	8b 83       	std	Y+3, r24	; 0x03
    1798:	22 c0       	rjmp	.+68     	; 0x17de <HLCD_U8WriteNumber+0xe8>
		arr[j] = ((Copy_u8Number) % 10)+48;
    179a:	eb 81       	ldd	r30, Y+3	; 0x03
    179c:	fc 81       	ldd	r31, Y+4	; 0x04
    179e:	89 85       	ldd	r24, Y+9	; 0x09
    17a0:	9a e0       	ldi	r25, 0x0A	; 10
    17a2:	69 2f       	mov	r22, r25
    17a4:	0e 94 ad 14 	call	0x295a	; 0x295a <__udivmodqi4>
    17a8:	89 2f       	mov	r24, r25
    17aa:	88 2f       	mov	r24, r24
    17ac:	90 e0       	ldi	r25, 0x00	; 0
    17ae:	ac 01       	movw	r20, r24
    17b0:	40 5d       	subi	r20, 0xD0	; 208
    17b2:	5f 4f       	sbci	r21, 0xFF	; 255
    17b4:	2f 81       	ldd	r18, Y+7	; 0x07
    17b6:	38 85       	ldd	r19, Y+8	; 0x08
    17b8:	cf 01       	movw	r24, r30
    17ba:	88 0f       	add	r24, r24
    17bc:	99 1f       	adc	r25, r25
    17be:	f9 01       	movw	r30, r18
    17c0:	e8 0f       	add	r30, r24
    17c2:	f9 1f       	adc	r31, r25
    17c4:	51 83       	std	Z+1, r21	; 0x01
    17c6:	40 83       	st	Z, r20
		(Copy_u8Number)= (Copy_u8Number)/10;
    17c8:	89 85       	ldd	r24, Y+9	; 0x09
    17ca:	9a e0       	ldi	r25, 0x0A	; 10
    17cc:	69 2f       	mov	r22, r25
    17ce:	0e 94 ad 14 	call	0x295a	; 0x295a <__udivmodqi4>
    17d2:	89 87       	std	Y+9, r24	; 0x09
		++i;
	}

	while (j != 0);
	int arr[i];
	for(j=i-1 ; j>=0 ; j--){
    17d4:	8b 81       	ldd	r24, Y+3	; 0x03
    17d6:	9c 81       	ldd	r25, Y+4	; 0x04
    17d8:	01 97       	sbiw	r24, 0x01	; 1
    17da:	9c 83       	std	Y+4, r25	; 0x04
    17dc:	8b 83       	std	Y+3, r24	; 0x03
    17de:	8b 81       	ldd	r24, Y+3	; 0x03
    17e0:	9c 81       	ldd	r25, Y+4	; 0x04
    17e2:	99 23       	and	r25, r25
    17e4:	d4 f6       	brge	.-76     	; 0x179a <HLCD_U8WriteNumber+0xa4>
		arr[j] = ((Copy_u8Number) % 10)+48;
		(Copy_u8Number)= (Copy_u8Number)/10;
	}
	for(j=0 ; j<i ; j++){
    17e6:	1c 82       	std	Y+4, r1	; 0x04
    17e8:	1b 82       	std	Y+3, r1	; 0x03
    17ea:	12 c0       	rjmp	.+36     	; 0x1810 <HLCD_U8WriteNumber+0x11a>
		HLCD_U8WriteChar(arr[j]);
    17ec:	8b 81       	ldd	r24, Y+3	; 0x03
    17ee:	9c 81       	ldd	r25, Y+4	; 0x04
    17f0:	2f 81       	ldd	r18, Y+7	; 0x07
    17f2:	38 85       	ldd	r19, Y+8	; 0x08
    17f4:	88 0f       	add	r24, r24
    17f6:	99 1f       	adc	r25, r25
    17f8:	f9 01       	movw	r30, r18
    17fa:	e8 0f       	add	r30, r24
    17fc:	f9 1f       	adc	r31, r25
    17fe:	80 81       	ld	r24, Z
    1800:	91 81       	ldd	r25, Z+1	; 0x01
    1802:	0e 94 1b 09 	call	0x1236	; 0x1236 <HLCD_U8WriteChar>
	int arr[i];
	for(j=i-1 ; j>=0 ; j--){
		arr[j] = ((Copy_u8Number) % 10)+48;
		(Copy_u8Number)= (Copy_u8Number)/10;
	}
	for(j=0 ; j<i ; j++){
    1806:	8b 81       	ldd	r24, Y+3	; 0x03
    1808:	9c 81       	ldd	r25, Y+4	; 0x04
    180a:	01 96       	adiw	r24, 0x01	; 1
    180c:	9c 83       	std	Y+4, r25	; 0x04
    180e:	8b 83       	std	Y+3, r24	; 0x03
    1810:	2b 81       	ldd	r18, Y+3	; 0x03
    1812:	3c 81       	ldd	r19, Y+4	; 0x04
    1814:	89 81       	ldd	r24, Y+1	; 0x01
    1816:	9a 81       	ldd	r25, Y+2	; 0x02
    1818:	28 17       	cp	r18, r24
    181a:	39 07       	cpc	r19, r25
    181c:	3c f3       	brlt	.-50     	; 0x17ec <HLCD_U8WriteNumber+0xf6>
		HLCD_U8WriteChar(arr[j]);
	}
	return Local_u8ErrorState;
    181e:	8d 81       	ldd	r24, Y+5	; 0x05
    1820:	2a 85       	ldd	r18, Y+10	; 0x0a
    1822:	3b 85       	ldd	r19, Y+11	; 0x0b
    1824:	0f b6       	in	r0, 0x3f	; 63
    1826:	f8 94       	cli
    1828:	3e bf       	out	0x3e, r19	; 62
    182a:	0f be       	out	0x3f, r0	; 63
    182c:	2d bf       	out	0x3d, r18	; 61
}
    182e:	2e 85       	ldd	r18, Y+14	; 0x0e
    1830:	3f 85       	ldd	r19, Y+15	; 0x0f
    1832:	0f b6       	in	r0, 0x3f	; 63
    1834:	f8 94       	cli
    1836:	3e bf       	out	0x3e, r19	; 62
    1838:	0f be       	out	0x3f, r0	; 63
    183a:	2d bf       	out	0x3d, r18	; 61
    183c:	2f 96       	adiw	r28, 0x0f	; 15
    183e:	0f b6       	in	r0, 0x3f	; 63
    1840:	f8 94       	cli
    1842:	de bf       	out	0x3e, r29	; 62
    1844:	0f be       	out	0x3f, r0	; 63
    1846:	cd bf       	out	0x3d, r28	; 61
    1848:	cf 91       	pop	r28
    184a:	df 91       	pop	r29
    184c:	08 95       	ret

0000184e <MDIO_u8SetPinDirection>:
/* MCAL */
#include "MDIO_Interface.h"
#include "MDIO_Private.h"
#include "MDIO_Config.h"
/*Function implementation*/
u8 MDIO_u8SetPinDirection(u8 Copy_u8PortID , u8 Copy_u8PinID , u8 Copy_u8PinDirection){
    184e:	df 93       	push	r29
    1850:	cf 93       	push	r28
    1852:	cd b7       	in	r28, 0x3d	; 61
    1854:	de b7       	in	r29, 0x3e	; 62
    1856:	2c 97       	sbiw	r28, 0x0c	; 12
    1858:	0f b6       	in	r0, 0x3f	; 63
    185a:	f8 94       	cli
    185c:	de bf       	out	0x3e, r29	; 62
    185e:	0f be       	out	0x3f, r0	; 63
    1860:	cd bf       	out	0x3d, r28	; 61
    1862:	8a 83       	std	Y+2, r24	; 0x02
    1864:	6b 83       	std	Y+3, r22	; 0x03
    1866:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState =0;
    1868:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_u8PinID <= MDIO_U8_PIN_7) && (Copy_u8PortID <= MDIO_U8_PORTD)){
    186a:	8b 81       	ldd	r24, Y+3	; 0x03
    186c:	88 30       	cpi	r24, 0x08	; 8
    186e:	08 f0       	brcs	.+2      	; 0x1872 <MDIO_u8SetPinDirection+0x24>
    1870:	be c1       	rjmp	.+892    	; 0x1bee <MDIO_u8SetPinDirection+0x3a0>
    1872:	8a 81       	ldd	r24, Y+2	; 0x02
    1874:	84 30       	cpi	r24, 0x04	; 4
    1876:	08 f0       	brcs	.+2      	; 0x187a <MDIO_u8SetPinDirection+0x2c>
    1878:	ba c1       	rjmp	.+884    	; 0x1bee <MDIO_u8SetPinDirection+0x3a0>
		Local_u8ErrorState =1;
    187a:	81 e0       	ldi	r24, 0x01	; 1
    187c:	89 83       	std	Y+1, r24	; 0x01
		switch (Copy_u8PinDirection){
    187e:	8c 81       	ldd	r24, Y+4	; 0x04
    1880:	28 2f       	mov	r18, r24
    1882:	30 e0       	ldi	r19, 0x00	; 0
    1884:	3c 87       	std	Y+12, r19	; 0x0c
    1886:	2b 87       	std	Y+11, r18	; 0x0b
    1888:	8b 85       	ldd	r24, Y+11	; 0x0b
    188a:	9c 85       	ldd	r25, Y+12	; 0x0c
    188c:	81 30       	cpi	r24, 0x01	; 1
    188e:	91 05       	cpc	r25, r1
    1890:	09 f4       	brne	.+2      	; 0x1894 <MDIO_u8SetPinDirection+0x46>
    1892:	38 c1       	rjmp	.+624    	; 0x1b04 <MDIO_u8SetPinDirection+0x2b6>
    1894:	2b 85       	ldd	r18, Y+11	; 0x0b
    1896:	3c 85       	ldd	r19, Y+12	; 0x0c
    1898:	22 30       	cpi	r18, 0x02	; 2
    189a:	31 05       	cpc	r19, r1
    189c:	09 f4       	brne	.+2      	; 0x18a0 <MDIO_u8SetPinDirection+0x52>
    189e:	74 c0       	rjmp	.+232    	; 0x1988 <MDIO_u8SetPinDirection+0x13a>
    18a0:	8b 85       	ldd	r24, Y+11	; 0x0b
    18a2:	9c 85       	ldd	r25, Y+12	; 0x0c
    18a4:	00 97       	sbiw	r24, 0x00	; 0
    18a6:	09 f0       	breq	.+2      	; 0x18aa <MDIO_u8SetPinDirection+0x5c>
    18a8:	a1 c1       	rjmp	.+834    	; 0x1bec <MDIO_u8SetPinDirection+0x39e>
		case(MDIO_U8_OUTPUT):
			switch(Copy_u8PortID){
    18aa:	8a 81       	ldd	r24, Y+2	; 0x02
    18ac:	28 2f       	mov	r18, r24
    18ae:	30 e0       	ldi	r19, 0x00	; 0
    18b0:	3a 87       	std	Y+10, r19	; 0x0a
    18b2:	29 87       	std	Y+9, r18	; 0x09
    18b4:	89 85       	ldd	r24, Y+9	; 0x09
    18b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    18b8:	81 30       	cpi	r24, 0x01	; 1
    18ba:	91 05       	cpc	r25, r1
    18bc:	49 f1       	breq	.+82     	; 0x1910 <MDIO_u8SetPinDirection+0xc2>
    18be:	29 85       	ldd	r18, Y+9	; 0x09
    18c0:	3a 85       	ldd	r19, Y+10	; 0x0a
    18c2:	22 30       	cpi	r18, 0x02	; 2
    18c4:	31 05       	cpc	r19, r1
    18c6:	2c f4       	brge	.+10     	; 0x18d2 <MDIO_u8SetPinDirection+0x84>
    18c8:	89 85       	ldd	r24, Y+9	; 0x09
    18ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    18cc:	00 97       	sbiw	r24, 0x00	; 0
    18ce:	61 f0       	breq	.+24     	; 0x18e8 <MDIO_u8SetPinDirection+0x9a>
    18d0:	8e c1       	rjmp	.+796    	; 0x1bee <MDIO_u8SetPinDirection+0x3a0>
    18d2:	29 85       	ldd	r18, Y+9	; 0x09
    18d4:	3a 85       	ldd	r19, Y+10	; 0x0a
    18d6:	22 30       	cpi	r18, 0x02	; 2
    18d8:	31 05       	cpc	r19, r1
    18da:	71 f1       	breq	.+92     	; 0x1938 <MDIO_u8SetPinDirection+0xea>
    18dc:	89 85       	ldd	r24, Y+9	; 0x09
    18de:	9a 85       	ldd	r25, Y+10	; 0x0a
    18e0:	83 30       	cpi	r24, 0x03	; 3
    18e2:	91 05       	cpc	r25, r1
    18e4:	e9 f1       	breq	.+122    	; 0x1960 <MDIO_u8SetPinDirection+0x112>
    18e6:	83 c1       	rjmp	.+774    	; 0x1bee <MDIO_u8SetPinDirection+0x3a0>
			case(MDIO_U8_PORTA):SET_BIT(MDIO_U8_DDRA,Copy_u8PinID);break;
    18e8:	aa e3       	ldi	r26, 0x3A	; 58
    18ea:	b0 e0       	ldi	r27, 0x00	; 0
    18ec:	ea e3       	ldi	r30, 0x3A	; 58
    18ee:	f0 e0       	ldi	r31, 0x00	; 0
    18f0:	80 81       	ld	r24, Z
    18f2:	48 2f       	mov	r20, r24
    18f4:	8b 81       	ldd	r24, Y+3	; 0x03
    18f6:	28 2f       	mov	r18, r24
    18f8:	30 e0       	ldi	r19, 0x00	; 0
    18fa:	81 e0       	ldi	r24, 0x01	; 1
    18fc:	90 e0       	ldi	r25, 0x00	; 0
    18fe:	02 2e       	mov	r0, r18
    1900:	02 c0       	rjmp	.+4      	; 0x1906 <MDIO_u8SetPinDirection+0xb8>
    1902:	88 0f       	add	r24, r24
    1904:	99 1f       	adc	r25, r25
    1906:	0a 94       	dec	r0
    1908:	e2 f7       	brpl	.-8      	; 0x1902 <MDIO_u8SetPinDirection+0xb4>
    190a:	84 2b       	or	r24, r20
    190c:	8c 93       	st	X, r24
    190e:	6f c1       	rjmp	.+734    	; 0x1bee <MDIO_u8SetPinDirection+0x3a0>
			case(MDIO_U8_PORTB):SET_BIT(MDIO_U8_DDRB,Copy_u8PinID);break;
    1910:	a7 e3       	ldi	r26, 0x37	; 55
    1912:	b0 e0       	ldi	r27, 0x00	; 0
    1914:	e7 e3       	ldi	r30, 0x37	; 55
    1916:	f0 e0       	ldi	r31, 0x00	; 0
    1918:	80 81       	ld	r24, Z
    191a:	48 2f       	mov	r20, r24
    191c:	8b 81       	ldd	r24, Y+3	; 0x03
    191e:	28 2f       	mov	r18, r24
    1920:	30 e0       	ldi	r19, 0x00	; 0
    1922:	81 e0       	ldi	r24, 0x01	; 1
    1924:	90 e0       	ldi	r25, 0x00	; 0
    1926:	02 2e       	mov	r0, r18
    1928:	02 c0       	rjmp	.+4      	; 0x192e <MDIO_u8SetPinDirection+0xe0>
    192a:	88 0f       	add	r24, r24
    192c:	99 1f       	adc	r25, r25
    192e:	0a 94       	dec	r0
    1930:	e2 f7       	brpl	.-8      	; 0x192a <MDIO_u8SetPinDirection+0xdc>
    1932:	84 2b       	or	r24, r20
    1934:	8c 93       	st	X, r24
    1936:	5b c1       	rjmp	.+694    	; 0x1bee <MDIO_u8SetPinDirection+0x3a0>
			case(MDIO_U8_PORTC):SET_BIT(MDIO_U8_DDRC,Copy_u8PinID);break;
    1938:	a4 e3       	ldi	r26, 0x34	; 52
    193a:	b0 e0       	ldi	r27, 0x00	; 0
    193c:	e4 e3       	ldi	r30, 0x34	; 52
    193e:	f0 e0       	ldi	r31, 0x00	; 0
    1940:	80 81       	ld	r24, Z
    1942:	48 2f       	mov	r20, r24
    1944:	8b 81       	ldd	r24, Y+3	; 0x03
    1946:	28 2f       	mov	r18, r24
    1948:	30 e0       	ldi	r19, 0x00	; 0
    194a:	81 e0       	ldi	r24, 0x01	; 1
    194c:	90 e0       	ldi	r25, 0x00	; 0
    194e:	02 2e       	mov	r0, r18
    1950:	02 c0       	rjmp	.+4      	; 0x1956 <MDIO_u8SetPinDirection+0x108>
    1952:	88 0f       	add	r24, r24
    1954:	99 1f       	adc	r25, r25
    1956:	0a 94       	dec	r0
    1958:	e2 f7       	brpl	.-8      	; 0x1952 <MDIO_u8SetPinDirection+0x104>
    195a:	84 2b       	or	r24, r20
    195c:	8c 93       	st	X, r24
    195e:	47 c1       	rjmp	.+654    	; 0x1bee <MDIO_u8SetPinDirection+0x3a0>
			case(MDIO_U8_PORTD):SET_BIT(MDIO_U8_DDRD,Copy_u8PinID);break;
    1960:	a1 e3       	ldi	r26, 0x31	; 49
    1962:	b0 e0       	ldi	r27, 0x00	; 0
    1964:	e1 e3       	ldi	r30, 0x31	; 49
    1966:	f0 e0       	ldi	r31, 0x00	; 0
    1968:	80 81       	ld	r24, Z
    196a:	48 2f       	mov	r20, r24
    196c:	8b 81       	ldd	r24, Y+3	; 0x03
    196e:	28 2f       	mov	r18, r24
    1970:	30 e0       	ldi	r19, 0x00	; 0
    1972:	81 e0       	ldi	r24, 0x01	; 1
    1974:	90 e0       	ldi	r25, 0x00	; 0
    1976:	02 2e       	mov	r0, r18
    1978:	02 c0       	rjmp	.+4      	; 0x197e <MDIO_u8SetPinDirection+0x130>
    197a:	88 0f       	add	r24, r24
    197c:	99 1f       	adc	r25, r25
    197e:	0a 94       	dec	r0
    1980:	e2 f7       	brpl	.-8      	; 0x197a <MDIO_u8SetPinDirection+0x12c>
    1982:	84 2b       	or	r24, r20
    1984:	8c 93       	st	X, r24
    1986:	33 c1       	rjmp	.+614    	; 0x1bee <MDIO_u8SetPinDirection+0x3a0>
			}break;
		case(MDIO_U8_INPUT_PULLED_UP):
			switch(Copy_u8PortID){
    1988:	8a 81       	ldd	r24, Y+2	; 0x02
    198a:	28 2f       	mov	r18, r24
    198c:	30 e0       	ldi	r19, 0x00	; 0
    198e:	38 87       	std	Y+8, r19	; 0x08
    1990:	2f 83       	std	Y+7, r18	; 0x07
    1992:	8f 81       	ldd	r24, Y+7	; 0x07
    1994:	98 85       	ldd	r25, Y+8	; 0x08
    1996:	81 30       	cpi	r24, 0x01	; 1
    1998:	91 05       	cpc	r25, r1
    199a:	09 f4       	brne	.+2      	; 0x199e <MDIO_u8SetPinDirection+0x150>
    199c:	3e c0       	rjmp	.+124    	; 0x1a1a <MDIO_u8SetPinDirection+0x1cc>
    199e:	2f 81       	ldd	r18, Y+7	; 0x07
    19a0:	38 85       	ldd	r19, Y+8	; 0x08
    19a2:	22 30       	cpi	r18, 0x02	; 2
    19a4:	31 05       	cpc	r19, r1
    19a6:	2c f4       	brge	.+10     	; 0x19b2 <MDIO_u8SetPinDirection+0x164>
    19a8:	8f 81       	ldd	r24, Y+7	; 0x07
    19aa:	98 85       	ldd	r25, Y+8	; 0x08
    19ac:	00 97       	sbiw	r24, 0x00	; 0
    19ae:	71 f0       	breq	.+28     	; 0x19cc <MDIO_u8SetPinDirection+0x17e>
    19b0:	1e c1       	rjmp	.+572    	; 0x1bee <MDIO_u8SetPinDirection+0x3a0>
    19b2:	2f 81       	ldd	r18, Y+7	; 0x07
    19b4:	38 85       	ldd	r19, Y+8	; 0x08
    19b6:	22 30       	cpi	r18, 0x02	; 2
    19b8:	31 05       	cpc	r19, r1
    19ba:	09 f4       	brne	.+2      	; 0x19be <MDIO_u8SetPinDirection+0x170>
    19bc:	55 c0       	rjmp	.+170    	; 0x1a68 <MDIO_u8SetPinDirection+0x21a>
    19be:	8f 81       	ldd	r24, Y+7	; 0x07
    19c0:	98 85       	ldd	r25, Y+8	; 0x08
    19c2:	83 30       	cpi	r24, 0x03	; 3
    19c4:	91 05       	cpc	r25, r1
    19c6:	09 f4       	brne	.+2      	; 0x19ca <MDIO_u8SetPinDirection+0x17c>
    19c8:	76 c0       	rjmp	.+236    	; 0x1ab6 <MDIO_u8SetPinDirection+0x268>
    19ca:	11 c1       	rjmp	.+546    	; 0x1bee <MDIO_u8SetPinDirection+0x3a0>
			case(MDIO_U8_PORTA):CLEAR_BIT(MDIO_U8_DDRA,Copy_u8PinID);SET_BIT(MDIO_U8_PORTA_REG,Copy_u8PinID);break;
    19cc:	aa e3       	ldi	r26, 0x3A	; 58
    19ce:	b0 e0       	ldi	r27, 0x00	; 0
    19d0:	ea e3       	ldi	r30, 0x3A	; 58
    19d2:	f0 e0       	ldi	r31, 0x00	; 0
    19d4:	80 81       	ld	r24, Z
    19d6:	48 2f       	mov	r20, r24
    19d8:	8b 81       	ldd	r24, Y+3	; 0x03
    19da:	28 2f       	mov	r18, r24
    19dc:	30 e0       	ldi	r19, 0x00	; 0
    19de:	81 e0       	ldi	r24, 0x01	; 1
    19e0:	90 e0       	ldi	r25, 0x00	; 0
    19e2:	02 c0       	rjmp	.+4      	; 0x19e8 <MDIO_u8SetPinDirection+0x19a>
    19e4:	88 0f       	add	r24, r24
    19e6:	99 1f       	adc	r25, r25
    19e8:	2a 95       	dec	r18
    19ea:	e2 f7       	brpl	.-8      	; 0x19e4 <MDIO_u8SetPinDirection+0x196>
    19ec:	80 95       	com	r24
    19ee:	84 23       	and	r24, r20
    19f0:	8c 93       	st	X, r24
    19f2:	ab e3       	ldi	r26, 0x3B	; 59
    19f4:	b0 e0       	ldi	r27, 0x00	; 0
    19f6:	eb e3       	ldi	r30, 0x3B	; 59
    19f8:	f0 e0       	ldi	r31, 0x00	; 0
    19fa:	80 81       	ld	r24, Z
    19fc:	48 2f       	mov	r20, r24
    19fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1a00:	28 2f       	mov	r18, r24
    1a02:	30 e0       	ldi	r19, 0x00	; 0
    1a04:	81 e0       	ldi	r24, 0x01	; 1
    1a06:	90 e0       	ldi	r25, 0x00	; 0
    1a08:	02 2e       	mov	r0, r18
    1a0a:	02 c0       	rjmp	.+4      	; 0x1a10 <MDIO_u8SetPinDirection+0x1c2>
    1a0c:	88 0f       	add	r24, r24
    1a0e:	99 1f       	adc	r25, r25
    1a10:	0a 94       	dec	r0
    1a12:	e2 f7       	brpl	.-8      	; 0x1a0c <MDIO_u8SetPinDirection+0x1be>
    1a14:	84 2b       	or	r24, r20
    1a16:	8c 93       	st	X, r24
    1a18:	ea c0       	rjmp	.+468    	; 0x1bee <MDIO_u8SetPinDirection+0x3a0>
			case(MDIO_U8_PORTB):CLEAR_BIT(MDIO_U8_DDRB,Copy_u8PinID);SET_BIT(MDIO_U8_PORTB_REG,Copy_u8PinID);break;
    1a1a:	a7 e3       	ldi	r26, 0x37	; 55
    1a1c:	b0 e0       	ldi	r27, 0x00	; 0
    1a1e:	e7 e3       	ldi	r30, 0x37	; 55
    1a20:	f0 e0       	ldi	r31, 0x00	; 0
    1a22:	80 81       	ld	r24, Z
    1a24:	48 2f       	mov	r20, r24
    1a26:	8b 81       	ldd	r24, Y+3	; 0x03
    1a28:	28 2f       	mov	r18, r24
    1a2a:	30 e0       	ldi	r19, 0x00	; 0
    1a2c:	81 e0       	ldi	r24, 0x01	; 1
    1a2e:	90 e0       	ldi	r25, 0x00	; 0
    1a30:	02 c0       	rjmp	.+4      	; 0x1a36 <MDIO_u8SetPinDirection+0x1e8>
    1a32:	88 0f       	add	r24, r24
    1a34:	99 1f       	adc	r25, r25
    1a36:	2a 95       	dec	r18
    1a38:	e2 f7       	brpl	.-8      	; 0x1a32 <MDIO_u8SetPinDirection+0x1e4>
    1a3a:	80 95       	com	r24
    1a3c:	84 23       	and	r24, r20
    1a3e:	8c 93       	st	X, r24
    1a40:	a8 e3       	ldi	r26, 0x38	; 56
    1a42:	b0 e0       	ldi	r27, 0x00	; 0
    1a44:	e8 e3       	ldi	r30, 0x38	; 56
    1a46:	f0 e0       	ldi	r31, 0x00	; 0
    1a48:	80 81       	ld	r24, Z
    1a4a:	48 2f       	mov	r20, r24
    1a4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a4e:	28 2f       	mov	r18, r24
    1a50:	30 e0       	ldi	r19, 0x00	; 0
    1a52:	81 e0       	ldi	r24, 0x01	; 1
    1a54:	90 e0       	ldi	r25, 0x00	; 0
    1a56:	02 2e       	mov	r0, r18
    1a58:	02 c0       	rjmp	.+4      	; 0x1a5e <MDIO_u8SetPinDirection+0x210>
    1a5a:	88 0f       	add	r24, r24
    1a5c:	99 1f       	adc	r25, r25
    1a5e:	0a 94       	dec	r0
    1a60:	e2 f7       	brpl	.-8      	; 0x1a5a <MDIO_u8SetPinDirection+0x20c>
    1a62:	84 2b       	or	r24, r20
    1a64:	8c 93       	st	X, r24
    1a66:	c3 c0       	rjmp	.+390    	; 0x1bee <MDIO_u8SetPinDirection+0x3a0>
			case(MDIO_U8_PORTC):CLEAR_BIT(MDIO_U8_DDRC,Copy_u8PinID);SET_BIT(MDIO_U8_PORTC_REG,Copy_u8PinID);break;
    1a68:	a4 e3       	ldi	r26, 0x34	; 52
    1a6a:	b0 e0       	ldi	r27, 0x00	; 0
    1a6c:	e4 e3       	ldi	r30, 0x34	; 52
    1a6e:	f0 e0       	ldi	r31, 0x00	; 0
    1a70:	80 81       	ld	r24, Z
    1a72:	48 2f       	mov	r20, r24
    1a74:	8b 81       	ldd	r24, Y+3	; 0x03
    1a76:	28 2f       	mov	r18, r24
    1a78:	30 e0       	ldi	r19, 0x00	; 0
    1a7a:	81 e0       	ldi	r24, 0x01	; 1
    1a7c:	90 e0       	ldi	r25, 0x00	; 0
    1a7e:	02 c0       	rjmp	.+4      	; 0x1a84 <MDIO_u8SetPinDirection+0x236>
    1a80:	88 0f       	add	r24, r24
    1a82:	99 1f       	adc	r25, r25
    1a84:	2a 95       	dec	r18
    1a86:	e2 f7       	brpl	.-8      	; 0x1a80 <MDIO_u8SetPinDirection+0x232>
    1a88:	80 95       	com	r24
    1a8a:	84 23       	and	r24, r20
    1a8c:	8c 93       	st	X, r24
    1a8e:	a5 e3       	ldi	r26, 0x35	; 53
    1a90:	b0 e0       	ldi	r27, 0x00	; 0
    1a92:	e5 e3       	ldi	r30, 0x35	; 53
    1a94:	f0 e0       	ldi	r31, 0x00	; 0
    1a96:	80 81       	ld	r24, Z
    1a98:	48 2f       	mov	r20, r24
    1a9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a9c:	28 2f       	mov	r18, r24
    1a9e:	30 e0       	ldi	r19, 0x00	; 0
    1aa0:	81 e0       	ldi	r24, 0x01	; 1
    1aa2:	90 e0       	ldi	r25, 0x00	; 0
    1aa4:	02 2e       	mov	r0, r18
    1aa6:	02 c0       	rjmp	.+4      	; 0x1aac <MDIO_u8SetPinDirection+0x25e>
    1aa8:	88 0f       	add	r24, r24
    1aaa:	99 1f       	adc	r25, r25
    1aac:	0a 94       	dec	r0
    1aae:	e2 f7       	brpl	.-8      	; 0x1aa8 <MDIO_u8SetPinDirection+0x25a>
    1ab0:	84 2b       	or	r24, r20
    1ab2:	8c 93       	st	X, r24
    1ab4:	9c c0       	rjmp	.+312    	; 0x1bee <MDIO_u8SetPinDirection+0x3a0>
			case(MDIO_U8_PORTD):CLEAR_BIT(MDIO_U8_DDRD,Copy_u8PinID);SET_BIT(MDIO_U8_PORTD_REG,Copy_u8PinID);break;
    1ab6:	a1 e3       	ldi	r26, 0x31	; 49
    1ab8:	b0 e0       	ldi	r27, 0x00	; 0
    1aba:	e1 e3       	ldi	r30, 0x31	; 49
    1abc:	f0 e0       	ldi	r31, 0x00	; 0
    1abe:	80 81       	ld	r24, Z
    1ac0:	48 2f       	mov	r20, r24
    1ac2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ac4:	28 2f       	mov	r18, r24
    1ac6:	30 e0       	ldi	r19, 0x00	; 0
    1ac8:	81 e0       	ldi	r24, 0x01	; 1
    1aca:	90 e0       	ldi	r25, 0x00	; 0
    1acc:	02 c0       	rjmp	.+4      	; 0x1ad2 <MDIO_u8SetPinDirection+0x284>
    1ace:	88 0f       	add	r24, r24
    1ad0:	99 1f       	adc	r25, r25
    1ad2:	2a 95       	dec	r18
    1ad4:	e2 f7       	brpl	.-8      	; 0x1ace <MDIO_u8SetPinDirection+0x280>
    1ad6:	80 95       	com	r24
    1ad8:	84 23       	and	r24, r20
    1ada:	8c 93       	st	X, r24
    1adc:	a2 e3       	ldi	r26, 0x32	; 50
    1ade:	b0 e0       	ldi	r27, 0x00	; 0
    1ae0:	e2 e3       	ldi	r30, 0x32	; 50
    1ae2:	f0 e0       	ldi	r31, 0x00	; 0
    1ae4:	80 81       	ld	r24, Z
    1ae6:	48 2f       	mov	r20, r24
    1ae8:	8b 81       	ldd	r24, Y+3	; 0x03
    1aea:	28 2f       	mov	r18, r24
    1aec:	30 e0       	ldi	r19, 0x00	; 0
    1aee:	81 e0       	ldi	r24, 0x01	; 1
    1af0:	90 e0       	ldi	r25, 0x00	; 0
    1af2:	02 2e       	mov	r0, r18
    1af4:	02 c0       	rjmp	.+4      	; 0x1afa <MDIO_u8SetPinDirection+0x2ac>
    1af6:	88 0f       	add	r24, r24
    1af8:	99 1f       	adc	r25, r25
    1afa:	0a 94       	dec	r0
    1afc:	e2 f7       	brpl	.-8      	; 0x1af6 <MDIO_u8SetPinDirection+0x2a8>
    1afe:	84 2b       	or	r24, r20
    1b00:	8c 93       	st	X, r24
    1b02:	75 c0       	rjmp	.+234    	; 0x1bee <MDIO_u8SetPinDirection+0x3a0>
			}break;
		case(MDIO_U8_INPUT_FLOATING):
			switch(Copy_u8PortID){
    1b04:	8a 81       	ldd	r24, Y+2	; 0x02
    1b06:	28 2f       	mov	r18, r24
    1b08:	30 e0       	ldi	r19, 0x00	; 0
    1b0a:	3e 83       	std	Y+6, r19	; 0x06
    1b0c:	2d 83       	std	Y+5, r18	; 0x05
    1b0e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b10:	9e 81       	ldd	r25, Y+6	; 0x06
    1b12:	81 30       	cpi	r24, 0x01	; 1
    1b14:	91 05       	cpc	r25, r1
    1b16:	59 f1       	breq	.+86     	; 0x1b6e <MDIO_u8SetPinDirection+0x320>
    1b18:	2d 81       	ldd	r18, Y+5	; 0x05
    1b1a:	3e 81       	ldd	r19, Y+6	; 0x06
    1b1c:	22 30       	cpi	r18, 0x02	; 2
    1b1e:	31 05       	cpc	r19, r1
    1b20:	2c f4       	brge	.+10     	; 0x1b2c <MDIO_u8SetPinDirection+0x2de>
    1b22:	8d 81       	ldd	r24, Y+5	; 0x05
    1b24:	9e 81       	ldd	r25, Y+6	; 0x06
    1b26:	00 97       	sbiw	r24, 0x00	; 0
    1b28:	69 f0       	breq	.+26     	; 0x1b44 <MDIO_u8SetPinDirection+0x2f6>
    1b2a:	61 c0       	rjmp	.+194    	; 0x1bee <MDIO_u8SetPinDirection+0x3a0>
    1b2c:	2d 81       	ldd	r18, Y+5	; 0x05
    1b2e:	3e 81       	ldd	r19, Y+6	; 0x06
    1b30:	22 30       	cpi	r18, 0x02	; 2
    1b32:	31 05       	cpc	r19, r1
    1b34:	89 f1       	breq	.+98     	; 0x1b98 <MDIO_u8SetPinDirection+0x34a>
    1b36:	8d 81       	ldd	r24, Y+5	; 0x05
    1b38:	9e 81       	ldd	r25, Y+6	; 0x06
    1b3a:	83 30       	cpi	r24, 0x03	; 3
    1b3c:	91 05       	cpc	r25, r1
    1b3e:	09 f4       	brne	.+2      	; 0x1b42 <MDIO_u8SetPinDirection+0x2f4>
    1b40:	40 c0       	rjmp	.+128    	; 0x1bc2 <MDIO_u8SetPinDirection+0x374>
    1b42:	55 c0       	rjmp	.+170    	; 0x1bee <MDIO_u8SetPinDirection+0x3a0>
			case(MDIO_U8_PORTA):CLEAR_BIT(MDIO_U8_DDRA,Copy_u8PinID);break;
    1b44:	aa e3       	ldi	r26, 0x3A	; 58
    1b46:	b0 e0       	ldi	r27, 0x00	; 0
    1b48:	ea e3       	ldi	r30, 0x3A	; 58
    1b4a:	f0 e0       	ldi	r31, 0x00	; 0
    1b4c:	80 81       	ld	r24, Z
    1b4e:	48 2f       	mov	r20, r24
    1b50:	8b 81       	ldd	r24, Y+3	; 0x03
    1b52:	28 2f       	mov	r18, r24
    1b54:	30 e0       	ldi	r19, 0x00	; 0
    1b56:	81 e0       	ldi	r24, 0x01	; 1
    1b58:	90 e0       	ldi	r25, 0x00	; 0
    1b5a:	02 2e       	mov	r0, r18
    1b5c:	02 c0       	rjmp	.+4      	; 0x1b62 <MDIO_u8SetPinDirection+0x314>
    1b5e:	88 0f       	add	r24, r24
    1b60:	99 1f       	adc	r25, r25
    1b62:	0a 94       	dec	r0
    1b64:	e2 f7       	brpl	.-8      	; 0x1b5e <MDIO_u8SetPinDirection+0x310>
    1b66:	80 95       	com	r24
    1b68:	84 23       	and	r24, r20
    1b6a:	8c 93       	st	X, r24
    1b6c:	40 c0       	rjmp	.+128    	; 0x1bee <MDIO_u8SetPinDirection+0x3a0>
			case(MDIO_U8_PORTB):CLEAR_BIT(MDIO_U8_DDRB,Copy_u8PinID);break;
    1b6e:	a7 e3       	ldi	r26, 0x37	; 55
    1b70:	b0 e0       	ldi	r27, 0x00	; 0
    1b72:	e7 e3       	ldi	r30, 0x37	; 55
    1b74:	f0 e0       	ldi	r31, 0x00	; 0
    1b76:	80 81       	ld	r24, Z
    1b78:	48 2f       	mov	r20, r24
    1b7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b7c:	28 2f       	mov	r18, r24
    1b7e:	30 e0       	ldi	r19, 0x00	; 0
    1b80:	81 e0       	ldi	r24, 0x01	; 1
    1b82:	90 e0       	ldi	r25, 0x00	; 0
    1b84:	02 2e       	mov	r0, r18
    1b86:	02 c0       	rjmp	.+4      	; 0x1b8c <MDIO_u8SetPinDirection+0x33e>
    1b88:	88 0f       	add	r24, r24
    1b8a:	99 1f       	adc	r25, r25
    1b8c:	0a 94       	dec	r0
    1b8e:	e2 f7       	brpl	.-8      	; 0x1b88 <MDIO_u8SetPinDirection+0x33a>
    1b90:	80 95       	com	r24
    1b92:	84 23       	and	r24, r20
    1b94:	8c 93       	st	X, r24
    1b96:	2b c0       	rjmp	.+86     	; 0x1bee <MDIO_u8SetPinDirection+0x3a0>
			case(MDIO_U8_PORTC):CLEAR_BIT(MDIO_U8_DDRC,Copy_u8PinID);break;
    1b98:	a4 e3       	ldi	r26, 0x34	; 52
    1b9a:	b0 e0       	ldi	r27, 0x00	; 0
    1b9c:	e4 e3       	ldi	r30, 0x34	; 52
    1b9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ba0:	80 81       	ld	r24, Z
    1ba2:	48 2f       	mov	r20, r24
    1ba4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba6:	28 2f       	mov	r18, r24
    1ba8:	30 e0       	ldi	r19, 0x00	; 0
    1baa:	81 e0       	ldi	r24, 0x01	; 1
    1bac:	90 e0       	ldi	r25, 0x00	; 0
    1bae:	02 2e       	mov	r0, r18
    1bb0:	02 c0       	rjmp	.+4      	; 0x1bb6 <MDIO_u8SetPinDirection+0x368>
    1bb2:	88 0f       	add	r24, r24
    1bb4:	99 1f       	adc	r25, r25
    1bb6:	0a 94       	dec	r0
    1bb8:	e2 f7       	brpl	.-8      	; 0x1bb2 <MDIO_u8SetPinDirection+0x364>
    1bba:	80 95       	com	r24
    1bbc:	84 23       	and	r24, r20
    1bbe:	8c 93       	st	X, r24
    1bc0:	16 c0       	rjmp	.+44     	; 0x1bee <MDIO_u8SetPinDirection+0x3a0>
			case(MDIO_U8_PORTD):CLEAR_BIT(MDIO_U8_DDRD,Copy_u8PinID);break;
    1bc2:	a1 e3       	ldi	r26, 0x31	; 49
    1bc4:	b0 e0       	ldi	r27, 0x00	; 0
    1bc6:	e1 e3       	ldi	r30, 0x31	; 49
    1bc8:	f0 e0       	ldi	r31, 0x00	; 0
    1bca:	80 81       	ld	r24, Z
    1bcc:	48 2f       	mov	r20, r24
    1bce:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd0:	28 2f       	mov	r18, r24
    1bd2:	30 e0       	ldi	r19, 0x00	; 0
    1bd4:	81 e0       	ldi	r24, 0x01	; 1
    1bd6:	90 e0       	ldi	r25, 0x00	; 0
    1bd8:	02 2e       	mov	r0, r18
    1bda:	02 c0       	rjmp	.+4      	; 0x1be0 <MDIO_u8SetPinDirection+0x392>
    1bdc:	88 0f       	add	r24, r24
    1bde:	99 1f       	adc	r25, r25
    1be0:	0a 94       	dec	r0
    1be2:	e2 f7       	brpl	.-8      	; 0x1bdc <MDIO_u8SetPinDirection+0x38e>
    1be4:	80 95       	com	r24
    1be6:	84 23       	and	r24, r20
    1be8:	8c 93       	st	X, r24
    1bea:	01 c0       	rjmp	.+2      	; 0x1bee <MDIO_u8SetPinDirection+0x3a0>
			}break;
		default:Local_u8ErrorState=STD_TYPES_NOK;
    1bec:	19 82       	std	Y+1, r1	; 0x01
		}

	}
	return Local_u8ErrorState;
    1bee:	89 81       	ldd	r24, Y+1	; 0x01
}
    1bf0:	2c 96       	adiw	r28, 0x0c	; 12
    1bf2:	0f b6       	in	r0, 0x3f	; 63
    1bf4:	f8 94       	cli
    1bf6:	de bf       	out	0x3e, r29	; 62
    1bf8:	0f be       	out	0x3f, r0	; 63
    1bfa:	cd bf       	out	0x3d, r28	; 61
    1bfc:	cf 91       	pop	r28
    1bfe:	df 91       	pop	r29
    1c00:	08 95       	ret

00001c02 <MDIO_u8SetPinValue>:
u8 MDIO_u8SetPinValue(u8 Copy_u8PortID , u8 Copy_u8PinID , u8 Copy_u8PinValue){
    1c02:	df 93       	push	r29
    1c04:	cf 93       	push	r28
    1c06:	cd b7       	in	r28, 0x3d	; 61
    1c08:	de b7       	in	r29, 0x3e	; 62
    1c0a:	2a 97       	sbiw	r28, 0x0a	; 10
    1c0c:	0f b6       	in	r0, 0x3f	; 63
    1c0e:	f8 94       	cli
    1c10:	de bf       	out	0x3e, r29	; 62
    1c12:	0f be       	out	0x3f, r0	; 63
    1c14:	cd bf       	out	0x3d, r28	; 61
    1c16:	8a 83       	std	Y+2, r24	; 0x02
    1c18:	6b 83       	std	Y+3, r22	; 0x03
    1c1a:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState;
	if((Copy_u8PinID <= MDIO_U8_PIN_7) && (Copy_u8PortID <= MDIO_U8_PORTD)){
    1c1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c1e:	88 30       	cpi	r24, 0x08	; 8
    1c20:	08 f0       	brcs	.+2      	; 0x1c24 <MDIO_u8SetPinValue+0x22>
    1c22:	fa c0       	rjmp	.+500    	; 0x1e18 <MDIO_u8SetPinValue+0x216>
    1c24:	8a 81       	ldd	r24, Y+2	; 0x02
    1c26:	84 30       	cpi	r24, 0x04	; 4
    1c28:	08 f0       	brcs	.+2      	; 0x1c2c <MDIO_u8SetPinValue+0x2a>
    1c2a:	f6 c0       	rjmp	.+492    	; 0x1e18 <MDIO_u8SetPinValue+0x216>
		Local_u8ErrorState = 1;
    1c2c:	81 e0       	ldi	r24, 0x01	; 1
    1c2e:	89 83       	std	Y+1, r24	; 0x01
		switch (Copy_u8PinValue){
    1c30:	8c 81       	ldd	r24, Y+4	; 0x04
    1c32:	28 2f       	mov	r18, r24
    1c34:	30 e0       	ldi	r19, 0x00	; 0
    1c36:	3a 87       	std	Y+10, r19	; 0x0a
    1c38:	29 87       	std	Y+9, r18	; 0x09
    1c3a:	89 85       	ldd	r24, Y+9	; 0x09
    1c3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c3e:	00 97       	sbiw	r24, 0x00	; 0
    1c40:	09 f4       	brne	.+2      	; 0x1c44 <MDIO_u8SetPinValue+0x42>
    1c42:	75 c0       	rjmp	.+234    	; 0x1d2e <MDIO_u8SetPinValue+0x12c>
    1c44:	29 85       	ldd	r18, Y+9	; 0x09
    1c46:	3a 85       	ldd	r19, Y+10	; 0x0a
    1c48:	21 30       	cpi	r18, 0x01	; 1
    1c4a:	31 05       	cpc	r19, r1
    1c4c:	09 f0       	breq	.+2      	; 0x1c50 <MDIO_u8SetPinValue+0x4e>
    1c4e:	e3 c0       	rjmp	.+454    	; 0x1e16 <MDIO_u8SetPinValue+0x214>
		case(MDIO_U8_HIGH):
			switch(Copy_u8PortID){
    1c50:	8a 81       	ldd	r24, Y+2	; 0x02
    1c52:	28 2f       	mov	r18, r24
    1c54:	30 e0       	ldi	r19, 0x00	; 0
    1c56:	38 87       	std	Y+8, r19	; 0x08
    1c58:	2f 83       	std	Y+7, r18	; 0x07
    1c5a:	8f 81       	ldd	r24, Y+7	; 0x07
    1c5c:	98 85       	ldd	r25, Y+8	; 0x08
    1c5e:	81 30       	cpi	r24, 0x01	; 1
    1c60:	91 05       	cpc	r25, r1
    1c62:	49 f1       	breq	.+82     	; 0x1cb6 <MDIO_u8SetPinValue+0xb4>
    1c64:	2f 81       	ldd	r18, Y+7	; 0x07
    1c66:	38 85       	ldd	r19, Y+8	; 0x08
    1c68:	22 30       	cpi	r18, 0x02	; 2
    1c6a:	31 05       	cpc	r19, r1
    1c6c:	2c f4       	brge	.+10     	; 0x1c78 <MDIO_u8SetPinValue+0x76>
    1c6e:	8f 81       	ldd	r24, Y+7	; 0x07
    1c70:	98 85       	ldd	r25, Y+8	; 0x08
    1c72:	00 97       	sbiw	r24, 0x00	; 0
    1c74:	61 f0       	breq	.+24     	; 0x1c8e <MDIO_u8SetPinValue+0x8c>
    1c76:	d0 c0       	rjmp	.+416    	; 0x1e18 <MDIO_u8SetPinValue+0x216>
    1c78:	2f 81       	ldd	r18, Y+7	; 0x07
    1c7a:	38 85       	ldd	r19, Y+8	; 0x08
    1c7c:	22 30       	cpi	r18, 0x02	; 2
    1c7e:	31 05       	cpc	r19, r1
    1c80:	71 f1       	breq	.+92     	; 0x1cde <MDIO_u8SetPinValue+0xdc>
    1c82:	8f 81       	ldd	r24, Y+7	; 0x07
    1c84:	98 85       	ldd	r25, Y+8	; 0x08
    1c86:	83 30       	cpi	r24, 0x03	; 3
    1c88:	91 05       	cpc	r25, r1
    1c8a:	e9 f1       	breq	.+122    	; 0x1d06 <MDIO_u8SetPinValue+0x104>
    1c8c:	c5 c0       	rjmp	.+394    	; 0x1e18 <MDIO_u8SetPinValue+0x216>
			case(MDIO_U8_PORTA):SET_BIT(MDIO_U8_PORTA_REG,Copy_u8PinID);break;
    1c8e:	ab e3       	ldi	r26, 0x3B	; 59
    1c90:	b0 e0       	ldi	r27, 0x00	; 0
    1c92:	eb e3       	ldi	r30, 0x3B	; 59
    1c94:	f0 e0       	ldi	r31, 0x00	; 0
    1c96:	80 81       	ld	r24, Z
    1c98:	48 2f       	mov	r20, r24
    1c9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c9c:	28 2f       	mov	r18, r24
    1c9e:	30 e0       	ldi	r19, 0x00	; 0
    1ca0:	81 e0       	ldi	r24, 0x01	; 1
    1ca2:	90 e0       	ldi	r25, 0x00	; 0
    1ca4:	02 2e       	mov	r0, r18
    1ca6:	02 c0       	rjmp	.+4      	; 0x1cac <MDIO_u8SetPinValue+0xaa>
    1ca8:	88 0f       	add	r24, r24
    1caa:	99 1f       	adc	r25, r25
    1cac:	0a 94       	dec	r0
    1cae:	e2 f7       	brpl	.-8      	; 0x1ca8 <MDIO_u8SetPinValue+0xa6>
    1cb0:	84 2b       	or	r24, r20
    1cb2:	8c 93       	st	X, r24
    1cb4:	b1 c0       	rjmp	.+354    	; 0x1e18 <MDIO_u8SetPinValue+0x216>
			case(MDIO_U8_PORTB):SET_BIT(MDIO_U8_PORTB_REG,Copy_u8PinID);break;
    1cb6:	a8 e3       	ldi	r26, 0x38	; 56
    1cb8:	b0 e0       	ldi	r27, 0x00	; 0
    1cba:	e8 e3       	ldi	r30, 0x38	; 56
    1cbc:	f0 e0       	ldi	r31, 0x00	; 0
    1cbe:	80 81       	ld	r24, Z
    1cc0:	48 2f       	mov	r20, r24
    1cc2:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc4:	28 2f       	mov	r18, r24
    1cc6:	30 e0       	ldi	r19, 0x00	; 0
    1cc8:	81 e0       	ldi	r24, 0x01	; 1
    1cca:	90 e0       	ldi	r25, 0x00	; 0
    1ccc:	02 2e       	mov	r0, r18
    1cce:	02 c0       	rjmp	.+4      	; 0x1cd4 <MDIO_u8SetPinValue+0xd2>
    1cd0:	88 0f       	add	r24, r24
    1cd2:	99 1f       	adc	r25, r25
    1cd4:	0a 94       	dec	r0
    1cd6:	e2 f7       	brpl	.-8      	; 0x1cd0 <MDIO_u8SetPinValue+0xce>
    1cd8:	84 2b       	or	r24, r20
    1cda:	8c 93       	st	X, r24
    1cdc:	9d c0       	rjmp	.+314    	; 0x1e18 <MDIO_u8SetPinValue+0x216>
			case(MDIO_U8_PORTC):SET_BIT(MDIO_U8_PORTC_REG,Copy_u8PinID);break;
    1cde:	a5 e3       	ldi	r26, 0x35	; 53
    1ce0:	b0 e0       	ldi	r27, 0x00	; 0
    1ce2:	e5 e3       	ldi	r30, 0x35	; 53
    1ce4:	f0 e0       	ldi	r31, 0x00	; 0
    1ce6:	80 81       	ld	r24, Z
    1ce8:	48 2f       	mov	r20, r24
    1cea:	8b 81       	ldd	r24, Y+3	; 0x03
    1cec:	28 2f       	mov	r18, r24
    1cee:	30 e0       	ldi	r19, 0x00	; 0
    1cf0:	81 e0       	ldi	r24, 0x01	; 1
    1cf2:	90 e0       	ldi	r25, 0x00	; 0
    1cf4:	02 2e       	mov	r0, r18
    1cf6:	02 c0       	rjmp	.+4      	; 0x1cfc <MDIO_u8SetPinValue+0xfa>
    1cf8:	88 0f       	add	r24, r24
    1cfa:	99 1f       	adc	r25, r25
    1cfc:	0a 94       	dec	r0
    1cfe:	e2 f7       	brpl	.-8      	; 0x1cf8 <MDIO_u8SetPinValue+0xf6>
    1d00:	84 2b       	or	r24, r20
    1d02:	8c 93       	st	X, r24
    1d04:	89 c0       	rjmp	.+274    	; 0x1e18 <MDIO_u8SetPinValue+0x216>
			case(MDIO_U8_PORTD):SET_BIT(MDIO_U8_PORTD_REG,Copy_u8PinID);break;
    1d06:	a2 e3       	ldi	r26, 0x32	; 50
    1d08:	b0 e0       	ldi	r27, 0x00	; 0
    1d0a:	e2 e3       	ldi	r30, 0x32	; 50
    1d0c:	f0 e0       	ldi	r31, 0x00	; 0
    1d0e:	80 81       	ld	r24, Z
    1d10:	48 2f       	mov	r20, r24
    1d12:	8b 81       	ldd	r24, Y+3	; 0x03
    1d14:	28 2f       	mov	r18, r24
    1d16:	30 e0       	ldi	r19, 0x00	; 0
    1d18:	81 e0       	ldi	r24, 0x01	; 1
    1d1a:	90 e0       	ldi	r25, 0x00	; 0
    1d1c:	02 2e       	mov	r0, r18
    1d1e:	02 c0       	rjmp	.+4      	; 0x1d24 <MDIO_u8SetPinValue+0x122>
    1d20:	88 0f       	add	r24, r24
    1d22:	99 1f       	adc	r25, r25
    1d24:	0a 94       	dec	r0
    1d26:	e2 f7       	brpl	.-8      	; 0x1d20 <MDIO_u8SetPinValue+0x11e>
    1d28:	84 2b       	or	r24, r20
    1d2a:	8c 93       	st	X, r24
    1d2c:	75 c0       	rjmp	.+234    	; 0x1e18 <MDIO_u8SetPinValue+0x216>
			}
			break;
		case(MDIO_U8_LOW):
			switch(Copy_u8PortID){
    1d2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d30:	28 2f       	mov	r18, r24
    1d32:	30 e0       	ldi	r19, 0x00	; 0
    1d34:	3e 83       	std	Y+6, r19	; 0x06
    1d36:	2d 83       	std	Y+5, r18	; 0x05
    1d38:	8d 81       	ldd	r24, Y+5	; 0x05
    1d3a:	9e 81       	ldd	r25, Y+6	; 0x06
    1d3c:	81 30       	cpi	r24, 0x01	; 1
    1d3e:	91 05       	cpc	r25, r1
    1d40:	59 f1       	breq	.+86     	; 0x1d98 <MDIO_u8SetPinValue+0x196>
    1d42:	2d 81       	ldd	r18, Y+5	; 0x05
    1d44:	3e 81       	ldd	r19, Y+6	; 0x06
    1d46:	22 30       	cpi	r18, 0x02	; 2
    1d48:	31 05       	cpc	r19, r1
    1d4a:	2c f4       	brge	.+10     	; 0x1d56 <MDIO_u8SetPinValue+0x154>
    1d4c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d4e:	9e 81       	ldd	r25, Y+6	; 0x06
    1d50:	00 97       	sbiw	r24, 0x00	; 0
    1d52:	69 f0       	breq	.+26     	; 0x1d6e <MDIO_u8SetPinValue+0x16c>
    1d54:	61 c0       	rjmp	.+194    	; 0x1e18 <MDIO_u8SetPinValue+0x216>
    1d56:	2d 81       	ldd	r18, Y+5	; 0x05
    1d58:	3e 81       	ldd	r19, Y+6	; 0x06
    1d5a:	22 30       	cpi	r18, 0x02	; 2
    1d5c:	31 05       	cpc	r19, r1
    1d5e:	89 f1       	breq	.+98     	; 0x1dc2 <MDIO_u8SetPinValue+0x1c0>
    1d60:	8d 81       	ldd	r24, Y+5	; 0x05
    1d62:	9e 81       	ldd	r25, Y+6	; 0x06
    1d64:	83 30       	cpi	r24, 0x03	; 3
    1d66:	91 05       	cpc	r25, r1
    1d68:	09 f4       	brne	.+2      	; 0x1d6c <MDIO_u8SetPinValue+0x16a>
    1d6a:	40 c0       	rjmp	.+128    	; 0x1dec <MDIO_u8SetPinValue+0x1ea>
    1d6c:	55 c0       	rjmp	.+170    	; 0x1e18 <MDIO_u8SetPinValue+0x216>
			case(MDIO_U8_PORTA):CLEAR_BIT(MDIO_U8_PORTA_REG,Copy_u8PinID);break;
    1d6e:	ab e3       	ldi	r26, 0x3B	; 59
    1d70:	b0 e0       	ldi	r27, 0x00	; 0
    1d72:	eb e3       	ldi	r30, 0x3B	; 59
    1d74:	f0 e0       	ldi	r31, 0x00	; 0
    1d76:	80 81       	ld	r24, Z
    1d78:	48 2f       	mov	r20, r24
    1d7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d7c:	28 2f       	mov	r18, r24
    1d7e:	30 e0       	ldi	r19, 0x00	; 0
    1d80:	81 e0       	ldi	r24, 0x01	; 1
    1d82:	90 e0       	ldi	r25, 0x00	; 0
    1d84:	02 2e       	mov	r0, r18
    1d86:	02 c0       	rjmp	.+4      	; 0x1d8c <MDIO_u8SetPinValue+0x18a>
    1d88:	88 0f       	add	r24, r24
    1d8a:	99 1f       	adc	r25, r25
    1d8c:	0a 94       	dec	r0
    1d8e:	e2 f7       	brpl	.-8      	; 0x1d88 <MDIO_u8SetPinValue+0x186>
    1d90:	80 95       	com	r24
    1d92:	84 23       	and	r24, r20
    1d94:	8c 93       	st	X, r24
    1d96:	40 c0       	rjmp	.+128    	; 0x1e18 <MDIO_u8SetPinValue+0x216>
			case(MDIO_U8_PORTB):CLEAR_BIT(MDIO_U8_PORTB_REG,Copy_u8PinID);break;
    1d98:	a8 e3       	ldi	r26, 0x38	; 56
    1d9a:	b0 e0       	ldi	r27, 0x00	; 0
    1d9c:	e8 e3       	ldi	r30, 0x38	; 56
    1d9e:	f0 e0       	ldi	r31, 0x00	; 0
    1da0:	80 81       	ld	r24, Z
    1da2:	48 2f       	mov	r20, r24
    1da4:	8b 81       	ldd	r24, Y+3	; 0x03
    1da6:	28 2f       	mov	r18, r24
    1da8:	30 e0       	ldi	r19, 0x00	; 0
    1daa:	81 e0       	ldi	r24, 0x01	; 1
    1dac:	90 e0       	ldi	r25, 0x00	; 0
    1dae:	02 2e       	mov	r0, r18
    1db0:	02 c0       	rjmp	.+4      	; 0x1db6 <MDIO_u8SetPinValue+0x1b4>
    1db2:	88 0f       	add	r24, r24
    1db4:	99 1f       	adc	r25, r25
    1db6:	0a 94       	dec	r0
    1db8:	e2 f7       	brpl	.-8      	; 0x1db2 <MDIO_u8SetPinValue+0x1b0>
    1dba:	80 95       	com	r24
    1dbc:	84 23       	and	r24, r20
    1dbe:	8c 93       	st	X, r24
    1dc0:	2b c0       	rjmp	.+86     	; 0x1e18 <MDIO_u8SetPinValue+0x216>
			case(MDIO_U8_PORTC):CLEAR_BIT(MDIO_U8_PORTC_REG,Copy_u8PinID);break;
    1dc2:	a5 e3       	ldi	r26, 0x35	; 53
    1dc4:	b0 e0       	ldi	r27, 0x00	; 0
    1dc6:	e5 e3       	ldi	r30, 0x35	; 53
    1dc8:	f0 e0       	ldi	r31, 0x00	; 0
    1dca:	80 81       	ld	r24, Z
    1dcc:	48 2f       	mov	r20, r24
    1dce:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd0:	28 2f       	mov	r18, r24
    1dd2:	30 e0       	ldi	r19, 0x00	; 0
    1dd4:	81 e0       	ldi	r24, 0x01	; 1
    1dd6:	90 e0       	ldi	r25, 0x00	; 0
    1dd8:	02 2e       	mov	r0, r18
    1dda:	02 c0       	rjmp	.+4      	; 0x1de0 <MDIO_u8SetPinValue+0x1de>
    1ddc:	88 0f       	add	r24, r24
    1dde:	99 1f       	adc	r25, r25
    1de0:	0a 94       	dec	r0
    1de2:	e2 f7       	brpl	.-8      	; 0x1ddc <MDIO_u8SetPinValue+0x1da>
    1de4:	80 95       	com	r24
    1de6:	84 23       	and	r24, r20
    1de8:	8c 93       	st	X, r24
    1dea:	16 c0       	rjmp	.+44     	; 0x1e18 <MDIO_u8SetPinValue+0x216>
			case(MDIO_U8_PORTD):CLEAR_BIT(MDIO_U8_PORTD_REG,Copy_u8PinID);break;
    1dec:	a2 e3       	ldi	r26, 0x32	; 50
    1dee:	b0 e0       	ldi	r27, 0x00	; 0
    1df0:	e2 e3       	ldi	r30, 0x32	; 50
    1df2:	f0 e0       	ldi	r31, 0x00	; 0
    1df4:	80 81       	ld	r24, Z
    1df6:	48 2f       	mov	r20, r24
    1df8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dfa:	28 2f       	mov	r18, r24
    1dfc:	30 e0       	ldi	r19, 0x00	; 0
    1dfe:	81 e0       	ldi	r24, 0x01	; 1
    1e00:	90 e0       	ldi	r25, 0x00	; 0
    1e02:	02 2e       	mov	r0, r18
    1e04:	02 c0       	rjmp	.+4      	; 0x1e0a <MDIO_u8SetPinValue+0x208>
    1e06:	88 0f       	add	r24, r24
    1e08:	99 1f       	adc	r25, r25
    1e0a:	0a 94       	dec	r0
    1e0c:	e2 f7       	brpl	.-8      	; 0x1e06 <MDIO_u8SetPinValue+0x204>
    1e0e:	80 95       	com	r24
    1e10:	84 23       	and	r24, r20
    1e12:	8c 93       	st	X, r24
    1e14:	01 c0       	rjmp	.+2      	; 0x1e18 <MDIO_u8SetPinValue+0x216>
			}
			break;
		default:Local_u8ErrorState=STD_TYPES_NOK;
    1e16:	19 82       	std	Y+1, r1	; 0x01
		}
	}
	return Local_u8ErrorState;
    1e18:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e1a:	2a 96       	adiw	r28, 0x0a	; 10
    1e1c:	0f b6       	in	r0, 0x3f	; 63
    1e1e:	f8 94       	cli
    1e20:	de bf       	out	0x3e, r29	; 62
    1e22:	0f be       	out	0x3f, r0	; 63
    1e24:	cd bf       	out	0x3d, r28	; 61
    1e26:	cf 91       	pop	r28
    1e28:	df 91       	pop	r29
    1e2a:	08 95       	ret

00001e2c <MDIO_u8GetPinValue>:
u8 MDIO_u8GetPinValue(u8 Copy_u8PortID , u8 Copy_u8PinID , u8 * Copy_Pu8PinValue){
    1e2c:	df 93       	push	r29
    1e2e:	cf 93       	push	r28
    1e30:	cd b7       	in	r28, 0x3d	; 61
    1e32:	de b7       	in	r29, 0x3e	; 62
    1e34:	27 97       	sbiw	r28, 0x07	; 7
    1e36:	0f b6       	in	r0, 0x3f	; 63
    1e38:	f8 94       	cli
    1e3a:	de bf       	out	0x3e, r29	; 62
    1e3c:	0f be       	out	0x3f, r0	; 63
    1e3e:	cd bf       	out	0x3d, r28	; 61
    1e40:	8a 83       	std	Y+2, r24	; 0x02
    1e42:	6b 83       	std	Y+3, r22	; 0x03
    1e44:	5d 83       	std	Y+5, r21	; 0x05
    1e46:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState;
	if((Copy_u8PinID <= MDIO_U8_PIN_7) && (Copy_u8PortID <= MDIO_U8_PORTD) && (Copy_Pu8PinValue != STD_TYPE_NULL)){
    1e48:	8b 81       	ldd	r24, Y+3	; 0x03
    1e4a:	88 30       	cpi	r24, 0x08	; 8
    1e4c:	08 f0       	brcs	.+2      	; 0x1e50 <MDIO_u8GetPinValue+0x24>
    1e4e:	7b c0       	rjmp	.+246    	; 0x1f46 <MDIO_u8GetPinValue+0x11a>
    1e50:	8a 81       	ldd	r24, Y+2	; 0x02
    1e52:	84 30       	cpi	r24, 0x04	; 4
    1e54:	08 f0       	brcs	.+2      	; 0x1e58 <MDIO_u8GetPinValue+0x2c>
    1e56:	77 c0       	rjmp	.+238    	; 0x1f46 <MDIO_u8GetPinValue+0x11a>
    1e58:	8c 81       	ldd	r24, Y+4	; 0x04
    1e5a:	9d 81       	ldd	r25, Y+5	; 0x05
    1e5c:	00 97       	sbiw	r24, 0x00	; 0
    1e5e:	09 f4       	brne	.+2      	; 0x1e62 <MDIO_u8GetPinValue+0x36>
    1e60:	72 c0       	rjmp	.+228    	; 0x1f46 <MDIO_u8GetPinValue+0x11a>
		Local_u8ErrorState = 1;
    1e62:	81 e0       	ldi	r24, 0x01	; 1
    1e64:	89 83       	std	Y+1, r24	; 0x01
		switch(Copy_u8PortID){
    1e66:	8a 81       	ldd	r24, Y+2	; 0x02
    1e68:	28 2f       	mov	r18, r24
    1e6a:	30 e0       	ldi	r19, 0x00	; 0
    1e6c:	3f 83       	std	Y+7, r19	; 0x07
    1e6e:	2e 83       	std	Y+6, r18	; 0x06
    1e70:	4e 81       	ldd	r20, Y+6	; 0x06
    1e72:	5f 81       	ldd	r21, Y+7	; 0x07
    1e74:	41 30       	cpi	r20, 0x01	; 1
    1e76:	51 05       	cpc	r21, r1
    1e78:	59 f1       	breq	.+86     	; 0x1ed0 <MDIO_u8GetPinValue+0xa4>
    1e7a:	8e 81       	ldd	r24, Y+6	; 0x06
    1e7c:	9f 81       	ldd	r25, Y+7	; 0x07
    1e7e:	82 30       	cpi	r24, 0x02	; 2
    1e80:	91 05       	cpc	r25, r1
    1e82:	34 f4       	brge	.+12     	; 0x1e90 <MDIO_u8GetPinValue+0x64>
    1e84:	2e 81       	ldd	r18, Y+6	; 0x06
    1e86:	3f 81       	ldd	r19, Y+7	; 0x07
    1e88:	21 15       	cp	r18, r1
    1e8a:	31 05       	cpc	r19, r1
    1e8c:	69 f0       	breq	.+26     	; 0x1ea8 <MDIO_u8GetPinValue+0x7c>
    1e8e:	5b c0       	rjmp	.+182    	; 0x1f46 <MDIO_u8GetPinValue+0x11a>
    1e90:	4e 81       	ldd	r20, Y+6	; 0x06
    1e92:	5f 81       	ldd	r21, Y+7	; 0x07
    1e94:	42 30       	cpi	r20, 0x02	; 2
    1e96:	51 05       	cpc	r21, r1
    1e98:	79 f1       	breq	.+94     	; 0x1ef8 <MDIO_u8GetPinValue+0xcc>
    1e9a:	8e 81       	ldd	r24, Y+6	; 0x06
    1e9c:	9f 81       	ldd	r25, Y+7	; 0x07
    1e9e:	83 30       	cpi	r24, 0x03	; 3
    1ea0:	91 05       	cpc	r25, r1
    1ea2:	09 f4       	brne	.+2      	; 0x1ea6 <MDIO_u8GetPinValue+0x7a>
    1ea4:	3d c0       	rjmp	.+122    	; 0x1f20 <MDIO_u8GetPinValue+0xf4>
    1ea6:	4f c0       	rjmp	.+158    	; 0x1f46 <MDIO_u8GetPinValue+0x11a>
		case(MDIO_U8_PORTA):(* Copy_Pu8PinValue )= GET_BIT(MDIO_U8_PINA,Copy_u8PinID);break;
    1ea8:	e9 e3       	ldi	r30, 0x39	; 57
    1eaa:	f0 e0       	ldi	r31, 0x00	; 0
    1eac:	80 81       	ld	r24, Z
    1eae:	28 2f       	mov	r18, r24
    1eb0:	30 e0       	ldi	r19, 0x00	; 0
    1eb2:	8b 81       	ldd	r24, Y+3	; 0x03
    1eb4:	88 2f       	mov	r24, r24
    1eb6:	90 e0       	ldi	r25, 0x00	; 0
    1eb8:	a9 01       	movw	r20, r18
    1eba:	02 c0       	rjmp	.+4      	; 0x1ec0 <MDIO_u8GetPinValue+0x94>
    1ebc:	55 95       	asr	r21
    1ebe:	47 95       	ror	r20
    1ec0:	8a 95       	dec	r24
    1ec2:	e2 f7       	brpl	.-8      	; 0x1ebc <MDIO_u8GetPinValue+0x90>
    1ec4:	ca 01       	movw	r24, r20
    1ec6:	81 70       	andi	r24, 0x01	; 1
    1ec8:	ec 81       	ldd	r30, Y+4	; 0x04
    1eca:	fd 81       	ldd	r31, Y+5	; 0x05
    1ecc:	80 83       	st	Z, r24
    1ece:	3b c0       	rjmp	.+118    	; 0x1f46 <MDIO_u8GetPinValue+0x11a>
		case(MDIO_U8_PORTB):(* Copy_Pu8PinValue )= GET_BIT(MDIO_U8_PINB,Copy_u8PinID);break;
    1ed0:	e6 e3       	ldi	r30, 0x36	; 54
    1ed2:	f0 e0       	ldi	r31, 0x00	; 0
    1ed4:	80 81       	ld	r24, Z
    1ed6:	28 2f       	mov	r18, r24
    1ed8:	30 e0       	ldi	r19, 0x00	; 0
    1eda:	8b 81       	ldd	r24, Y+3	; 0x03
    1edc:	88 2f       	mov	r24, r24
    1ede:	90 e0       	ldi	r25, 0x00	; 0
    1ee0:	a9 01       	movw	r20, r18
    1ee2:	02 c0       	rjmp	.+4      	; 0x1ee8 <MDIO_u8GetPinValue+0xbc>
    1ee4:	55 95       	asr	r21
    1ee6:	47 95       	ror	r20
    1ee8:	8a 95       	dec	r24
    1eea:	e2 f7       	brpl	.-8      	; 0x1ee4 <MDIO_u8GetPinValue+0xb8>
    1eec:	ca 01       	movw	r24, r20
    1eee:	81 70       	andi	r24, 0x01	; 1
    1ef0:	ec 81       	ldd	r30, Y+4	; 0x04
    1ef2:	fd 81       	ldd	r31, Y+5	; 0x05
    1ef4:	80 83       	st	Z, r24
    1ef6:	27 c0       	rjmp	.+78     	; 0x1f46 <MDIO_u8GetPinValue+0x11a>
		case(MDIO_U8_PORTC):(* Copy_Pu8PinValue )= GET_BIT(MDIO_U8_PINC,Copy_u8PinID);break;
    1ef8:	e3 e3       	ldi	r30, 0x33	; 51
    1efa:	f0 e0       	ldi	r31, 0x00	; 0
    1efc:	80 81       	ld	r24, Z
    1efe:	28 2f       	mov	r18, r24
    1f00:	30 e0       	ldi	r19, 0x00	; 0
    1f02:	8b 81       	ldd	r24, Y+3	; 0x03
    1f04:	88 2f       	mov	r24, r24
    1f06:	90 e0       	ldi	r25, 0x00	; 0
    1f08:	a9 01       	movw	r20, r18
    1f0a:	02 c0       	rjmp	.+4      	; 0x1f10 <MDIO_u8GetPinValue+0xe4>
    1f0c:	55 95       	asr	r21
    1f0e:	47 95       	ror	r20
    1f10:	8a 95       	dec	r24
    1f12:	e2 f7       	brpl	.-8      	; 0x1f0c <MDIO_u8GetPinValue+0xe0>
    1f14:	ca 01       	movw	r24, r20
    1f16:	81 70       	andi	r24, 0x01	; 1
    1f18:	ec 81       	ldd	r30, Y+4	; 0x04
    1f1a:	fd 81       	ldd	r31, Y+5	; 0x05
    1f1c:	80 83       	st	Z, r24
    1f1e:	13 c0       	rjmp	.+38     	; 0x1f46 <MDIO_u8GetPinValue+0x11a>
		case(MDIO_U8_PORTD):(* Copy_Pu8PinValue )= GET_BIT(MDIO_U8_PIND,Copy_u8PinID);break;
    1f20:	e0 e3       	ldi	r30, 0x30	; 48
    1f22:	f0 e0       	ldi	r31, 0x00	; 0
    1f24:	80 81       	ld	r24, Z
    1f26:	28 2f       	mov	r18, r24
    1f28:	30 e0       	ldi	r19, 0x00	; 0
    1f2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f2c:	88 2f       	mov	r24, r24
    1f2e:	90 e0       	ldi	r25, 0x00	; 0
    1f30:	a9 01       	movw	r20, r18
    1f32:	02 c0       	rjmp	.+4      	; 0x1f38 <MDIO_u8GetPinValue+0x10c>
    1f34:	55 95       	asr	r21
    1f36:	47 95       	ror	r20
    1f38:	8a 95       	dec	r24
    1f3a:	e2 f7       	brpl	.-8      	; 0x1f34 <MDIO_u8GetPinValue+0x108>
    1f3c:	ca 01       	movw	r24, r20
    1f3e:	81 70       	andi	r24, 0x01	; 1
    1f40:	ec 81       	ldd	r30, Y+4	; 0x04
    1f42:	fd 81       	ldd	r31, Y+5	; 0x05
    1f44:	80 83       	st	Z, r24
		}
	}
	return Local_u8ErrorState;
    1f46:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f48:	27 96       	adiw	r28, 0x07	; 7
    1f4a:	0f b6       	in	r0, 0x3f	; 63
    1f4c:	f8 94       	cli
    1f4e:	de bf       	out	0x3e, r29	; 62
    1f50:	0f be       	out	0x3f, r0	; 63
    1f52:	cd bf       	out	0x3d, r28	; 61
    1f54:	cf 91       	pop	r28
    1f56:	df 91       	pop	r29
    1f58:	08 95       	ret

00001f5a <MDIO_u8GetPortDirection>:
u8 MDIO_u8GetPortDirection(u8 Copy_u8PortID ,  u8 Copy_u8PortDirection){
    1f5a:	df 93       	push	r29
    1f5c:	cf 93       	push	r28
    1f5e:	cd b7       	in	r28, 0x3d	; 61
    1f60:	de b7       	in	r29, 0x3e	; 62
    1f62:	2b 97       	sbiw	r28, 0x0b	; 11
    1f64:	0f b6       	in	r0, 0x3f	; 63
    1f66:	f8 94       	cli
    1f68:	de bf       	out	0x3e, r29	; 62
    1f6a:	0f be       	out	0x3f, r0	; 63
    1f6c:	cd bf       	out	0x3d, r28	; 61
    1f6e:	8a 83       	std	Y+2, r24	; 0x02
    1f70:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_NOK;
    1f72:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8PortID <= MDIO_U8_PORTD){
    1f74:	8a 81       	ldd	r24, Y+2	; 0x02
    1f76:	84 30       	cpi	r24, 0x04	; 4
    1f78:	08 f0       	brcs	.+2      	; 0x1f7c <MDIO_u8GetPortDirection+0x22>
    1f7a:	ba c0       	rjmp	.+372    	; 0x20f0 <MDIO_u8GetPortDirection+0x196>
		Local_u8ErrorState = STD_TYPES_OK;
    1f7c:	81 e0       	ldi	r24, 0x01	; 1
    1f7e:	89 83       	std	Y+1, r24	; 0x01
		switch(Copy_u8PortDirection){
    1f80:	8b 81       	ldd	r24, Y+3	; 0x03
    1f82:	28 2f       	mov	r18, r24
    1f84:	30 e0       	ldi	r19, 0x00	; 0
    1f86:	3b 87       	std	Y+11, r19	; 0x0b
    1f88:	2a 87       	std	Y+10, r18	; 0x0a
    1f8a:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f8c:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f8e:	81 30       	cpi	r24, 0x01	; 1
    1f90:	91 05       	cpc	r25, r1
    1f92:	09 f4       	brne	.+2      	; 0x1f96 <MDIO_u8GetPortDirection+0x3c>
    1f94:	3e c0       	rjmp	.+124    	; 0x2012 <MDIO_u8GetPortDirection+0xb8>
    1f96:	2a 85       	ldd	r18, Y+10	; 0x0a
    1f98:	3b 85       	ldd	r19, Y+11	; 0x0b
    1f9a:	22 30       	cpi	r18, 0x02	; 2
    1f9c:	31 05       	cpc	r19, r1
    1f9e:	09 f4       	brne	.+2      	; 0x1fa2 <MDIO_u8GetPortDirection+0x48>
    1fa0:	67 c0       	rjmp	.+206    	; 0x2070 <MDIO_u8GetPortDirection+0x116>
    1fa2:	8a 85       	ldd	r24, Y+10	; 0x0a
    1fa4:	9b 85       	ldd	r25, Y+11	; 0x0b
    1fa6:	00 97       	sbiw	r24, 0x00	; 0
    1fa8:	09 f0       	breq	.+2      	; 0x1fac <MDIO_u8GetPortDirection+0x52>
    1faa:	a1 c0       	rjmp	.+322    	; 0x20ee <MDIO_u8GetPortDirection+0x194>
		case(MDIO_U8_OUTPUT):
			switch(Copy_u8PortID){
    1fac:	8a 81       	ldd	r24, Y+2	; 0x02
    1fae:	28 2f       	mov	r18, r24
    1fb0:	30 e0       	ldi	r19, 0x00	; 0
    1fb2:	39 87       	std	Y+9, r19	; 0x09
    1fb4:	28 87       	std	Y+8, r18	; 0x08
    1fb6:	88 85       	ldd	r24, Y+8	; 0x08
    1fb8:	99 85       	ldd	r25, Y+9	; 0x09
    1fba:	81 30       	cpi	r24, 0x01	; 1
    1fbc:	91 05       	cpc	r25, r1
    1fbe:	d1 f0       	breq	.+52     	; 0x1ff4 <MDIO_u8GetPortDirection+0x9a>
    1fc0:	28 85       	ldd	r18, Y+8	; 0x08
    1fc2:	39 85       	ldd	r19, Y+9	; 0x09
    1fc4:	22 30       	cpi	r18, 0x02	; 2
    1fc6:	31 05       	cpc	r19, r1
    1fc8:	2c f4       	brge	.+10     	; 0x1fd4 <MDIO_u8GetPortDirection+0x7a>
    1fca:	88 85       	ldd	r24, Y+8	; 0x08
    1fcc:	99 85       	ldd	r25, Y+9	; 0x09
    1fce:	00 97       	sbiw	r24, 0x00	; 0
    1fd0:	61 f0       	breq	.+24     	; 0x1fea <MDIO_u8GetPortDirection+0x90>
    1fd2:	8e c0       	rjmp	.+284    	; 0x20f0 <MDIO_u8GetPortDirection+0x196>
    1fd4:	28 85       	ldd	r18, Y+8	; 0x08
    1fd6:	39 85       	ldd	r19, Y+9	; 0x09
    1fd8:	22 30       	cpi	r18, 0x02	; 2
    1fda:	31 05       	cpc	r19, r1
    1fdc:	81 f0       	breq	.+32     	; 0x1ffe <MDIO_u8GetPortDirection+0xa4>
    1fde:	88 85       	ldd	r24, Y+8	; 0x08
    1fe0:	99 85       	ldd	r25, Y+9	; 0x09
    1fe2:	83 30       	cpi	r24, 0x03	; 3
    1fe4:	91 05       	cpc	r25, r1
    1fe6:	81 f0       	breq	.+32     	; 0x2008 <MDIO_u8GetPortDirection+0xae>
    1fe8:	83 c0       	rjmp	.+262    	; 0x20f0 <MDIO_u8GetPortDirection+0x196>
			case(MDIO_U8_PORTA):MDIO_U8_DDRA = 0xFF;break;
    1fea:	ea e3       	ldi	r30, 0x3A	; 58
    1fec:	f0 e0       	ldi	r31, 0x00	; 0
    1fee:	8f ef       	ldi	r24, 0xFF	; 255
    1ff0:	80 83       	st	Z, r24
    1ff2:	7e c0       	rjmp	.+252    	; 0x20f0 <MDIO_u8GetPortDirection+0x196>
			case(MDIO_U8_PORTB):MDIO_U8_DDRB = 0xFF;break;
    1ff4:	e7 e3       	ldi	r30, 0x37	; 55
    1ff6:	f0 e0       	ldi	r31, 0x00	; 0
    1ff8:	8f ef       	ldi	r24, 0xFF	; 255
    1ffa:	80 83       	st	Z, r24
    1ffc:	79 c0       	rjmp	.+242    	; 0x20f0 <MDIO_u8GetPortDirection+0x196>
			case(MDIO_U8_PORTC):MDIO_U8_DDRC = 0xFF;break;
    1ffe:	e4 e3       	ldi	r30, 0x34	; 52
    2000:	f0 e0       	ldi	r31, 0x00	; 0
    2002:	8f ef       	ldi	r24, 0xFF	; 255
    2004:	80 83       	st	Z, r24
    2006:	74 c0       	rjmp	.+232    	; 0x20f0 <MDIO_u8GetPortDirection+0x196>
			case(MDIO_U8_PORTD):MDIO_U8_DDRD = 0xFF;break;
    2008:	e1 e3       	ldi	r30, 0x31	; 49
    200a:	f0 e0       	ldi	r31, 0x00	; 0
    200c:	8f ef       	ldi	r24, 0xFF	; 255
    200e:	80 83       	st	Z, r24
    2010:	6f c0       	rjmp	.+222    	; 0x20f0 <MDIO_u8GetPortDirection+0x196>
			}
			break;
		case(MDIO_U8_INPUT_FLOATING):
			switch(Copy_u8PortID){
    2012:	8a 81       	ldd	r24, Y+2	; 0x02
    2014:	28 2f       	mov	r18, r24
    2016:	30 e0       	ldi	r19, 0x00	; 0
    2018:	3f 83       	std	Y+7, r19	; 0x07
    201a:	2e 83       	std	Y+6, r18	; 0x06
    201c:	8e 81       	ldd	r24, Y+6	; 0x06
    201e:	9f 81       	ldd	r25, Y+7	; 0x07
    2020:	81 30       	cpi	r24, 0x01	; 1
    2022:	91 05       	cpc	r25, r1
    2024:	c9 f0       	breq	.+50     	; 0x2058 <MDIO_u8GetPortDirection+0xfe>
    2026:	2e 81       	ldd	r18, Y+6	; 0x06
    2028:	3f 81       	ldd	r19, Y+7	; 0x07
    202a:	22 30       	cpi	r18, 0x02	; 2
    202c:	31 05       	cpc	r19, r1
    202e:	2c f4       	brge	.+10     	; 0x203a <MDIO_u8GetPortDirection+0xe0>
    2030:	8e 81       	ldd	r24, Y+6	; 0x06
    2032:	9f 81       	ldd	r25, Y+7	; 0x07
    2034:	00 97       	sbiw	r24, 0x00	; 0
    2036:	61 f0       	breq	.+24     	; 0x2050 <MDIO_u8GetPortDirection+0xf6>
    2038:	5b c0       	rjmp	.+182    	; 0x20f0 <MDIO_u8GetPortDirection+0x196>
    203a:	2e 81       	ldd	r18, Y+6	; 0x06
    203c:	3f 81       	ldd	r19, Y+7	; 0x07
    203e:	22 30       	cpi	r18, 0x02	; 2
    2040:	31 05       	cpc	r19, r1
    2042:	71 f0       	breq	.+28     	; 0x2060 <MDIO_u8GetPortDirection+0x106>
    2044:	8e 81       	ldd	r24, Y+6	; 0x06
    2046:	9f 81       	ldd	r25, Y+7	; 0x07
    2048:	83 30       	cpi	r24, 0x03	; 3
    204a:	91 05       	cpc	r25, r1
    204c:	69 f0       	breq	.+26     	; 0x2068 <MDIO_u8GetPortDirection+0x10e>
    204e:	50 c0       	rjmp	.+160    	; 0x20f0 <MDIO_u8GetPortDirection+0x196>
			case(MDIO_U8_PORTA):MDIO_U8_DDRA = 0x00;break;
    2050:	ea e3       	ldi	r30, 0x3A	; 58
    2052:	f0 e0       	ldi	r31, 0x00	; 0
    2054:	10 82       	st	Z, r1
    2056:	4c c0       	rjmp	.+152    	; 0x20f0 <MDIO_u8GetPortDirection+0x196>
			case(MDIO_U8_PORTB):MDIO_U8_DDRB = 0x00;break;
    2058:	e7 e3       	ldi	r30, 0x37	; 55
    205a:	f0 e0       	ldi	r31, 0x00	; 0
    205c:	10 82       	st	Z, r1
    205e:	48 c0       	rjmp	.+144    	; 0x20f0 <MDIO_u8GetPortDirection+0x196>
			case(MDIO_U8_PORTC):MDIO_U8_DDRC = 0x00;break;
    2060:	e4 e3       	ldi	r30, 0x34	; 52
    2062:	f0 e0       	ldi	r31, 0x00	; 0
    2064:	10 82       	st	Z, r1
    2066:	44 c0       	rjmp	.+136    	; 0x20f0 <MDIO_u8GetPortDirection+0x196>
			case(MDIO_U8_PORTD):MDIO_U8_DDRD = 0x00;break;
    2068:	e1 e3       	ldi	r30, 0x31	; 49
    206a:	f0 e0       	ldi	r31, 0x00	; 0
    206c:	10 82       	st	Z, r1
    206e:	40 c0       	rjmp	.+128    	; 0x20f0 <MDIO_u8GetPortDirection+0x196>
			}
		break;
		case(MDIO_U8_INPUT_PULLED_UP):
			switch(Copy_u8PortID){
    2070:	8a 81       	ldd	r24, Y+2	; 0x02
    2072:	28 2f       	mov	r18, r24
    2074:	30 e0       	ldi	r19, 0x00	; 0
    2076:	3d 83       	std	Y+5, r19	; 0x05
    2078:	2c 83       	std	Y+4, r18	; 0x04
    207a:	8c 81       	ldd	r24, Y+4	; 0x04
    207c:	9d 81       	ldd	r25, Y+5	; 0x05
    207e:	81 30       	cpi	r24, 0x01	; 1
    2080:	91 05       	cpc	r25, r1
    2082:	e9 f0       	breq	.+58     	; 0x20be <MDIO_u8GetPortDirection+0x164>
    2084:	2c 81       	ldd	r18, Y+4	; 0x04
    2086:	3d 81       	ldd	r19, Y+5	; 0x05
    2088:	22 30       	cpi	r18, 0x02	; 2
    208a:	31 05       	cpc	r19, r1
    208c:	2c f4       	brge	.+10     	; 0x2098 <MDIO_u8GetPortDirection+0x13e>
    208e:	8c 81       	ldd	r24, Y+4	; 0x04
    2090:	9d 81       	ldd	r25, Y+5	; 0x05
    2092:	00 97       	sbiw	r24, 0x00	; 0
    2094:	61 f0       	breq	.+24     	; 0x20ae <MDIO_u8GetPortDirection+0x154>
    2096:	2c c0       	rjmp	.+88     	; 0x20f0 <MDIO_u8GetPortDirection+0x196>
    2098:	2c 81       	ldd	r18, Y+4	; 0x04
    209a:	3d 81       	ldd	r19, Y+5	; 0x05
    209c:	22 30       	cpi	r18, 0x02	; 2
    209e:	31 05       	cpc	r19, r1
    20a0:	b1 f0       	breq	.+44     	; 0x20ce <MDIO_u8GetPortDirection+0x174>
    20a2:	8c 81       	ldd	r24, Y+4	; 0x04
    20a4:	9d 81       	ldd	r25, Y+5	; 0x05
    20a6:	83 30       	cpi	r24, 0x03	; 3
    20a8:	91 05       	cpc	r25, r1
    20aa:	c9 f0       	breq	.+50     	; 0x20de <MDIO_u8GetPortDirection+0x184>
    20ac:	21 c0       	rjmp	.+66     	; 0x20f0 <MDIO_u8GetPortDirection+0x196>
			case(MDIO_U8_PORTA):MDIO_U8_DDRA = 0x00;MDIO_U8_PORTA_REG = 0xFF;break;
    20ae:	ea e3       	ldi	r30, 0x3A	; 58
    20b0:	f0 e0       	ldi	r31, 0x00	; 0
    20b2:	10 82       	st	Z, r1
    20b4:	eb e3       	ldi	r30, 0x3B	; 59
    20b6:	f0 e0       	ldi	r31, 0x00	; 0
    20b8:	8f ef       	ldi	r24, 0xFF	; 255
    20ba:	80 83       	st	Z, r24
    20bc:	19 c0       	rjmp	.+50     	; 0x20f0 <MDIO_u8GetPortDirection+0x196>
			case(MDIO_U8_PORTB):MDIO_U8_DDRB = 0x00;MDIO_U8_PORTB_REG = 0xFF;break;
    20be:	e7 e3       	ldi	r30, 0x37	; 55
    20c0:	f0 e0       	ldi	r31, 0x00	; 0
    20c2:	10 82       	st	Z, r1
    20c4:	e8 e3       	ldi	r30, 0x38	; 56
    20c6:	f0 e0       	ldi	r31, 0x00	; 0
    20c8:	8f ef       	ldi	r24, 0xFF	; 255
    20ca:	80 83       	st	Z, r24
    20cc:	11 c0       	rjmp	.+34     	; 0x20f0 <MDIO_u8GetPortDirection+0x196>
			case(MDIO_U8_PORTC):MDIO_U8_DDRC = 0x00;MDIO_U8_PORTC_REG = 0xFF;break;
    20ce:	e4 e3       	ldi	r30, 0x34	; 52
    20d0:	f0 e0       	ldi	r31, 0x00	; 0
    20d2:	10 82       	st	Z, r1
    20d4:	e5 e3       	ldi	r30, 0x35	; 53
    20d6:	f0 e0       	ldi	r31, 0x00	; 0
    20d8:	8f ef       	ldi	r24, 0xFF	; 255
    20da:	80 83       	st	Z, r24
    20dc:	09 c0       	rjmp	.+18     	; 0x20f0 <MDIO_u8GetPortDirection+0x196>
			case(MDIO_U8_PORTD):MDIO_U8_DDRD = 0x00;MDIO_U8_PORTD_REG = 0xFF;break;
    20de:	e1 e3       	ldi	r30, 0x31	; 49
    20e0:	f0 e0       	ldi	r31, 0x00	; 0
    20e2:	10 82       	st	Z, r1
    20e4:	e2 e3       	ldi	r30, 0x32	; 50
    20e6:	f0 e0       	ldi	r31, 0x00	; 0
    20e8:	8f ef       	ldi	r24, 0xFF	; 255
    20ea:	80 83       	st	Z, r24
    20ec:	01 c0       	rjmp	.+2      	; 0x20f0 <MDIO_u8GetPortDirection+0x196>
			}
		break;
		default:Local_u8ErrorState= STD_TYPES_NOK;
    20ee:	19 82       	std	Y+1, r1	; 0x01
		}
	}
	return Local_u8ErrorState;
    20f0:	89 81       	ldd	r24, Y+1	; 0x01
}
    20f2:	2b 96       	adiw	r28, 0x0b	; 11
    20f4:	0f b6       	in	r0, 0x3f	; 63
    20f6:	f8 94       	cli
    20f8:	de bf       	out	0x3e, r29	; 62
    20fa:	0f be       	out	0x3f, r0	; 63
    20fc:	cd bf       	out	0x3d, r28	; 61
    20fe:	cf 91       	pop	r28
    2100:	df 91       	pop	r29
    2102:	08 95       	ret

00002104 <MDIO_u8SetPortValue>:
u8 MDIO_u8SetPortValue(u8 Copy_u8PortID  , u8 Copy_u8PortValue){
    2104:	df 93       	push	r29
    2106:	cf 93       	push	r28
    2108:	00 d0       	rcall	.+0      	; 0x210a <MDIO_u8SetPortValue+0x6>
    210a:	00 d0       	rcall	.+0      	; 0x210c <MDIO_u8SetPortValue+0x8>
    210c:	0f 92       	push	r0
    210e:	cd b7       	in	r28, 0x3d	; 61
    2110:	de b7       	in	r29, 0x3e	; 62
    2112:	8a 83       	std	Y+2, r24	; 0x02
    2114:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState= STD_TYPES_NOK;
    2116:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8PortID <= MDIO_U8_PORTD){
    2118:	8a 81       	ldd	r24, Y+2	; 0x02
    211a:	84 30       	cpi	r24, 0x04	; 4
    211c:	a0 f5       	brcc	.+104    	; 0x2186 <MDIO_u8SetPortValue+0x82>
		Local_u8ErrorState = STD_TYPES_OK;
    211e:	81 e0       	ldi	r24, 0x01	; 1
    2120:	89 83       	std	Y+1, r24	; 0x01
		switch(Copy_u8PortID){
    2122:	8a 81       	ldd	r24, Y+2	; 0x02
    2124:	28 2f       	mov	r18, r24
    2126:	30 e0       	ldi	r19, 0x00	; 0
    2128:	3d 83       	std	Y+5, r19	; 0x05
    212a:	2c 83       	std	Y+4, r18	; 0x04
    212c:	8c 81       	ldd	r24, Y+4	; 0x04
    212e:	9d 81       	ldd	r25, Y+5	; 0x05
    2130:	81 30       	cpi	r24, 0x01	; 1
    2132:	91 05       	cpc	r25, r1
    2134:	d1 f0       	breq	.+52     	; 0x216a <MDIO_u8SetPortValue+0x66>
    2136:	2c 81       	ldd	r18, Y+4	; 0x04
    2138:	3d 81       	ldd	r19, Y+5	; 0x05
    213a:	22 30       	cpi	r18, 0x02	; 2
    213c:	31 05       	cpc	r19, r1
    213e:	2c f4       	brge	.+10     	; 0x214a <MDIO_u8SetPortValue+0x46>
    2140:	8c 81       	ldd	r24, Y+4	; 0x04
    2142:	9d 81       	ldd	r25, Y+5	; 0x05
    2144:	00 97       	sbiw	r24, 0x00	; 0
    2146:	61 f0       	breq	.+24     	; 0x2160 <MDIO_u8SetPortValue+0x5c>
    2148:	1e c0       	rjmp	.+60     	; 0x2186 <MDIO_u8SetPortValue+0x82>
    214a:	2c 81       	ldd	r18, Y+4	; 0x04
    214c:	3d 81       	ldd	r19, Y+5	; 0x05
    214e:	22 30       	cpi	r18, 0x02	; 2
    2150:	31 05       	cpc	r19, r1
    2152:	81 f0       	breq	.+32     	; 0x2174 <MDIO_u8SetPortValue+0x70>
    2154:	8c 81       	ldd	r24, Y+4	; 0x04
    2156:	9d 81       	ldd	r25, Y+5	; 0x05
    2158:	83 30       	cpi	r24, 0x03	; 3
    215a:	91 05       	cpc	r25, r1
    215c:	81 f0       	breq	.+32     	; 0x217e <MDIO_u8SetPortValue+0x7a>
    215e:	13 c0       	rjmp	.+38     	; 0x2186 <MDIO_u8SetPortValue+0x82>
		case(MDIO_U8_PORTA):MDIO_U8_PORTA_REG = Copy_u8PortValue;break;
    2160:	eb e3       	ldi	r30, 0x3B	; 59
    2162:	f0 e0       	ldi	r31, 0x00	; 0
    2164:	8b 81       	ldd	r24, Y+3	; 0x03
    2166:	80 83       	st	Z, r24
    2168:	0e c0       	rjmp	.+28     	; 0x2186 <MDIO_u8SetPortValue+0x82>
		case(MDIO_U8_PORTB):MDIO_U8_PORTB_REG = Copy_u8PortValue;break;
    216a:	e8 e3       	ldi	r30, 0x38	; 56
    216c:	f0 e0       	ldi	r31, 0x00	; 0
    216e:	8b 81       	ldd	r24, Y+3	; 0x03
    2170:	80 83       	st	Z, r24
    2172:	09 c0       	rjmp	.+18     	; 0x2186 <MDIO_u8SetPortValue+0x82>
		case(MDIO_U8_PORTC):MDIO_U8_PORTC_REG = Copy_u8PortValue;break;
    2174:	e5 e3       	ldi	r30, 0x35	; 53
    2176:	f0 e0       	ldi	r31, 0x00	; 0
    2178:	8b 81       	ldd	r24, Y+3	; 0x03
    217a:	80 83       	st	Z, r24
    217c:	04 c0       	rjmp	.+8      	; 0x2186 <MDIO_u8SetPortValue+0x82>
		case(MDIO_U8_PORTD):MDIO_U8_PORTD_REG = Copy_u8PortValue;break;
    217e:	e2 e3       	ldi	r30, 0x32	; 50
    2180:	f0 e0       	ldi	r31, 0x00	; 0
    2182:	8b 81       	ldd	r24, Y+3	; 0x03
    2184:	80 83       	st	Z, r24
		}
	}
	return Local_u8ErrorState;
    2186:	89 81       	ldd	r24, Y+1	; 0x01
}
    2188:	0f 90       	pop	r0
    218a:	0f 90       	pop	r0
    218c:	0f 90       	pop	r0
    218e:	0f 90       	pop	r0
    2190:	0f 90       	pop	r0
    2192:	cf 91       	pop	r28
    2194:	df 91       	pop	r29
    2196:	08 95       	ret

00002198 <MDIO_u8GetPortValue>:
u8 MDIO_u8GetPortValue(u8 Copy_u8PortID , u8 * Copy_u8PortValue){
    2198:	df 93       	push	r29
    219a:	cf 93       	push	r28
    219c:	00 d0       	rcall	.+0      	; 0x219e <MDIO_u8GetPortValue+0x6>
    219e:	00 d0       	rcall	.+0      	; 0x21a0 <MDIO_u8GetPortValue+0x8>
    21a0:	00 d0       	rcall	.+0      	; 0x21a2 <MDIO_u8GetPortValue+0xa>
    21a2:	cd b7       	in	r28, 0x3d	; 61
    21a4:	de b7       	in	r29, 0x3e	; 62
    21a6:	8a 83       	std	Y+2, r24	; 0x02
    21a8:	7c 83       	std	Y+4, r23	; 0x04
    21aa:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState= STD_TYPES_NOK;
    21ac:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_u8PortID <= MDIO_U8_PORTD) && (Copy_u8PortValue != STD_TYPE_NULL)){
    21ae:	8a 81       	ldd	r24, Y+2	; 0x02
    21b0:	84 30       	cpi	r24, 0x04	; 4
    21b2:	08 f0       	brcs	.+2      	; 0x21b6 <MDIO_u8GetPortValue+0x1e>
    21b4:	40 c0       	rjmp	.+128    	; 0x2236 <MDIO_u8GetPortValue+0x9e>
    21b6:	8b 81       	ldd	r24, Y+3	; 0x03
    21b8:	9c 81       	ldd	r25, Y+4	; 0x04
    21ba:	00 97       	sbiw	r24, 0x00	; 0
    21bc:	e1 f1       	breq	.+120    	; 0x2236 <MDIO_u8GetPortValue+0x9e>
		Local_u8ErrorState = STD_TYPES_OK;
    21be:	81 e0       	ldi	r24, 0x01	; 1
    21c0:	89 83       	std	Y+1, r24	; 0x01
		switch(Copy_u8PortID){
    21c2:	8a 81       	ldd	r24, Y+2	; 0x02
    21c4:	28 2f       	mov	r18, r24
    21c6:	30 e0       	ldi	r19, 0x00	; 0
    21c8:	3e 83       	std	Y+6, r19	; 0x06
    21ca:	2d 83       	std	Y+5, r18	; 0x05
    21cc:	8d 81       	ldd	r24, Y+5	; 0x05
    21ce:	9e 81       	ldd	r25, Y+6	; 0x06
    21d0:	81 30       	cpi	r24, 0x01	; 1
    21d2:	91 05       	cpc	r25, r1
    21d4:	e1 f0       	breq	.+56     	; 0x220e <MDIO_u8GetPortValue+0x76>
    21d6:	2d 81       	ldd	r18, Y+5	; 0x05
    21d8:	3e 81       	ldd	r19, Y+6	; 0x06
    21da:	22 30       	cpi	r18, 0x02	; 2
    21dc:	31 05       	cpc	r19, r1
    21de:	2c f4       	brge	.+10     	; 0x21ea <MDIO_u8GetPortValue+0x52>
    21e0:	8d 81       	ldd	r24, Y+5	; 0x05
    21e2:	9e 81       	ldd	r25, Y+6	; 0x06
    21e4:	00 97       	sbiw	r24, 0x00	; 0
    21e6:	61 f0       	breq	.+24     	; 0x2200 <MDIO_u8GetPortValue+0x68>
    21e8:	26 c0       	rjmp	.+76     	; 0x2236 <MDIO_u8GetPortValue+0x9e>
    21ea:	2d 81       	ldd	r18, Y+5	; 0x05
    21ec:	3e 81       	ldd	r19, Y+6	; 0x06
    21ee:	22 30       	cpi	r18, 0x02	; 2
    21f0:	31 05       	cpc	r19, r1
    21f2:	a1 f0       	breq	.+40     	; 0x221c <MDIO_u8GetPortValue+0x84>
    21f4:	8d 81       	ldd	r24, Y+5	; 0x05
    21f6:	9e 81       	ldd	r25, Y+6	; 0x06
    21f8:	83 30       	cpi	r24, 0x03	; 3
    21fa:	91 05       	cpc	r25, r1
    21fc:	b1 f0       	breq	.+44     	; 0x222a <MDIO_u8GetPortValue+0x92>
    21fe:	1b c0       	rjmp	.+54     	; 0x2236 <MDIO_u8GetPortValue+0x9e>
		case(MDIO_U8_PORTA): * Copy_u8PortValue = MDIO_U8_PINA;break;
    2200:	e9 e3       	ldi	r30, 0x39	; 57
    2202:	f0 e0       	ldi	r31, 0x00	; 0
    2204:	80 81       	ld	r24, Z
    2206:	eb 81       	ldd	r30, Y+3	; 0x03
    2208:	fc 81       	ldd	r31, Y+4	; 0x04
    220a:	80 83       	st	Z, r24
    220c:	14 c0       	rjmp	.+40     	; 0x2236 <MDIO_u8GetPortValue+0x9e>
		case(MDIO_U8_PORTB): * Copy_u8PortValue = MDIO_U8_PINB;break;
    220e:	e6 e3       	ldi	r30, 0x36	; 54
    2210:	f0 e0       	ldi	r31, 0x00	; 0
    2212:	80 81       	ld	r24, Z
    2214:	eb 81       	ldd	r30, Y+3	; 0x03
    2216:	fc 81       	ldd	r31, Y+4	; 0x04
    2218:	80 83       	st	Z, r24
    221a:	0d c0       	rjmp	.+26     	; 0x2236 <MDIO_u8GetPortValue+0x9e>
		case(MDIO_U8_PORTC): * Copy_u8PortValue = MDIO_U8_PINC;break;
    221c:	e3 e3       	ldi	r30, 0x33	; 51
    221e:	f0 e0       	ldi	r31, 0x00	; 0
    2220:	80 81       	ld	r24, Z
    2222:	eb 81       	ldd	r30, Y+3	; 0x03
    2224:	fc 81       	ldd	r31, Y+4	; 0x04
    2226:	80 83       	st	Z, r24
    2228:	06 c0       	rjmp	.+12     	; 0x2236 <MDIO_u8GetPortValue+0x9e>
		case(MDIO_U8_PORTD): * Copy_u8PortValue = MDIO_U8_PIND;break;
    222a:	e0 e3       	ldi	r30, 0x30	; 48
    222c:	f0 e0       	ldi	r31, 0x00	; 0
    222e:	80 81       	ld	r24, Z
    2230:	eb 81       	ldd	r30, Y+3	; 0x03
    2232:	fc 81       	ldd	r31, Y+4	; 0x04
    2234:	80 83       	st	Z, r24
		}
	}
	return Local_u8ErrorState;
    2236:	89 81       	ldd	r24, Y+1	; 0x01
}
    2238:	26 96       	adiw	r28, 0x06	; 6
    223a:	0f b6       	in	r0, 0x3f	; 63
    223c:	f8 94       	cli
    223e:	de bf       	out	0x3e, r29	; 62
    2240:	0f be       	out	0x3f, r0	; 63
    2242:	cd bf       	out	0x3d, r28	; 61
    2244:	cf 91       	pop	r28
    2246:	df 91       	pop	r29
    2248:	08 95       	ret

0000224a <MDIO_U8INIT>:
u8 MDIO_U8INIT(void){
    224a:	df 93       	push	r29
    224c:	cf 93       	push	r28
    224e:	0f 92       	push	r0
    2250:	cd b7       	in	r28, 0x3d	; 61
    2252:	de b7       	in	r29, 0x3e	; 62
	/*PORT DIRECTIONS*/
	MDIO_U8_DDRA = PRIVATE_U8_CONC(MDIO_u8_PA7_DIRECTION , MDIO_u8_PA6_DIRECTION , MDIO_u8_PA5_DIRECTION , MDIO_u8_PA4_DIRECTION , MDIO_u8_PA3_DIRECTION, MDIO_u8_PA2_DIRECTION, MDIO_u8_PA1_DIRECTION ,MDIO_u8_PA0_DIRECTION);
    2254:	ea e3       	ldi	r30, 0x3A	; 58
    2256:	f0 e0       	ldi	r31, 0x00	; 0
    2258:	8f ef       	ldi	r24, 0xFF	; 255
    225a:	80 83       	st	Z, r24
	MDIO_U8_DDRB = PRIVATE_U8_CONC(MDIO_u8_PB7_DIRECTION , MDIO_u8_PB6_DIRECTION , MDIO_u8_PB5_DIRECTION , MDIO_u8_PB4_DIRECTION , MDIO_u8_PB3_DIRECTION, MDIO_u8_PB2_DIRECTION, MDIO_u8_PB1_DIRECTION ,MDIO_u8_PB0_DIRECTION);
    225c:	e7 e3       	ldi	r30, 0x37	; 55
    225e:	f0 e0       	ldi	r31, 0x00	; 0
    2260:	8f e0       	ldi	r24, 0x0F	; 15
    2262:	80 83       	st	Z, r24
	MDIO_U8_DDRC = PRIVATE_U8_CONC(MDIO_u8_PC7_DIRECTION , MDIO_u8_PC6_DIRECTION , MDIO_u8_PC5_DIRECTION , MDIO_u8_PC4_DIRECTION , MDIO_u8_PC3_DIRECTION, MDIO_u8_PC2_DIRECTION, MDIO_u8_PC1_DIRECTION ,MDIO_u8_PC0_DIRECTION);
    2264:	e4 e3       	ldi	r30, 0x34	; 52
    2266:	f0 e0       	ldi	r31, 0x00	; 0
    2268:	8f ef       	ldi	r24, 0xFF	; 255
    226a:	80 83       	st	Z, r24
	MDIO_U8_DDRD = PRIVATE_U8_CONC(MDIO_u8_PD7_DIRECTION , MDIO_u8_PD6_DIRECTION , MDIO_u8_PD5_DIRECTION , MDIO_u8_PD4_DIRECTION , MDIO_u8_PD3_DIRECTION, MDIO_u8_PD2_DIRECTION, MDIO_u8_PD1_DIRECTION ,MDIO_u8_PD0_DIRECTION);
    226c:	e1 e3       	ldi	r30, 0x31	; 49
    226e:	f0 e0       	ldi	r31, 0x00	; 0
    2270:	10 82       	st	Z, r1
	/*PORT VALUES*/
	MDIO_U8_PORTA_REG = PRIVATE_U8_CONC(MDIO_u8_PA7_VALUE , MDIO_u8_PA6_VALUE , MDIO_u8_PA5_VALUE , MDIO_u8_PA4_VALUE , MDIO_u8_PA3_VALUE , MDIO_u8_PA2_VALUE , MDIO_u8_PA1_VALUE , MDIO_u8_PA0_VALUE);
    2272:	eb e3       	ldi	r30, 0x3B	; 59
    2274:	f0 e0       	ldi	r31, 0x00	; 0
    2276:	80 ef       	ldi	r24, 0xF0	; 240
    2278:	80 83       	st	Z, r24
	MDIO_U8_PORTB_REG = PRIVATE_U8_CONC(MDIO_u8_PB7_VALUE , MDIO_u8_PB6_VALUE , MDIO_u8_PB5_VALUE , MDIO_u8_PB4_VALUE , MDIO_u8_PB3_VALUE , MDIO_u8_PB2_VALUE , MDIO_u8_PB1_VALUE , MDIO_u8_PB0_VALUE);
    227a:	e8 e3       	ldi	r30, 0x38	; 56
    227c:	f0 e0       	ldi	r31, 0x00	; 0
    227e:	80 ee       	ldi	r24, 0xE0	; 224
    2280:	80 83       	st	Z, r24
	MDIO_U8_PORTC_REG = PRIVATE_U8_CONC(MDIO_u8_PC7_VALUE , MDIO_u8_PC6_VALUE , MDIO_u8_PC5_VALUE , MDIO_u8_PC4_VALUE , MDIO_u8_PC3_VALUE , MDIO_u8_PC2_VALUE , MDIO_u8_PC1_VALUE , MDIO_u8_PC0_VALUE);
    2282:	e5 e3       	ldi	r30, 0x35	; 53
    2284:	f0 e0       	ldi	r31, 0x00	; 0
    2286:	10 82       	st	Z, r1
	MDIO_U8_PORTD_REG = PRIVATE_U8_CONC(MDIO_u8_PD7_VALUE , MDIO_u8_PD6_VALUE , MDIO_u8_PD5_VALUE , MDIO_u8_PD4_VALUE , MDIO_u8_PD3_VALUE , MDIO_u8_PD2_VALUE , MDIO_u8_PD1_VALUE , MDIO_u8_PD0_VALUE);
    2288:	e2 e3       	ldi	r30, 0x32	; 50
    228a:	f0 e0       	ldi	r31, 0x00	; 0
    228c:	10 82       	st	Z, r1
}
    228e:	0f 90       	pop	r0
    2290:	cf 91       	pop	r28
    2292:	df 91       	pop	r29
    2294:	08 95       	ret

00002296 <MTMR_TIMER0_INIT>:
#include "MTMR_Interface.h"
#include "MTMR_Private.h"

static void(*MTMR_PF[2])(void) = {STD_TYPE_NULL , STD_TYPE_NULL};

u8 MTMR_TIMER0_INIT(void){
    2296:	df 93       	push	r29
    2298:	cf 93       	push	r28
    229a:	0f 92       	push	r0
    229c:	cd b7       	in	r28, 0x3d	; 61
    229e:	de b7       	in	r29, 0x3e	; 62
	/*Select timer mode*/
	MTMR_U8_TCCR0_REG |= MTMR_U8_TimerMode;
    22a0:	a3 e5       	ldi	r26, 0x53	; 83
    22a2:	b0 e0       	ldi	r27, 0x00	; 0
    22a4:	e3 e5       	ldi	r30, 0x53	; 83
    22a6:	f0 e0       	ldi	r31, 0x00	; 0
    22a8:	80 81       	ld	r24, Z
    22aa:	8c 93       	st	X, r24
//	CLEAR_BIT(MTMR_U8_TCCR0_REG , 4);
	/*1ms isr calculations
	 * no of ovfs = 1000/256=3.90625
	 *  = 0.90625 * 256 = 232 tick needed in last timer ovfs*/
	/*set preload value */
	MTMR_U8_TCNT0_REG = 24;
    22ac:	e2 e5       	ldi	r30, 0x52	; 82
    22ae:	f0 e0       	ldi	r31, 0x00	; 0
    22b0:	88 e1       	ldi	r24, 0x18	; 24
    22b2:	80 83       	st	Z, r24
	/*Enable OVFs*/
	SET_BIT(MTMR_U8_TIMSK_REG , 0);
    22b4:	a9 e5       	ldi	r26, 0x59	; 89
    22b6:	b0 e0       	ldi	r27, 0x00	; 0
    22b8:	e9 e5       	ldi	r30, 0x59	; 89
    22ba:	f0 e0       	ldi	r31, 0x00	; 0
    22bc:	80 81       	ld	r24, Z
    22be:	81 60       	ori	r24, 0x01	; 1
    22c0:	8c 93       	st	X, r24
	/*Set preScaler(8.. for now)*/
	MTMR_U8_TCCR0_REG |= 0b00000010;
    22c2:	a3 e5       	ldi	r26, 0x53	; 83
    22c4:	b0 e0       	ldi	r27, 0x00	; 0
    22c6:	e3 e5       	ldi	r30, 0x53	; 83
    22c8:	f0 e0       	ldi	r31, 0x00	; 0
    22ca:	80 81       	ld	r24, Z
    22cc:	82 60       	ori	r24, 0x02	; 2
    22ce:	8c 93       	st	X, r24
}
    22d0:	0f 90       	pop	r0
    22d2:	cf 91       	pop	r28
    22d4:	df 91       	pop	r29
    22d6:	08 95       	ret

000022d8 <MTMR_TMR0CompareMatchValue>:

u8 MTMR_TMR0CompareMatchValue(u8 Copy_u8CompareMatchValue){
    22d8:	df 93       	push	r29
    22da:	cf 93       	push	r28
    22dc:	00 d0       	rcall	.+0      	; 0x22de <MTMR_TMR0CompareMatchValue+0x6>
    22de:	cd b7       	in	r28, 0x3d	; 61
    22e0:	de b7       	in	r29, 0x3e	; 62
    22e2:	89 83       	std	Y+1, r24	; 0x01
	MTMR_U8_OCR0_REG = Copy_u8CompareMatchValue;
    22e4:	ec e5       	ldi	r30, 0x5C	; 92
    22e6:	f0 e0       	ldi	r31, 0x00	; 0
    22e8:	89 81       	ldd	r24, Y+1	; 0x01
    22ea:	80 83       	st	Z, r24
}
    22ec:	0f 90       	pop	r0
    22ee:	0f 90       	pop	r0
    22f0:	cf 91       	pop	r28
    22f2:	df 91       	pop	r29
    22f4:	08 95       	ret

000022f6 <MTMR_U8TMR0_SetCallBack>:

u8 MTMR_U8TMR0_SetCallBack(u8 CopyInterruptNo , void (*Copy_pf)(void)){
    22f6:	df 93       	push	r29
    22f8:	cf 93       	push	r28
    22fa:	00 d0       	rcall	.+0      	; 0x22fc <MTMR_U8TMR0_SetCallBack+0x6>
    22fc:	00 d0       	rcall	.+0      	; 0x22fe <MTMR_U8TMR0_SetCallBack+0x8>
    22fe:	cd b7       	in	r28, 0x3d	; 61
    2300:	de b7       	in	r29, 0x3e	; 62
    2302:	8a 83       	std	Y+2, r24	; 0x02
    2304:	7c 83       	std	Y+4, r23	; 0x04
    2306:	6b 83       	std	Y+3, r22	; 0x03
	u8 LocalstateError = STD_TYPES_OK;
    2308:	81 e0       	ldi	r24, 0x01	; 1
    230a:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pf != STD_TYPE_NULL){
    230c:	8b 81       	ldd	r24, Y+3	; 0x03
    230e:	9c 81       	ldd	r25, Y+4	; 0x04
    2310:	00 97       	sbiw	r24, 0x00	; 0
    2312:	61 f0       	breq	.+24     	; 0x232c <MTMR_U8TMR0_SetCallBack+0x36>
		MTMR_PF[CopyInterruptNo] =Copy_pf;
    2314:	8a 81       	ldd	r24, Y+2	; 0x02
    2316:	88 2f       	mov	r24, r24
    2318:	90 e0       	ldi	r25, 0x00	; 0
    231a:	88 0f       	add	r24, r24
    231c:	99 1f       	adc	r25, r25
    231e:	fc 01       	movw	r30, r24
    2320:	e6 59       	subi	r30, 0x96	; 150
    2322:	ff 4f       	sbci	r31, 0xFF	; 255
    2324:	8b 81       	ldd	r24, Y+3	; 0x03
    2326:	9c 81       	ldd	r25, Y+4	; 0x04
    2328:	91 83       	std	Z+1, r25	; 0x01
    232a:	80 83       	st	Z, r24
	}
	return LocalstateError;
    232c:	89 81       	ldd	r24, Y+1	; 0x01
}
    232e:	0f 90       	pop	r0
    2330:	0f 90       	pop	r0
    2332:	0f 90       	pop	r0
    2334:	0f 90       	pop	r0
    2336:	cf 91       	pop	r28
    2338:	df 91       	pop	r29
    233a:	08 95       	ret

0000233c <__vector_11>:

void __vector_11(void) __attribute__((signal));
void __vector_11(void){
    233c:	1f 92       	push	r1
    233e:	0f 92       	push	r0
    2340:	0f b6       	in	r0, 0x3f	; 63
    2342:	0f 92       	push	r0
    2344:	11 24       	eor	r1, r1
    2346:	2f 93       	push	r18
    2348:	3f 93       	push	r19
    234a:	4f 93       	push	r20
    234c:	5f 93       	push	r21
    234e:	6f 93       	push	r22
    2350:	7f 93       	push	r23
    2352:	8f 93       	push	r24
    2354:	9f 93       	push	r25
    2356:	af 93       	push	r26
    2358:	bf 93       	push	r27
    235a:	ef 93       	push	r30
    235c:	ff 93       	push	r31
    235e:	df 93       	push	r29
    2360:	cf 93       	push	r28
    2362:	cd b7       	in	r28, 0x3d	; 61
    2364:	de b7       	in	r29, 0x3e	; 62
	static  u16 Local_counter =0;
	Local_counter++;
    2366:	80 91 6e 00 	lds	r24, 0x006E
    236a:	90 91 6f 00 	lds	r25, 0x006F
    236e:	01 96       	adiw	r24, 0x01	; 1
    2370:	90 93 6f 00 	sts	0x006F, r25
    2374:	80 93 6e 00 	sts	0x006E, r24
	if(Local_counter ==4){
    2378:	80 91 6e 00 	lds	r24, 0x006E
    237c:	90 91 6f 00 	lds	r25, 0x006F
    2380:	84 30       	cpi	r24, 0x04	; 4
    2382:	91 05       	cpc	r25, r1
    2384:	99 f4       	brne	.+38     	; 0x23ac <__vector_11+0x70>
		/*Reset PreLoad value*/
		MTMR_U8_TCNT0_REG = MTMR_U8_TMRO_PreLoadValue;
    2386:	e2 e5       	ldi	r30, 0x52	; 82
    2388:	f0 e0       	ldi	r31, 0x00	; 0
    238a:	88 e1       	ldi	r24, 0x18	; 24
    238c:	80 83       	st	Z, r24
		/*Action*/
		if(MTMR_PF[MTMR_TMR0_OVF] != STD_TYPE_NULL){
    238e:	80 91 6a 00 	lds	r24, 0x006A
    2392:	90 91 6b 00 	lds	r25, 0x006B
    2396:	00 97       	sbiw	r24, 0x00	; 0
    2398:	29 f0       	breq	.+10     	; 0x23a4 <__vector_11+0x68>
			MTMR_PF[MTMR_TMR0_OVF]();
    239a:	e0 91 6a 00 	lds	r30, 0x006A
    239e:	f0 91 6b 00 	lds	r31, 0x006B
    23a2:	09 95       	icall
		}
		/*Clear Counter*/
		Local_counter = 0;
    23a4:	10 92 6f 00 	sts	0x006F, r1
    23a8:	10 92 6e 00 	sts	0x006E, r1
	}
}
    23ac:	cf 91       	pop	r28
    23ae:	df 91       	pop	r29
    23b0:	ff 91       	pop	r31
    23b2:	ef 91       	pop	r30
    23b4:	bf 91       	pop	r27
    23b6:	af 91       	pop	r26
    23b8:	9f 91       	pop	r25
    23ba:	8f 91       	pop	r24
    23bc:	7f 91       	pop	r23
    23be:	6f 91       	pop	r22
    23c0:	5f 91       	pop	r21
    23c2:	4f 91       	pop	r20
    23c4:	3f 91       	pop	r19
    23c6:	2f 91       	pop	r18
    23c8:	0f 90       	pop	r0
    23ca:	0f be       	out	0x3f, r0	; 63
    23cc:	0f 90       	pop	r0
    23ce:	1f 90       	pop	r1
    23d0:	18 95       	reti

000023d2 <__vector_10>:

void __vector_10(void) __attribute__((signal));
void __vector_10(void){
    23d2:	1f 92       	push	r1
    23d4:	0f 92       	push	r0
    23d6:	0f b6       	in	r0, 0x3f	; 63
    23d8:	0f 92       	push	r0
    23da:	11 24       	eor	r1, r1
    23dc:	2f 93       	push	r18
    23de:	3f 93       	push	r19
    23e0:	4f 93       	push	r20
    23e2:	5f 93       	push	r21
    23e4:	6f 93       	push	r22
    23e6:	7f 93       	push	r23
    23e8:	8f 93       	push	r24
    23ea:	9f 93       	push	r25
    23ec:	af 93       	push	r26
    23ee:	bf 93       	push	r27
    23f0:	ef 93       	push	r30
    23f2:	ff 93       	push	r31
    23f4:	df 93       	push	r29
    23f6:	cf 93       	push	r28
    23f8:	cd b7       	in	r28, 0x3d	; 61
    23fa:	de b7       	in	r29, 0x3e	; 62
	static  u16 Local_counter =0;
	Local_counter++;
    23fc:	80 91 70 00 	lds	r24, 0x0070
    2400:	90 91 71 00 	lds	r25, 0x0071
    2404:	01 96       	adiw	r24, 0x01	; 1
    2406:	90 93 71 00 	sts	0x0071, r25
    240a:	80 93 70 00 	sts	0x0070, r24
	if(Local_counter ==10000){
    240e:	80 91 70 00 	lds	r24, 0x0070
    2412:	90 91 71 00 	lds	r25, 0x0071
    2416:	27 e2       	ldi	r18, 0x27	; 39
    2418:	80 31       	cpi	r24, 0x10	; 16
    241a:	92 07       	cpc	r25, r18
    241c:	79 f4       	brne	.+30     	; 0x243c <__vector_10+0x6a>
		/*Action*/
		if(MTMR_PF[MTMR_TMR0_CTC] != STD_TYPE_NULL){
    241e:	80 91 6c 00 	lds	r24, 0x006C
    2422:	90 91 6d 00 	lds	r25, 0x006D
    2426:	00 97       	sbiw	r24, 0x00	; 0
    2428:	29 f0       	breq	.+10     	; 0x2434 <__vector_10+0x62>
			MTMR_PF[MTMR_TMR0_CTC]();
    242a:	e0 91 6c 00 	lds	r30, 0x006C
    242e:	f0 91 6d 00 	lds	r31, 0x006D
    2432:	09 95       	icall
		}
		/*Clear Counter*/
		Local_counter = 0;
    2434:	10 92 71 00 	sts	0x0071, r1
    2438:	10 92 70 00 	sts	0x0070, r1
	}
}
    243c:	cf 91       	pop	r28
    243e:	df 91       	pop	r29
    2440:	ff 91       	pop	r31
    2442:	ef 91       	pop	r30
    2444:	bf 91       	pop	r27
    2446:	af 91       	pop	r26
    2448:	9f 91       	pop	r25
    244a:	8f 91       	pop	r24
    244c:	7f 91       	pop	r23
    244e:	6f 91       	pop	r22
    2450:	5f 91       	pop	r21
    2452:	4f 91       	pop	r20
    2454:	3f 91       	pop	r19
    2456:	2f 91       	pop	r18
    2458:	0f 90       	pop	r0
    245a:	0f be       	out	0x3f, r0	; 63
    245c:	0f 90       	pop	r0
    245e:	1f 90       	pop	r1
    2460:	18 95       	reti

00002462 <MTMR_TIMER1_INIT>:

u8 MTMR_TIMER1_INIT(void){
    2462:	df 93       	push	r29
    2464:	cf 93       	push	r28
    2466:	0f 92       	push	r0
    2468:	cd b7       	in	r28, 0x3d	; 61
    246a:	de b7       	in	r29, 0x3e	; 62
	u8 LocalStateError =STD_TYPES_OK;
    246c:	81 e0       	ldi	r24, 0x01	; 1
    246e:	89 83       	std	Y+1, r24	; 0x01
	/*Choose mode .. Fast PWM fow now */
	CLEAR_BIT(MTMR_U8_TCCR1A_REG , 0);
    2470:	af e4       	ldi	r26, 0x4F	; 79
    2472:	b0 e0       	ldi	r27, 0x00	; 0
    2474:	ef e4       	ldi	r30, 0x4F	; 79
    2476:	f0 e0       	ldi	r31, 0x00	; 0
    2478:	80 81       	ld	r24, Z
    247a:	8e 7f       	andi	r24, 0xFE	; 254
    247c:	8c 93       	st	X, r24
	SET_BIT(MTMR_U8_TCCR1A_REG , 1);
    247e:	af e4       	ldi	r26, 0x4F	; 79
    2480:	b0 e0       	ldi	r27, 0x00	; 0
    2482:	ef e4       	ldi	r30, 0x4F	; 79
    2484:	f0 e0       	ldi	r31, 0x00	; 0
    2486:	80 81       	ld	r24, Z
    2488:	82 60       	ori	r24, 0x02	; 2
    248a:	8c 93       	st	X, r24
	SET_BIT(MTMR_U8_TCCR1B_REG , 3);
    248c:	ae e4       	ldi	r26, 0x4E	; 78
    248e:	b0 e0       	ldi	r27, 0x00	; 0
    2490:	ee e4       	ldi	r30, 0x4E	; 78
    2492:	f0 e0       	ldi	r31, 0x00	; 0
    2494:	80 81       	ld	r24, Z
    2496:	88 60       	ori	r24, 0x08	; 8
    2498:	8c 93       	st	X, r24
	SET_BIT(MTMR_U8_TCCR1B_REG , 4);
    249a:	ae e4       	ldi	r26, 0x4E	; 78
    249c:	b0 e0       	ldi	r27, 0x00	; 0
    249e:	ee e4       	ldi	r30, 0x4E	; 78
    24a0:	f0 e0       	ldi	r31, 0x00	; 0
    24a2:	80 81       	ld	r24, Z
    24a4:	80 61       	ori	r24, 0x10	; 16
    24a6:	8c 93       	st	X, r24
	/*SET PIN 0C1A TO NonInverting (clear on compare match)*/
	SET_BIT(MTMR_U8_TCCR1A_REG , 7);
    24a8:	af e4       	ldi	r26, 0x4F	; 79
    24aa:	b0 e0       	ldi	r27, 0x00	; 0
    24ac:	ef e4       	ldi	r30, 0x4F	; 79
    24ae:	f0 e0       	ldi	r31, 0x00	; 0
    24b0:	80 81       	ld	r24, Z
    24b2:	80 68       	ori	r24, 0x80	; 128
    24b4:	8c 93       	st	X, r24
	CLEAR_BIT(MTMR_U8_TCCR1A_REG , 6);
    24b6:	af e4       	ldi	r26, 0x4F	; 79
    24b8:	b0 e0       	ldi	r27, 0x00	; 0
    24ba:	ef e4       	ldi	r30, 0x4F	; 79
    24bc:	f0 e0       	ldi	r31, 0x00	; 0
    24be:	80 81       	ld	r24, Z
    24c0:	8f 7b       	andi	r24, 0xBF	; 191
    24c2:	8c 93       	st	X, r24
	/*Set top value of timer(ICR1 register) to 50HZ == 20ms*/
	MTMR_U16_ICR1_REG = 19999;
    24c4:	e6 e4       	ldi	r30, 0x46	; 70
    24c6:	f0 e0       	ldi	r31, 0x00	; 0
    24c8:	8f e1       	ldi	r24, 0x1F	; 31
    24ca:	9e e4       	ldi	r25, 0x4E	; 78
    24cc:	91 83       	std	Z+1, r25	; 0x01
    24ce:	80 83       	st	Z, r24
	/*Set initial value of OCR1A*/
	MTMR_U16_OCR1A_REG =999;
    24d0:	ea e4       	ldi	r30, 0x4A	; 74
    24d2:	f0 e0       	ldi	r31, 0x00	; 0
    24d4:	87 ee       	ldi	r24, 0xE7	; 231
    24d6:	93 e0       	ldi	r25, 0x03	; 3
    24d8:	91 83       	std	Z+1, r25	; 0x01
    24da:	80 83       	st	Z, r24
	/*Set preScaler(8.. for now)*/
	MTMR_U8_TCCR1B_REG |= 0b00000010;
    24dc:	ae e4       	ldi	r26, 0x4E	; 78
    24de:	b0 e0       	ldi	r27, 0x00	; 0
    24e0:	ee e4       	ldi	r30, 0x4E	; 78
    24e2:	f0 e0       	ldi	r31, 0x00	; 0
    24e4:	80 81       	ld	r24, Z
    24e6:	82 60       	ori	r24, 0x02	; 2
    24e8:	8c 93       	st	X, r24
	return LocalStateError;
    24ea:	89 81       	ldd	r24, Y+1	; 0x01
}
    24ec:	0f 90       	pop	r0
    24ee:	cf 91       	pop	r28
    24f0:	df 91       	pop	r29
    24f2:	08 95       	ret

000024f4 <MTMR_TMR1CompareMatchValue>:
u8 MTMR_TMR1CompareMatchValue(u16 Copy_u16CompareMatchValue){
    24f4:	df 93       	push	r29
    24f6:	cf 93       	push	r28
    24f8:	00 d0       	rcall	.+0      	; 0x24fa <MTMR_TMR1CompareMatchValue+0x6>
    24fa:	0f 92       	push	r0
    24fc:	cd b7       	in	r28, 0x3d	; 61
    24fe:	de b7       	in	r29, 0x3e	; 62
    2500:	9a 83       	std	Y+2, r25	; 0x02
    2502:	89 83       	std	Y+1, r24	; 0x01
	MTMR_U16_OCR1A_REG = Copy_u16CompareMatchValue;
    2504:	ea e4       	ldi	r30, 0x4A	; 74
    2506:	f0 e0       	ldi	r31, 0x00	; 0
    2508:	89 81       	ldd	r24, Y+1	; 0x01
    250a:	9a 81       	ldd	r25, Y+2	; 0x02
    250c:	91 83       	std	Z+1, r25	; 0x01
    250e:	80 83       	st	Z, r24
}
    2510:	0f 90       	pop	r0
    2512:	0f 90       	pop	r0
    2514:	0f 90       	pop	r0
    2516:	cf 91       	pop	r28
    2518:	df 91       	pop	r29
    251a:	08 95       	ret

0000251c <MTMR_U8HW_ICU_INIT>:

u8 MTMR_U8HW_ICU_INIT(void){
    251c:	df 93       	push	r29
    251e:	cf 93       	push	r28
    2520:	00 d0       	rcall	.+0      	; 0x2522 <MTMR_U8HW_ICU_INIT+0x6>
    2522:	cd b7       	in	r28, 0x3d	; 61
    2524:	de b7       	in	r29, 0x3e	; 62
	u8 LocalStateError =STD_TYPES_OK;
    2526:	81 e0       	ldi	r24, 0x01	; 1
    2528:	89 83       	std	Y+1, r24	; 0x01
	/*Choose mode .. normal mode */
	CLEAR_BIT(MTMR_U8_TCCR1A_REG , 0);
    252a:	af e4       	ldi	r26, 0x4F	; 79
    252c:	b0 e0       	ldi	r27, 0x00	; 0
    252e:	ef e4       	ldi	r30, 0x4F	; 79
    2530:	f0 e0       	ldi	r31, 0x00	; 0
    2532:	80 81       	ld	r24, Z
    2534:	8e 7f       	andi	r24, 0xFE	; 254
    2536:	8c 93       	st	X, r24
	CLEAR_BIT(MTMR_U8_TCCR1A_REG , 1);
    2538:	af e4       	ldi	r26, 0x4F	; 79
    253a:	b0 e0       	ldi	r27, 0x00	; 0
    253c:	ef e4       	ldi	r30, 0x4F	; 79
    253e:	f0 e0       	ldi	r31, 0x00	; 0
    2540:	80 81       	ld	r24, Z
    2542:	8d 7f       	andi	r24, 0xFD	; 253
    2544:	8c 93       	st	X, r24
	CLEAR_BIT(MTMR_U8_TCCR1B_REG , 3);
    2546:	ae e4       	ldi	r26, 0x4E	; 78
    2548:	b0 e0       	ldi	r27, 0x00	; 0
    254a:	ee e4       	ldi	r30, 0x4E	; 78
    254c:	f0 e0       	ldi	r31, 0x00	; 0
    254e:	80 81       	ld	r24, Z
    2550:	87 7f       	andi	r24, 0xF7	; 247
    2552:	8c 93       	st	X, r24
	CLEAR_BIT(MTMR_U8_TCCR1B_REG , 4);
    2554:	ae e4       	ldi	r26, 0x4E	; 78
    2556:	b0 e0       	ldi	r27, 0x00	; 0
    2558:	ee e4       	ldi	r30, 0x4E	; 78
    255a:	f0 e0       	ldi	r31, 0x00	; 0
    255c:	80 81       	ld	r24, Z
    255e:	8f 7e       	andi	r24, 0xEF	; 239
    2560:	8c 93       	st	X, r24
	/*select triggering source to be raising edge*/
	SET_BIT(MTMR_U8_TCCR1B_REG , 6);
    2562:	ae e4       	ldi	r26, 0x4E	; 78
    2564:	b0 e0       	ldi	r27, 0x00	; 0
    2566:	ee e4       	ldi	r30, 0x4E	; 78
    2568:	f0 e0       	ldi	r31, 0x00	; 0
    256a:	80 81       	ld	r24, Z
    256c:	80 64       	ori	r24, 0x40	; 64
    256e:	8c 93       	st	X, r24
	/*At each raising edge enable interrupt*/
	SET_BIT(MTMR_U8_TIMSK_REG , 5);
    2570:	a9 e5       	ldi	r26, 0x59	; 89
    2572:	b0 e0       	ldi	r27, 0x00	; 0
    2574:	e9 e5       	ldi	r30, 0x59	; 89
    2576:	f0 e0       	ldi	r31, 0x00	; 0
    2578:	80 81       	ld	r24, Z
    257a:	80 62       	ori	r24, 0x20	; 32
    257c:	8c 93       	st	X, r24
	/*Set preScaler(8.. TO MAKE TICK TIME = 1 MICROSECOND)*/
	MTMR_U8_TCCR0_REG |= 0b00000010;
    257e:	a3 e5       	ldi	r26, 0x53	; 83
    2580:	b0 e0       	ldi	r27, 0x00	; 0
    2582:	e3 e5       	ldi	r30, 0x53	; 83
    2584:	f0 e0       	ldi	r31, 0x00	; 0
    2586:	80 81       	ld	r24, Z
    2588:	82 60       	ori	r24, 0x02	; 2
    258a:	8c 93       	st	X, r24

}
    258c:	0f 90       	pop	r0
    258e:	0f 90       	pop	r0
    2590:	cf 91       	pop	r28
    2592:	df 91       	pop	r29
    2594:	08 95       	ret

00002596 <MTMR_U16getTon_and_Toff>:
static volatile u16 Ton , Toff;
u8 MTMR_U16getTon_and_Toff(u16 * CopyTon , u16 * CopyToff){
    2596:	df 93       	push	r29
    2598:	cf 93       	push	r28
    259a:	00 d0       	rcall	.+0      	; 0x259c <MTMR_U16getTon_and_Toff+0x6>
    259c:	00 d0       	rcall	.+0      	; 0x259e <MTMR_U16getTon_and_Toff+0x8>
    259e:	0f 92       	push	r0
    25a0:	cd b7       	in	r28, 0x3d	; 61
    25a2:	de b7       	in	r29, 0x3e	; 62
    25a4:	9a 83       	std	Y+2, r25	; 0x02
    25a6:	89 83       	std	Y+1, r24	; 0x01
    25a8:	7c 83       	std	Y+4, r23	; 0x04
    25aa:	6b 83       	std	Y+3, r22	; 0x03
	 *CopyTon = Ton;
    25ac:	80 91 74 00 	lds	r24, 0x0074
    25b0:	90 91 75 00 	lds	r25, 0x0075
    25b4:	e9 81       	ldd	r30, Y+1	; 0x01
    25b6:	fa 81       	ldd	r31, Y+2	; 0x02
    25b8:	91 83       	std	Z+1, r25	; 0x01
    25ba:	80 83       	st	Z, r24
	 *CopyToff = Toff;
    25bc:	80 91 76 00 	lds	r24, 0x0076
    25c0:	90 91 77 00 	lds	r25, 0x0077
    25c4:	eb 81       	ldd	r30, Y+3	; 0x03
    25c6:	fc 81       	ldd	r31, Y+4	; 0x04
    25c8:	91 83       	std	Z+1, r25	; 0x01
    25ca:	80 83       	st	Z, r24
}
    25cc:	0f 90       	pop	r0
    25ce:	0f 90       	pop	r0
    25d0:	0f 90       	pop	r0
    25d2:	0f 90       	pop	r0
    25d4:	0f 90       	pop	r0
    25d6:	cf 91       	pop	r28
    25d8:	df 91       	pop	r29
    25da:	08 95       	ret

000025dc <__vector_6>:
void __vector_6(void) __attribute__((signal));
void __vector_6(void){
    25dc:	1f 92       	push	r1
    25de:	0f 92       	push	r0
    25e0:	0f b6       	in	r0, 0x3f	; 63
    25e2:	0f 92       	push	r0
    25e4:	11 24       	eor	r1, r1
    25e6:	2f 93       	push	r18
    25e8:	3f 93       	push	r19
    25ea:	8f 93       	push	r24
    25ec:	9f 93       	push	r25
    25ee:	af 93       	push	r26
    25f0:	bf 93       	push	r27
    25f2:	ef 93       	push	r30
    25f4:	ff 93       	push	r31
    25f6:	df 93       	push	r29
    25f8:	cf 93       	push	r28
    25fa:	00 d0       	rcall	.+0      	; 0x25fc <__vector_6+0x20>
    25fc:	cd b7       	in	r28, 0x3d	; 61
    25fe:	de b7       	in	r29, 0x3e	; 62
	static u8 flag =1;
	static u16 previuosTimerRead;
	u16 current_timer_read;
	current_timer_read = MTMR_U16_ICR1_REG;
    2600:	e6 e4       	ldi	r30, 0x46	; 70
    2602:	f0 e0       	ldi	r31, 0x00	; 0
    2604:	80 81       	ld	r24, Z
    2606:	91 81       	ldd	r25, Z+1	; 0x01
    2608:	9a 83       	std	Y+2, r25	; 0x02
    260a:	89 83       	std	Y+1, r24	; 0x01
	/*READ TIMER VALUE*/
	if(flag == 1){
    260c:	80 91 68 00 	lds	r24, 0x0068
    2610:	81 30       	cpi	r24, 0x01	; 1
    2612:	b1 f4       	brne	.+44     	; 0x2640 <__vector_6+0x64>
		/*change ICU edge detector to be falling edge*/
		CLEAR_BIT(MTMR_U8_TCCR1B_REG , 6);
    2614:	ae e4       	ldi	r26, 0x4E	; 78
    2616:	b0 e0       	ldi	r27, 0x00	; 0
    2618:	ee e4       	ldi	r30, 0x4E	; 78
    261a:	f0 e0       	ldi	r31, 0x00	; 0
    261c:	80 81       	ld	r24, Z
    261e:	8f 7b       	andi	r24, 0xBF	; 191
    2620:	8c 93       	st	X, r24
		/*Calculate Toff period*/
		Toff = (current_timer_read - previuosTimerRead ) ;
    2622:	20 91 72 00 	lds	r18, 0x0072
    2626:	30 91 73 00 	lds	r19, 0x0073
    262a:	89 81       	ldd	r24, Y+1	; 0x01
    262c:	9a 81       	ldd	r25, Y+2	; 0x02
    262e:	82 1b       	sub	r24, r18
    2630:	93 0b       	sbc	r25, r19
    2632:	90 93 77 00 	sts	0x0077, r25
    2636:	80 93 76 00 	sts	0x0076, r24
		flag = 0 ;
    263a:	10 92 68 00 	sts	0x0068, r1
    263e:	16 c0       	rjmp	.+44     	; 0x266c <__vector_6+0x90>
	}else{
		/*Calculate Ton period*/
		Ton = (current_timer_read - previuosTimerRead ) ;
    2640:	20 91 72 00 	lds	r18, 0x0072
    2644:	30 91 73 00 	lds	r19, 0x0073
    2648:	89 81       	ldd	r24, Y+1	; 0x01
    264a:	9a 81       	ldd	r25, Y+2	; 0x02
    264c:	82 1b       	sub	r24, r18
    264e:	93 0b       	sbc	r25, r19
    2650:	90 93 75 00 	sts	0x0075, r25
    2654:	80 93 74 00 	sts	0x0074, r24
		SET_BIT(MTMR_U8_TCCR1B_REG , 6);
    2658:	ae e4       	ldi	r26, 0x4E	; 78
    265a:	b0 e0       	ldi	r27, 0x00	; 0
    265c:	ee e4       	ldi	r30, 0x4E	; 78
    265e:	f0 e0       	ldi	r31, 0x00	; 0
    2660:	80 81       	ld	r24, Z
    2662:	80 64       	ori	r24, 0x40	; 64
    2664:	8c 93       	st	X, r24
		flag = 1 ;
    2666:	81 e0       	ldi	r24, 0x01	; 1
    2668:	80 93 68 00 	sts	0x0068, r24
	}
	previuosTimerRead = current_timer_read;
    266c:	89 81       	ldd	r24, Y+1	; 0x01
    266e:	9a 81       	ldd	r25, Y+2	; 0x02
    2670:	90 93 73 00 	sts	0x0073, r25
    2674:	80 93 72 00 	sts	0x0072, r24

}
    2678:	0f 90       	pop	r0
    267a:	0f 90       	pop	r0
    267c:	cf 91       	pop	r28
    267e:	df 91       	pop	r29
    2680:	ff 91       	pop	r31
    2682:	ef 91       	pop	r30
    2684:	bf 91       	pop	r27
    2686:	af 91       	pop	r26
    2688:	9f 91       	pop	r25
    268a:	8f 91       	pop	r24
    268c:	3f 91       	pop	r19
    268e:	2f 91       	pop	r18
    2690:	0f 90       	pop	r0
    2692:	0f be       	out	0x3f, r0	; 63
    2694:	0f 90       	pop	r0
    2696:	1f 90       	pop	r1
    2698:	18 95       	reti

0000269a <RTO_u8CreateTask>:

static RT0_TCB RTO_TCBs[RTO_MaxTasksNo];



u8 RTO_u8CreateTask(u8 Copy_u8Priority , u16 Copy_u16Periodicity , u16 Copy_u16FirstDelay , void(*Copy_pf)(void)){
    269a:	df 93       	push	r29
    269c:	cf 93       	push	r28
    269e:	cd b7       	in	r28, 0x3d	; 61
    26a0:	de b7       	in	r29, 0x3e	; 62
    26a2:	28 97       	sbiw	r28, 0x08	; 8
    26a4:	0f b6       	in	r0, 0x3f	; 63
    26a6:	f8 94       	cli
    26a8:	de bf       	out	0x3e, r29	; 62
    26aa:	0f be       	out	0x3f, r0	; 63
    26ac:	cd bf       	out	0x3d, r28	; 61
    26ae:	8a 83       	std	Y+2, r24	; 0x02
    26b0:	7c 83       	std	Y+4, r23	; 0x04
    26b2:	6b 83       	std	Y+3, r22	; 0x03
    26b4:	5e 83       	std	Y+6, r21	; 0x06
    26b6:	4d 83       	std	Y+5, r20	; 0x05
    26b8:	38 87       	std	Y+8, r19	; 0x08
    26ba:	2f 83       	std	Y+7, r18	; 0x07
	u8 LocalErrorState = STD_TYPES_NOK;
    26bc:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Priority < RTO_MaxTasksNo){
    26be:	8a 81       	ldd	r24, Y+2	; 0x02
    26c0:	83 30       	cpi	r24, 0x03	; 3
    26c2:	b0 f5       	brcc	.+108    	; 0x2730 <RTO_u8CreateTask+0x96>
		LocalErrorState = STD_TYPES_OK;
    26c4:	81 e0       	ldi	r24, 0x01	; 1
    26c6:	89 83       	std	Y+1, r24	; 0x01
		RTO_TCBs[Copy_u8Priority].FirstDelay = Copy_u16FirstDelay;
    26c8:	8a 81       	ldd	r24, Y+2	; 0x02
    26ca:	28 2f       	mov	r18, r24
    26cc:	30 e0       	ldi	r19, 0x00	; 0
    26ce:	c9 01       	movw	r24, r18
    26d0:	88 0f       	add	r24, r24
    26d2:	99 1f       	adc	r25, r25
    26d4:	82 0f       	add	r24, r18
    26d6:	93 1f       	adc	r25, r19
    26d8:	01 96       	adiw	r24, 0x01	; 1
    26da:	88 0f       	add	r24, r24
    26dc:	99 1f       	adc	r25, r25
    26de:	fc 01       	movw	r30, r24
    26e0:	e8 58       	subi	r30, 0x88	; 136
    26e2:	ff 4f       	sbci	r31, 0xFF	; 255
    26e4:	8d 81       	ldd	r24, Y+5	; 0x05
    26e6:	9e 81       	ldd	r25, Y+6	; 0x06
    26e8:	91 83       	std	Z+1, r25	; 0x01
    26ea:	80 83       	st	Z, r24
		RTO_TCBs[Copy_u8Priority].Periodicity = Copy_u16Periodicity;
    26ec:	8a 81       	ldd	r24, Y+2	; 0x02
    26ee:	28 2f       	mov	r18, r24
    26f0:	30 e0       	ldi	r19, 0x00	; 0
    26f2:	c9 01       	movw	r24, r18
    26f4:	88 0f       	add	r24, r24
    26f6:	99 1f       	adc	r25, r25
    26f8:	82 0f       	add	r24, r18
    26fa:	93 1f       	adc	r25, r19
    26fc:	88 0f       	add	r24, r24
    26fe:	99 1f       	adc	r25, r25
    2700:	fc 01       	movw	r30, r24
    2702:	e8 58       	subi	r30, 0x88	; 136
    2704:	ff 4f       	sbci	r31, 0xFF	; 255
    2706:	8b 81       	ldd	r24, Y+3	; 0x03
    2708:	9c 81       	ldd	r25, Y+4	; 0x04
    270a:	91 83       	std	Z+1, r25	; 0x01
    270c:	80 83       	st	Z, r24
		RTO_TCBs[Copy_u8Priority].pf = Copy_pf;
    270e:	8a 81       	ldd	r24, Y+2	; 0x02
    2710:	28 2f       	mov	r18, r24
    2712:	30 e0       	ldi	r19, 0x00	; 0
    2714:	c9 01       	movw	r24, r18
    2716:	88 0f       	add	r24, r24
    2718:	99 1f       	adc	r25, r25
    271a:	82 0f       	add	r24, r18
    271c:	93 1f       	adc	r25, r19
    271e:	88 0f       	add	r24, r24
    2720:	99 1f       	adc	r25, r25
    2722:	fc 01       	movw	r30, r24
    2724:	e4 58       	subi	r30, 0x84	; 132
    2726:	ff 4f       	sbci	r31, 0xFF	; 255
    2728:	8f 81       	ldd	r24, Y+7	; 0x07
    272a:	98 85       	ldd	r25, Y+8	; 0x08
    272c:	91 83       	std	Z+1, r25	; 0x01
    272e:	80 83       	st	Z, r24
	}
	return LocalErrorState;
    2730:	89 81       	ldd	r24, Y+1	; 0x01
}
    2732:	28 96       	adiw	r28, 0x08	; 8
    2734:	0f b6       	in	r0, 0x3f	; 63
    2736:	f8 94       	cli
    2738:	de bf       	out	0x3e, r29	; 62
    273a:	0f be       	out	0x3f, r0	; 63
    273c:	cd bf       	out	0x3d, r28	; 61
    273e:	cf 91       	pop	r28
    2740:	df 91       	pop	r29
    2742:	08 95       	ret

00002744 <RTO_voidStartScheduler>:

void RTO_voidStartScheduler(){
    2744:	df 93       	push	r29
    2746:	cf 93       	push	r28
    2748:	cd b7       	in	r28, 0x3d	; 61
    274a:	de b7       	in	r29, 0x3e	; 62
	/*Set callback function*/
	MTMR_U8TMR0_SetCallBack(MTMR_TMR0_OVF , &RTO_void_Scheduler_);
    274c:	28 eb       	ldi	r18, 0xB8	; 184
    274e:	33 e1       	ldi	r19, 0x13	; 19
    2750:	80 e0       	ldi	r24, 0x00	; 0
    2752:	b9 01       	movw	r22, r18
    2754:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <MTMR_U8TMR0_SetCallBack>
	SET_BIT(MEXTI_U8_SREG_REG,7);
    2758:	af e5       	ldi	r26, 0x5F	; 95
    275a:	b0 e0       	ldi	r27, 0x00	; 0
    275c:	ef e5       	ldi	r30, 0x5F	; 95
    275e:	f0 e0       	ldi	r31, 0x00	; 0
    2760:	80 81       	ld	r24, Z
    2762:	80 68       	ori	r24, 0x80	; 128
    2764:	8c 93       	st	X, r24
	MTMR_TIMER0_INIT();
    2766:	0e 94 4b 11 	call	0x2296	; 0x2296 <MTMR_TIMER0_INIT>
}
    276a:	cf 91       	pop	r28
    276c:	df 91       	pop	r29
    276e:	08 95       	ret

00002770 <RTO_void_Scheduler_>:
void RTO_void_Scheduler_(){
    2770:	df 93       	push	r29
    2772:	cf 93       	push	r28
    2774:	0f 92       	push	r0
    2776:	cd b7       	in	r28, 0x3d	; 61
    2778:	de b7       	in	r29, 0x3e	; 62
	for(u8 counter=0 ; counter<RTO_MaxTasksNo ; counter++){
    277a:	19 82       	std	Y+1, r1	; 0x01
    277c:	69 c0       	rjmp	.+210    	; 0x2850 <RTO_void_Scheduler_+0xe0>
		if(RTO_TCBs[counter].FirstDelay == 0){
    277e:	89 81       	ldd	r24, Y+1	; 0x01
    2780:	28 2f       	mov	r18, r24
    2782:	30 e0       	ldi	r19, 0x00	; 0
    2784:	c9 01       	movw	r24, r18
    2786:	88 0f       	add	r24, r24
    2788:	99 1f       	adc	r25, r25
    278a:	82 0f       	add	r24, r18
    278c:	93 1f       	adc	r25, r19
    278e:	01 96       	adiw	r24, 0x01	; 1
    2790:	88 0f       	add	r24, r24
    2792:	99 1f       	adc	r25, r25
    2794:	fc 01       	movw	r30, r24
    2796:	e8 58       	subi	r30, 0x88	; 136
    2798:	ff 4f       	sbci	r31, 0xFF	; 255
    279a:	80 81       	ld	r24, Z
    279c:	91 81       	ldd	r25, Z+1	; 0x01
    279e:	00 97       	sbiw	r24, 0x00	; 0
    27a0:	a1 f5       	brne	.+104    	; 0x280a <RTO_void_Scheduler_+0x9a>
			RTO_TCBs[counter].pf();
    27a2:	89 81       	ldd	r24, Y+1	; 0x01
    27a4:	28 2f       	mov	r18, r24
    27a6:	30 e0       	ldi	r19, 0x00	; 0
    27a8:	c9 01       	movw	r24, r18
    27aa:	88 0f       	add	r24, r24
    27ac:	99 1f       	adc	r25, r25
    27ae:	82 0f       	add	r24, r18
    27b0:	93 1f       	adc	r25, r19
    27b2:	88 0f       	add	r24, r24
    27b4:	99 1f       	adc	r25, r25
    27b6:	fc 01       	movw	r30, r24
    27b8:	e4 58       	subi	r30, 0x84	; 132
    27ba:	ff 4f       	sbci	r31, 0xFF	; 255
    27bc:	01 90       	ld	r0, Z+
    27be:	f0 81       	ld	r31, Z
    27c0:	e0 2d       	mov	r30, r0
    27c2:	09 95       	icall
			RTO_TCBs[counter].FirstDelay = RTO_TCBs[counter].Periodicity-1;
    27c4:	89 81       	ldd	r24, Y+1	; 0x01
    27c6:	48 2f       	mov	r20, r24
    27c8:	50 e0       	ldi	r21, 0x00	; 0
    27ca:	89 81       	ldd	r24, Y+1	; 0x01
    27cc:	28 2f       	mov	r18, r24
    27ce:	30 e0       	ldi	r19, 0x00	; 0
    27d0:	c9 01       	movw	r24, r18
    27d2:	88 0f       	add	r24, r24
    27d4:	99 1f       	adc	r25, r25
    27d6:	82 0f       	add	r24, r18
    27d8:	93 1f       	adc	r25, r19
    27da:	88 0f       	add	r24, r24
    27dc:	99 1f       	adc	r25, r25
    27de:	fc 01       	movw	r30, r24
    27e0:	e8 58       	subi	r30, 0x88	; 136
    27e2:	ff 4f       	sbci	r31, 0xFF	; 255
    27e4:	80 81       	ld	r24, Z
    27e6:	91 81       	ldd	r25, Z+1	; 0x01
    27e8:	9c 01       	movw	r18, r24
    27ea:	21 50       	subi	r18, 0x01	; 1
    27ec:	30 40       	sbci	r19, 0x00	; 0
    27ee:	ca 01       	movw	r24, r20
    27f0:	88 0f       	add	r24, r24
    27f2:	99 1f       	adc	r25, r25
    27f4:	84 0f       	add	r24, r20
    27f6:	95 1f       	adc	r25, r21
    27f8:	01 96       	adiw	r24, 0x01	; 1
    27fa:	88 0f       	add	r24, r24
    27fc:	99 1f       	adc	r25, r25
    27fe:	fc 01       	movw	r30, r24
    2800:	e8 58       	subi	r30, 0x88	; 136
    2802:	ff 4f       	sbci	r31, 0xFF	; 255
    2804:	31 83       	std	Z+1, r19	; 0x01
    2806:	20 83       	st	Z, r18
    2808:	20 c0       	rjmp	.+64     	; 0x284a <RTO_void_Scheduler_+0xda>
		}
		else{
			RTO_TCBs[counter].FirstDelay--;
    280a:	89 81       	ldd	r24, Y+1	; 0x01
    280c:	28 2f       	mov	r18, r24
    280e:	30 e0       	ldi	r19, 0x00	; 0
    2810:	c9 01       	movw	r24, r18
    2812:	88 0f       	add	r24, r24
    2814:	99 1f       	adc	r25, r25
    2816:	82 0f       	add	r24, r18
    2818:	93 1f       	adc	r25, r19
    281a:	01 96       	adiw	r24, 0x01	; 1
    281c:	88 0f       	add	r24, r24
    281e:	99 1f       	adc	r25, r25
    2820:	fc 01       	movw	r30, r24
    2822:	e8 58       	subi	r30, 0x88	; 136
    2824:	ff 4f       	sbci	r31, 0xFF	; 255
    2826:	80 81       	ld	r24, Z
    2828:	91 81       	ldd	r25, Z+1	; 0x01
    282a:	ac 01       	movw	r20, r24
    282c:	41 50       	subi	r20, 0x01	; 1
    282e:	50 40       	sbci	r21, 0x00	; 0
    2830:	c9 01       	movw	r24, r18
    2832:	88 0f       	add	r24, r24
    2834:	99 1f       	adc	r25, r25
    2836:	82 0f       	add	r24, r18
    2838:	93 1f       	adc	r25, r19
    283a:	01 96       	adiw	r24, 0x01	; 1
    283c:	88 0f       	add	r24, r24
    283e:	99 1f       	adc	r25, r25
    2840:	fc 01       	movw	r30, r24
    2842:	e8 58       	subi	r30, 0x88	; 136
    2844:	ff 4f       	sbci	r31, 0xFF	; 255
    2846:	51 83       	std	Z+1, r21	; 0x01
    2848:	40 83       	st	Z, r20
	MTMR_U8TMR0_SetCallBack(MTMR_TMR0_OVF , &RTO_void_Scheduler_);
	SET_BIT(MEXTI_U8_SREG_REG,7);
	MTMR_TIMER0_INIT();
}
void RTO_void_Scheduler_(){
	for(u8 counter=0 ; counter<RTO_MaxTasksNo ; counter++){
    284a:	89 81       	ldd	r24, Y+1	; 0x01
    284c:	8f 5f       	subi	r24, 0xFF	; 255
    284e:	89 83       	std	Y+1, r24	; 0x01
    2850:	89 81       	ldd	r24, Y+1	; 0x01
    2852:	83 30       	cpi	r24, 0x03	; 3
    2854:	08 f4       	brcc	.+2      	; 0x2858 <RTO_void_Scheduler_+0xe8>
    2856:	93 cf       	rjmp	.-218    	; 0x277e <RTO_void_Scheduler_+0xe>
		}
		else{
			RTO_TCBs[counter].FirstDelay--;
		}
	}
}
    2858:	0f 90       	pop	r0
    285a:	cf 91       	pop	r28
    285c:	df 91       	pop	r29
    285e:	08 95       	ret

00002860 <APP_ToggleLed1>:
#include "STDTYPE.h"
#include "MTMR_Interface.h"
#include "MDIO_Interface.h"
void APP_ToggleLed1(void){
    2860:	df 93       	push	r29
    2862:	cf 93       	push	r28
    2864:	cd b7       	in	r28, 0x3d	; 61
    2866:	de b7       	in	r29, 0x3e	; 62
	static u8 flag =0;
	if(flag == 0){
    2868:	80 91 8a 00 	lds	r24, 0x008A
    286c:	88 23       	and	r24, r24
    286e:	49 f4       	brne	.+18     	; 0x2882 <APP_ToggleLed1+0x22>
		MDIO_u8SetPinValue(MDIO_U8_PORTA , MDIO_U8_PIN_0 , MDIO_U8_HIGH);
    2870:	80 e0       	ldi	r24, 0x00	; 0
    2872:	60 e0       	ldi	r22, 0x00	; 0
    2874:	41 e0       	ldi	r20, 0x01	; 1
    2876:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <MDIO_u8SetPinValue>
		flag =1;
    287a:	81 e0       	ldi	r24, 0x01	; 1
    287c:	80 93 8a 00 	sts	0x008A, r24
    2880:	07 c0       	rjmp	.+14     	; 0x2890 <APP_ToggleLed1+0x30>
	}else{
		MDIO_u8SetPinValue(MDIO_U8_PORTA , MDIO_U8_PIN_0 , MDIO_U8_LOW);
    2882:	80 e0       	ldi	r24, 0x00	; 0
    2884:	60 e0       	ldi	r22, 0x00	; 0
    2886:	40 e0       	ldi	r20, 0x00	; 0
    2888:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <MDIO_u8SetPinValue>
		flag =0;
    288c:	10 92 8a 00 	sts	0x008A, r1
	}
}
    2890:	cf 91       	pop	r28
    2892:	df 91       	pop	r29
    2894:	08 95       	ret

00002896 <APP_ToggleLed2>:
void APP_ToggleLed2(void){
    2896:	df 93       	push	r29
    2898:	cf 93       	push	r28
    289a:	cd b7       	in	r28, 0x3d	; 61
    289c:	de b7       	in	r29, 0x3e	; 62
	static u8 flag =0;
	if(flag == 0){
    289e:	80 91 8b 00 	lds	r24, 0x008B
    28a2:	88 23       	and	r24, r24
    28a4:	49 f4       	brne	.+18     	; 0x28b8 <APP_ToggleLed2+0x22>
		MDIO_u8SetPinValue(MDIO_U8_PORTA , MDIO_U8_PIN_1 , MDIO_U8_HIGH);
    28a6:	80 e0       	ldi	r24, 0x00	; 0
    28a8:	61 e0       	ldi	r22, 0x01	; 1
    28aa:	41 e0       	ldi	r20, 0x01	; 1
    28ac:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <MDIO_u8SetPinValue>
		flag =1;
    28b0:	81 e0       	ldi	r24, 0x01	; 1
    28b2:	80 93 8b 00 	sts	0x008B, r24
    28b6:	07 c0       	rjmp	.+14     	; 0x28c6 <APP_ToggleLed2+0x30>
	}else{
		MDIO_u8SetPinValue(MDIO_U8_PORTA , MDIO_U8_PIN_1 , MDIO_U8_LOW);
    28b8:	80 e0       	ldi	r24, 0x00	; 0
    28ba:	61 e0       	ldi	r22, 0x01	; 1
    28bc:	40 e0       	ldi	r20, 0x00	; 0
    28be:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <MDIO_u8SetPinValue>
		flag =0;
    28c2:	10 92 8b 00 	sts	0x008B, r1
	}
}
    28c6:	cf 91       	pop	r28
    28c8:	df 91       	pop	r29
    28ca:	08 95       	ret

000028cc <APP_ToggleLed3>:
void APP_ToggleLed3(void){
    28cc:	df 93       	push	r29
    28ce:	cf 93       	push	r28
    28d0:	cd b7       	in	r28, 0x3d	; 61
    28d2:	de b7       	in	r29, 0x3e	; 62
	static u8 flag =0;
	if(flag == 0){
    28d4:	80 91 8c 00 	lds	r24, 0x008C
    28d8:	88 23       	and	r24, r24
    28da:	49 f4       	brne	.+18     	; 0x28ee <APP_ToggleLed3+0x22>
		MDIO_u8SetPinValue(MDIO_U8_PORTA , MDIO_U8_PIN_2 , MDIO_U8_HIGH);
    28dc:	80 e0       	ldi	r24, 0x00	; 0
    28de:	62 e0       	ldi	r22, 0x02	; 2
    28e0:	41 e0       	ldi	r20, 0x01	; 1
    28e2:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <MDIO_u8SetPinValue>
		flag =1;
    28e6:	81 e0       	ldi	r24, 0x01	; 1
    28e8:	80 93 8c 00 	sts	0x008C, r24
    28ec:	07 c0       	rjmp	.+14     	; 0x28fc <APP_ToggleLed3+0x30>
	}else{
		MDIO_u8SetPinValue(MDIO_U8_PORTA , MDIO_U8_PIN_2 , MDIO_U8_LOW);
    28ee:	80 e0       	ldi	r24, 0x00	; 0
    28f0:	62 e0       	ldi	r22, 0x02	; 2
    28f2:	40 e0       	ldi	r20, 0x00	; 0
    28f4:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <MDIO_u8SetPinValue>
		flag =0;
    28f8:	10 92 8c 00 	sts	0x008C, r1
	}
}
    28fc:	cf 91       	pop	r28
    28fe:	df 91       	pop	r29
    2900:	08 95       	ret

00002902 <main>:
int main(){
    2902:	df 93       	push	r29
    2904:	cf 93       	push	r28
    2906:	cd b7       	in	r28, 0x3d	; 61
    2908:	de b7       	in	r29, 0x3e	; 62
	MDIO_U8INIT();
    290a:	0e 94 25 11 	call	0x224a	; 0x224a <MDIO_U8INIT>
	/*Create task*/
	RTO_u8CreateTask(0,1000,3000,&APP_ToggleLed1);
    290e:	20 e3       	ldi	r18, 0x30	; 48
    2910:	34 e1       	ldi	r19, 0x14	; 20
    2912:	80 e0       	ldi	r24, 0x00	; 0
    2914:	90 e0       	ldi	r25, 0x00	; 0
    2916:	68 ee       	ldi	r22, 0xE8	; 232
    2918:	73 e0       	ldi	r23, 0x03	; 3
    291a:	48 eb       	ldi	r20, 0xB8	; 184
    291c:	5b e0       	ldi	r21, 0x0B	; 11
    291e:	0e 94 4d 13 	call	0x269a	; 0x269a <RTO_u8CreateTask>
	RTO_u8CreateTask(1,3000,0,&APP_ToggleLed2);
    2922:	2b e4       	ldi	r18, 0x4B	; 75
    2924:	34 e1       	ldi	r19, 0x14	; 20
    2926:	81 e0       	ldi	r24, 0x01	; 1
    2928:	90 e0       	ldi	r25, 0x00	; 0
    292a:	68 eb       	ldi	r22, 0xB8	; 184
    292c:	7b e0       	ldi	r23, 0x0B	; 11
    292e:	40 e0       	ldi	r20, 0x00	; 0
    2930:	50 e0       	ldi	r21, 0x00	; 0
    2932:	0e 94 4d 13 	call	0x269a	; 0x269a <RTO_u8CreateTask>
	RTO_u8CreateTask(2,5000,0,&APP_ToggleLed3);
    2936:	26 e6       	ldi	r18, 0x66	; 102
    2938:	34 e1       	ldi	r19, 0x14	; 20
    293a:	82 e0       	ldi	r24, 0x02	; 2
    293c:	90 e0       	ldi	r25, 0x00	; 0
    293e:	68 e8       	ldi	r22, 0x88	; 136
    2940:	73 e1       	ldi	r23, 0x13	; 19
    2942:	40 e0       	ldi	r20, 0x00	; 0
    2944:	50 e0       	ldi	r21, 0x00	; 0
    2946:	0e 94 4d 13 	call	0x269a	; 0x269a <RTO_u8CreateTask>
	RTO_voidStartScheduler();
    294a:	0e 94 a2 13 	call	0x2744	; 0x2744 <RTO_voidStartScheduler>
	while(1){
		MDIO_u8SetPinValue(MDIO_U8_PORTA , MDIO_U8_PIN_3 , MDIO_U8_HIGH);
    294e:	80 e0       	ldi	r24, 0x00	; 0
    2950:	63 e0       	ldi	r22, 0x03	; 3
    2952:	41 e0       	ldi	r20, 0x01	; 1
    2954:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <MDIO_u8SetPinValue>
    2958:	fa cf       	rjmp	.-12     	; 0x294e <main+0x4c>

0000295a <__udivmodqi4>:
    295a:	99 1b       	sub	r25, r25
    295c:	79 e0       	ldi	r23, 0x09	; 9
    295e:	04 c0       	rjmp	.+8      	; 0x2968 <__udivmodqi4_ep>

00002960 <__udivmodqi4_loop>:
    2960:	99 1f       	adc	r25, r25
    2962:	96 17       	cp	r25, r22
    2964:	08 f0       	brcs	.+2      	; 0x2968 <__udivmodqi4_ep>
    2966:	96 1b       	sub	r25, r22

00002968 <__udivmodqi4_ep>:
    2968:	88 1f       	adc	r24, r24
    296a:	7a 95       	dec	r23
    296c:	c9 f7       	brne	.-14     	; 0x2960 <__udivmodqi4_loop>
    296e:	80 95       	com	r24
    2970:	08 95       	ret

00002972 <__divmodhi4>:
    2972:	97 fb       	bst	r25, 7
    2974:	09 2e       	mov	r0, r25
    2976:	07 26       	eor	r0, r23
    2978:	0a d0       	rcall	.+20     	; 0x298e <__divmodhi4_neg1>
    297a:	77 fd       	sbrc	r23, 7
    297c:	04 d0       	rcall	.+8      	; 0x2986 <__divmodhi4_neg2>
    297e:	0c d0       	rcall	.+24     	; 0x2998 <__udivmodhi4>
    2980:	06 d0       	rcall	.+12     	; 0x298e <__divmodhi4_neg1>
    2982:	00 20       	and	r0, r0
    2984:	1a f4       	brpl	.+6      	; 0x298c <__divmodhi4_exit>

00002986 <__divmodhi4_neg2>:
    2986:	70 95       	com	r23
    2988:	61 95       	neg	r22
    298a:	7f 4f       	sbci	r23, 0xFF	; 255

0000298c <__divmodhi4_exit>:
    298c:	08 95       	ret

0000298e <__divmodhi4_neg1>:
    298e:	f6 f7       	brtc	.-4      	; 0x298c <__divmodhi4_exit>
    2990:	90 95       	com	r25
    2992:	81 95       	neg	r24
    2994:	9f 4f       	sbci	r25, 0xFF	; 255
    2996:	08 95       	ret

00002998 <__udivmodhi4>:
    2998:	aa 1b       	sub	r26, r26
    299a:	bb 1b       	sub	r27, r27
    299c:	51 e1       	ldi	r21, 0x11	; 17
    299e:	07 c0       	rjmp	.+14     	; 0x29ae <__udivmodhi4_ep>

000029a0 <__udivmodhi4_loop>:
    29a0:	aa 1f       	adc	r26, r26
    29a2:	bb 1f       	adc	r27, r27
    29a4:	a6 17       	cp	r26, r22
    29a6:	b7 07       	cpc	r27, r23
    29a8:	10 f0       	brcs	.+4      	; 0x29ae <__udivmodhi4_ep>
    29aa:	a6 1b       	sub	r26, r22
    29ac:	b7 0b       	sbc	r27, r23

000029ae <__udivmodhi4_ep>:
    29ae:	88 1f       	adc	r24, r24
    29b0:	99 1f       	adc	r25, r25
    29b2:	5a 95       	dec	r21
    29b4:	a9 f7       	brne	.-22     	; 0x29a0 <__udivmodhi4_loop>
    29b6:	80 95       	com	r24
    29b8:	90 95       	com	r25
    29ba:	bc 01       	movw	r22, r24
    29bc:	cd 01       	movw	r24, r26
    29be:	08 95       	ret

000029c0 <__prologue_saves__>:
    29c0:	2f 92       	push	r2
    29c2:	3f 92       	push	r3
    29c4:	4f 92       	push	r4
    29c6:	5f 92       	push	r5
    29c8:	6f 92       	push	r6
    29ca:	7f 92       	push	r7
    29cc:	8f 92       	push	r8
    29ce:	9f 92       	push	r9
    29d0:	af 92       	push	r10
    29d2:	bf 92       	push	r11
    29d4:	cf 92       	push	r12
    29d6:	df 92       	push	r13
    29d8:	ef 92       	push	r14
    29da:	ff 92       	push	r15
    29dc:	0f 93       	push	r16
    29de:	1f 93       	push	r17
    29e0:	cf 93       	push	r28
    29e2:	df 93       	push	r29
    29e4:	cd b7       	in	r28, 0x3d	; 61
    29e6:	de b7       	in	r29, 0x3e	; 62
    29e8:	ca 1b       	sub	r28, r26
    29ea:	db 0b       	sbc	r29, r27
    29ec:	0f b6       	in	r0, 0x3f	; 63
    29ee:	f8 94       	cli
    29f0:	de bf       	out	0x3e, r29	; 62
    29f2:	0f be       	out	0x3f, r0	; 63
    29f4:	cd bf       	out	0x3d, r28	; 61
    29f6:	09 94       	ijmp

000029f8 <__epilogue_restores__>:
    29f8:	2a 88       	ldd	r2, Y+18	; 0x12
    29fa:	39 88       	ldd	r3, Y+17	; 0x11
    29fc:	48 88       	ldd	r4, Y+16	; 0x10
    29fe:	5f 84       	ldd	r5, Y+15	; 0x0f
    2a00:	6e 84       	ldd	r6, Y+14	; 0x0e
    2a02:	7d 84       	ldd	r7, Y+13	; 0x0d
    2a04:	8c 84       	ldd	r8, Y+12	; 0x0c
    2a06:	9b 84       	ldd	r9, Y+11	; 0x0b
    2a08:	aa 84       	ldd	r10, Y+10	; 0x0a
    2a0a:	b9 84       	ldd	r11, Y+9	; 0x09
    2a0c:	c8 84       	ldd	r12, Y+8	; 0x08
    2a0e:	df 80       	ldd	r13, Y+7	; 0x07
    2a10:	ee 80       	ldd	r14, Y+6	; 0x06
    2a12:	fd 80       	ldd	r15, Y+5	; 0x05
    2a14:	0c 81       	ldd	r16, Y+4	; 0x04
    2a16:	1b 81       	ldd	r17, Y+3	; 0x03
    2a18:	aa 81       	ldd	r26, Y+2	; 0x02
    2a1a:	b9 81       	ldd	r27, Y+1	; 0x01
    2a1c:	ce 0f       	add	r28, r30
    2a1e:	d1 1d       	adc	r29, r1
    2a20:	0f b6       	in	r0, 0x3f	; 63
    2a22:	f8 94       	cli
    2a24:	de bf       	out	0x3e, r29	; 62
    2a26:	0f be       	out	0x3f, r0	; 63
    2a28:	cd bf       	out	0x3d, r28	; 61
    2a2a:	ed 01       	movw	r28, r26
    2a2c:	08 95       	ret

00002a2e <_exit>:
    2a2e:	f8 94       	cli

00002a30 <__stop_program>:
    2a30:	ff cf       	rjmp	.-2      	; 0x2a30 <__stop_program>
